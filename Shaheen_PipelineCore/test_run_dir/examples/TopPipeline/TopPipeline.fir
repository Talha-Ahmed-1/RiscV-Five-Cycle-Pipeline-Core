;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit TopPipeline : 
  module Alu : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip AluControl : UInt<5>, flip in1 : SInt<32>, flip in2 : SInt<32>, Branch : UInt<1>, out : SInt<32>}
    
    node _T_16 = eq(io.AluControl, UInt<1>("h00")) @[Alu.scala 15:29]
    when _T_16 : @[Alu.scala 15:44]
      node _T_17 = add(io.in1, io.in2) @[Alu.scala 15:62]
      node _T_18 = tail(_T_17, 1) @[Alu.scala 15:62]
      node _T_19 = asSInt(_T_18) @[Alu.scala 15:62]
      io.out <= _T_19 @[Alu.scala 15:52]
      skip @[Alu.scala 15:44]
    else : @[Alu.scala 17:49]
      node _T_21 = eq(io.AluControl, UInt<1>("h01")) @[Alu.scala 17:34]
      when _T_21 : @[Alu.scala 17:49]
        node _T_22 = bits(io.in2, 4, 0) @[Alu.scala 17:76]
        node _T_23 = dshl(io.in1, _T_22) @[Alu.scala 17:67]
        io.out <= _T_23 @[Alu.scala 17:57]
        skip @[Alu.scala 17:49]
      else : @[Alu.scala 19:49]
        node _T_25 = eq(io.AluControl, UInt<3>("h04")) @[Alu.scala 19:34]
        when _T_25 : @[Alu.scala 19:49]
          node _T_26 = xor(io.in1, io.in2) @[Alu.scala 19:67]
          node _T_27 = asSInt(_T_26) @[Alu.scala 19:67]
          io.out <= _T_27 @[Alu.scala 19:57]
          skip @[Alu.scala 19:49]
        else : @[Alu.scala 21:81]
          node _T_29 = eq(io.AluControl, UInt<3>("h05")) @[Alu.scala 21:34]
          node _T_31 = eq(io.AluControl, UInt<4>("h0d")) @[Alu.scala 21:66]
          node _T_32 = or(_T_29, _T_31) @[Alu.scala 21:49]
          when _T_32 : @[Alu.scala 21:81]
            node _T_33 = bits(io.in2, 4, 0) @[Alu.scala 21:108]
            node _T_34 = dshr(io.in1, _T_33) @[Alu.scala 21:99]
            io.out <= _T_34 @[Alu.scala 21:89]
            skip @[Alu.scala 21:81]
          else : @[Alu.scala 23:49]
            node _T_36 = eq(io.AluControl, UInt<3>("h06")) @[Alu.scala 23:34]
            when _T_36 : @[Alu.scala 23:49]
              node _T_37 = or(io.in1, io.in2) @[Alu.scala 23:67]
              node _T_38 = asSInt(_T_37) @[Alu.scala 23:67]
              io.out <= _T_38 @[Alu.scala 23:57]
              skip @[Alu.scala 23:49]
            else : @[Alu.scala 25:49]
              node _T_40 = eq(io.AluControl, UInt<3>("h07")) @[Alu.scala 25:34]
              when _T_40 : @[Alu.scala 25:49]
                node _T_41 = and(io.in1, io.in2) @[Alu.scala 25:67]
                node _T_42 = asSInt(_T_41) @[Alu.scala 25:67]
                io.out <= _T_42 @[Alu.scala 25:57]
                skip @[Alu.scala 25:49]
              else : @[Alu.scala 27:49]
                node _T_44 = eq(io.AluControl, UInt<4>("h08")) @[Alu.scala 27:34]
                when _T_44 : @[Alu.scala 27:49]
                  node _T_45 = sub(io.in1, io.in2) @[Alu.scala 27:67]
                  node _T_46 = tail(_T_45, 1) @[Alu.scala 27:67]
                  node _T_47 = asSInt(_T_46) @[Alu.scala 27:67]
                  io.out <= _T_47 @[Alu.scala 27:57]
                  skip @[Alu.scala 27:49]
                else : @[Alu.scala 29:49]
                  node _T_49 = eq(io.AluControl, UInt<5>("h01f")) @[Alu.scala 29:34]
                  when _T_49 : @[Alu.scala 29:49]
                    io.out <= io.in1 @[Alu.scala 29:57]
                    skip @[Alu.scala 29:49]
                  else : @[Alu.scala 31:49]
                    node _T_51 = eq(io.AluControl, UInt<5>("h015")) @[Alu.scala 31:34]
                    when _T_51 : @[Alu.scala 31:49]
                      node _T_52 = geq(io.in1, io.in2) @[Alu.scala 32:30]
                      when _T_52 : @[Alu.scala 32:40]
                        io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 32:48]
                        skip @[Alu.scala 32:40]
                      else : @[Alu.scala 33:28]
                        io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 33:36]
                        skip @[Alu.scala 33:28]
                      skip @[Alu.scala 31:49]
                    else : @[Alu.scala 35:49]
                      node _T_56 = eq(io.AluControl, UInt<5>("h017")) @[Alu.scala 35:34]
                      when _T_56 : @[Alu.scala 35:49]
                        node _T_57 = asUInt(io.in1) @[Alu.scala 36:30]
                        node _T_58 = asUInt(io.in2) @[Alu.scala 36:47]
                        node _T_59 = geq(_T_57, _T_58) @[Alu.scala 36:37]
                        when _T_59 : @[Alu.scala 36:54]
                          io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 36:62]
                          skip @[Alu.scala 36:54]
                        else : @[Alu.scala 37:28]
                          io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 37:36]
                          skip @[Alu.scala 37:28]
                        skip @[Alu.scala 35:49]
                      else : @[Alu.scala 39:81]
                        node _T_63 = eq(io.AluControl, UInt<2>("h03")) @[Alu.scala 39:34]
                        node _T_65 = eq(io.AluControl, UInt<5>("h016")) @[Alu.scala 39:66]
                        node _T_66 = or(_T_63, _T_65) @[Alu.scala 39:49]
                        when _T_66 : @[Alu.scala 39:81]
                          node _T_67 = asUInt(io.in1) @[Alu.scala 40:30]
                          node _T_68 = asUInt(io.in2) @[Alu.scala 40:46]
                          node _T_69 = lt(_T_67, _T_68) @[Alu.scala 40:37]
                          when _T_69 : @[Alu.scala 40:53]
                            io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 40:61]
                            skip @[Alu.scala 40:53]
                          else : @[Alu.scala 41:28]
                            io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 41:36]
                            skip @[Alu.scala 41:28]
                          skip @[Alu.scala 39:81]
                        else : @[Alu.scala 43:49]
                          node _T_73 = eq(io.AluControl, UInt<5>("h010")) @[Alu.scala 43:34]
                          when _T_73 : @[Alu.scala 43:49]
                            node _T_74 = eq(io.in1, io.in2) @[Alu.scala 44:30]
                            when _T_74 : @[Alu.scala 44:41]
                              io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 44:49]
                              skip @[Alu.scala 44:41]
                            else : @[Alu.scala 45:28]
                              io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 45:36]
                              skip @[Alu.scala 45:28]
                            skip @[Alu.scala 43:49]
                          else : @[Alu.scala 47:81]
                            node _T_78 = eq(io.AluControl, UInt<2>("h02")) @[Alu.scala 47:34]
                            node _T_80 = eq(io.AluControl, UInt<5>("h014")) @[Alu.scala 47:66]
                            node _T_81 = or(_T_78, _T_80) @[Alu.scala 47:49]
                            when _T_81 : @[Alu.scala 47:81]
                              node _T_82 = lt(io.in1, io.in2) @[Alu.scala 48:30]
                              when _T_82 : @[Alu.scala 48:39]
                                io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 48:47]
                                skip @[Alu.scala 48:39]
                              else : @[Alu.scala 49:28]
                                io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 49:36]
                                skip @[Alu.scala 49:28]
                              skip @[Alu.scala 47:81]
                            else : @[Alu.scala 51:49]
                              node _T_86 = eq(io.AluControl, UInt<5>("h011")) @[Alu.scala 51:34]
                              when _T_86 : @[Alu.scala 51:49]
                                node _T_87 = neq(io.in1, io.in2) @[Alu.scala 52:30]
                                when _T_87 : @[Alu.scala 52:41]
                                  io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 52:49]
                                  skip @[Alu.scala 52:41]
                                else : @[Alu.scala 53:28]
                                  io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 53:36]
                                  skip @[Alu.scala 53:28]
                                skip @[Alu.scala 51:49]
                              else : @[Alu.scala 54:20]
                                io.out is invalid @[Alu.scala 54:28]
                                skip @[Alu.scala 54:20]
    node _T_91 = eq(io.out, asSInt(UInt<2>("h01"))) @[Alu.scala 57:22]
    node _T_92 = bits(io.AluControl, 4, 3) @[Alu.scala 57:46]
    node _T_94 = eq(_T_92, UInt<2>("h02")) @[Alu.scala 57:52]
    node _T_95 = and(_T_91, _T_94) @[Alu.scala 57:30]
    when _T_95 : @[Alu.scala 57:64]
      io.Branch <= UInt<1>("h01") @[Alu.scala 57:75]
      skip @[Alu.scala 57:64]
    else : @[Alu.scala 58:20]
      io.Branch <= UInt<1>("h00") @[Alu.scala 58:31]
      skip @[Alu.scala 58:20]
    
  module InstTypeDeco : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, R : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, I : UInt<1>, Jal : UInt<1>, Jalr : UInt<1>, Lui : UInt<1>}
    
    node _T_24 = eq(io.opcode, UInt<6>("h033")) @[InstTypeDeco.scala 18:25]
    when _T_24 : @[InstTypeDeco.scala 18:37]
      io.R <= UInt<1>("h01") @[InstTypeDeco.scala 19:22]
      io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 20:25]
      io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 21:26]
      io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 22:27]
      io.I <= UInt<1>("h00") @[InstTypeDeco.scala 23:22]
      io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 24:24]
      io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 25:25]
      io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 26:24]
      skip @[InstTypeDeco.scala 18:37]
    else : @[InstTypeDeco.scala 28:41]
      node _T_34 = eq(io.opcode, UInt<2>("h03")) @[InstTypeDeco.scala 28:30]
      when _T_34 : @[InstTypeDeco.scala 28:41]
        io.R <= UInt<1>("h00") @[InstTypeDeco.scala 29:22]
        io.Load <= UInt<1>("h01") @[InstTypeDeco.scala 30:25]
        io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 31:26]
        io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 32:27]
        io.I <= UInt<1>("h00") @[InstTypeDeco.scala 33:22]
        io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 34:24]
        io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 35:25]
        io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 36:24]
        skip @[InstTypeDeco.scala 28:41]
      else : @[InstTypeDeco.scala 38:42]
        node _T_44 = eq(io.opcode, UInt<6>("h023")) @[InstTypeDeco.scala 38:30]
        when _T_44 : @[InstTypeDeco.scala 38:42]
          io.R <= UInt<1>("h00") @[InstTypeDeco.scala 39:22]
          io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 40:25]
          io.Store <= UInt<1>("h01") @[InstTypeDeco.scala 41:26]
          io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 42:27]
          io.I <= UInt<1>("h00") @[InstTypeDeco.scala 43:22]
          io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 44:24]
          io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 45:25]
          io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 46:24]
          skip @[InstTypeDeco.scala 38:42]
        else : @[InstTypeDeco.scala 48:42]
          node _T_54 = eq(io.opcode, UInt<7>("h063")) @[InstTypeDeco.scala 48:30]
          when _T_54 : @[InstTypeDeco.scala 48:42]
            io.R <= UInt<1>("h00") @[InstTypeDeco.scala 49:22]
            io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 50:25]
            io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 51:26]
            io.Branch <= UInt<1>("h01") @[InstTypeDeco.scala 52:27]
            io.I <= UInt<1>("h00") @[InstTypeDeco.scala 53:22]
            io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 54:24]
            io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 55:25]
            io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 56:24]
            skip @[InstTypeDeco.scala 48:42]
          else : @[InstTypeDeco.scala 58:42]
            node _T_64 = eq(io.opcode, UInt<5>("h013")) @[InstTypeDeco.scala 58:30]
            when _T_64 : @[InstTypeDeco.scala 58:42]
              io.R <= UInt<1>("h00") @[InstTypeDeco.scala 59:22]
              io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 60:25]
              io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 61:26]
              io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 62:27]
              io.I <= UInt<1>("h01") @[InstTypeDeco.scala 63:22]
              io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 64:24]
              io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 65:25]
              io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 66:24]
              skip @[InstTypeDeco.scala 58:42]
            else : @[InstTypeDeco.scala 68:42]
              node _T_74 = eq(io.opcode, UInt<7>("h067")) @[InstTypeDeco.scala 68:30]
              when _T_74 : @[InstTypeDeco.scala 68:42]
                io.R <= UInt<1>("h00") @[InstTypeDeco.scala 69:22]
                io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 70:25]
                io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 71:26]
                io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 72:27]
                io.I <= UInt<1>("h00") @[InstTypeDeco.scala 73:22]
                io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 74:24]
                io.Jalr <= UInt<1>("h01") @[InstTypeDeco.scala 75:25]
                io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 76:24]
                skip @[InstTypeDeco.scala 68:42]
              else : @[InstTypeDeco.scala 78:42]
                node _T_84 = eq(io.opcode, UInt<7>("h06f")) @[InstTypeDeco.scala 78:30]
                when _T_84 : @[InstTypeDeco.scala 78:42]
                  io.R <= UInt<1>("h00") @[InstTypeDeco.scala 79:22]
                  io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 80:25]
                  io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 81:26]
                  io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 82:27]
                  io.I <= UInt<1>("h00") @[InstTypeDeco.scala 83:22]
                  io.Jal <= UInt<1>("h01") @[InstTypeDeco.scala 84:24]
                  io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 85:25]
                  io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 86:24]
                  skip @[InstTypeDeco.scala 78:42]
                else : @[InstTypeDeco.scala 88:42]
                  node _T_94 = eq(io.opcode, UInt<6>("h037")) @[InstTypeDeco.scala 88:30]
                  when _T_94 : @[InstTypeDeco.scala 88:42]
                    io.R <= UInt<1>("h00") @[InstTypeDeco.scala 89:22]
                    io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 90:25]
                    io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 91:26]
                    io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 92:27]
                    io.I <= UInt<1>("h00") @[InstTypeDeco.scala 93:22]
                    io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 94:24]
                    io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 95:25]
                    io.Lui <= UInt<1>("h01") @[InstTypeDeco.scala 96:24]
                    skip @[InstTypeDeco.scala 88:42]
                  else : @[InstTypeDeco.scala 98:20]
                    io.R <= UInt<1>("h00") @[InstTypeDeco.scala 99:22]
                    io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 100:25]
                    io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 101:26]
                    io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 102:27]
                    io.I <= UInt<1>("h00") @[InstTypeDeco.scala 103:22]
                    io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 104:24]
                    io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 105:25]
                    io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 106:24]
                    skip @[InstTypeDeco.scala 98:20]
    
  module CntrlDecode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip R : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip Branch1 : UInt<1>, flip I : UInt<1>, flip Jal : UInt<1>, flip Jalr : UInt<1>, flip Lui : UInt<1>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, AluOp : UInt<3>, OpA : UInt<2>, OpB : UInt<1>, ExtSel : UInt<2>, NextPc : UInt<2>}
    
    node _T_42 = eq(io.R, UInt<1>("h01")) @[CntrlDecode.scala 27:20]
    when _T_42 : @[CntrlDecode.scala 27:31]
      io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 28:29]
      io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 29:27]
      io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 30:28]
      io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 31:29]
      io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 32:29]
      io.AluOp <= UInt<1>("h00") @[CntrlDecode.scala 33:26]
      io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 34:24]
      io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 35:24]
      io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 36:27]
      io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 37:27]
      skip @[CntrlDecode.scala 27:31]
    else : @[CntrlDecode.scala 39:39]
      node _T_54 = eq(io.Load, UInt<1>("h01")) @[CntrlDecode.scala 39:28]
      when _T_54 : @[CntrlDecode.scala 39:39]
        io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 40:29]
        io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 41:27]
        io.MemRead <= UInt<1>("h01") @[CntrlDecode.scala 42:28]
        io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 43:29]
        io.MemtoReg <= UInt<1>("h01") @[CntrlDecode.scala 44:29]
        io.AluOp <= UInt<3>("h04") @[CntrlDecode.scala 45:26]
        io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 46:24]
        io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 47:24]
        io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 48:27]
        io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 49:27]
        skip @[CntrlDecode.scala 39:39]
      else : @[CntrlDecode.scala 51:40]
        node _T_66 = eq(io.Store, UInt<1>("h01")) @[CntrlDecode.scala 51:29]
        when _T_66 : @[CntrlDecode.scala 51:40]
          io.MemWrite <= UInt<1>("h01") @[CntrlDecode.scala 52:29]
          io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 53:27]
          io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 54:28]
          io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 55:29]
          io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 56:29]
          io.AluOp <= UInt<3>("h05") @[CntrlDecode.scala 57:26]
          io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 58:24]
          io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 59:24]
          io.ExtSel <= UInt<2>("h02") @[CntrlDecode.scala 60:27]
          io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 61:27]
          skip @[CntrlDecode.scala 51:40]
        else : @[CntrlDecode.scala 63:39]
          node _T_78 = eq(io.Branch1, UInt<1>("h01")) @[CntrlDecode.scala 63:31]
          when _T_78 : @[CntrlDecode.scala 63:39]
            io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 64:29]
            io.Branch <= UInt<1>("h01") @[CntrlDecode.scala 65:27]
            io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 66:28]
            io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 67:29]
            io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 68:29]
            io.AluOp <= UInt<2>("h02") @[CntrlDecode.scala 69:26]
            io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 70:24]
            io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 71:24]
            io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 72:27]
            io.NextPc <= UInt<1>("h01") @[CntrlDecode.scala 73:27]
            skip @[CntrlDecode.scala 63:39]
          else : @[CntrlDecode.scala 75:36]
            node _T_90 = eq(io.I, UInt<1>("h01")) @[CntrlDecode.scala 75:25]
            when _T_90 : @[CntrlDecode.scala 75:36]
              io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 76:29]
              io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 77:27]
              io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 78:28]
              io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 79:29]
              io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 80:29]
              io.AluOp <= UInt<1>("h01") @[CntrlDecode.scala 81:26]
              io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 82:24]
              io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 83:24]
              io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 84:27]
              io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 85:27]
              skip @[CntrlDecode.scala 75:36]
            else : @[CntrlDecode.scala 87:38]
              node _T_102 = eq(io.Jal, UInt<1>("h01")) @[CntrlDecode.scala 87:27]
              when _T_102 : @[CntrlDecode.scala 87:38]
                io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 88:29]
                io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 89:27]
                io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 90:28]
                io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 91:29]
                io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 92:29]
                io.AluOp <= UInt<2>("h03") @[CntrlDecode.scala 93:26]
                io.OpA <= UInt<2>("h02") @[CntrlDecode.scala 94:24]
                io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 95:24]
                io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 96:27]
                io.NextPc <= UInt<2>("h02") @[CntrlDecode.scala 97:27]
                skip @[CntrlDecode.scala 87:38]
              else : @[CntrlDecode.scala 99:39]
                node _T_114 = eq(io.Jalr, UInt<1>("h01")) @[CntrlDecode.scala 99:28]
                when _T_114 : @[CntrlDecode.scala 99:39]
                  io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 100:29]
                  io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 101:27]
                  io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 102:28]
                  io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 103:29]
                  io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 104:29]
                  io.AluOp <= UInt<2>("h03") @[CntrlDecode.scala 105:26]
                  io.OpA <= UInt<2>("h02") @[CntrlDecode.scala 106:24]
                  io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 107:24]
                  io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 108:27]
                  io.NextPc <= UInt<2>("h03") @[CntrlDecode.scala 109:27]
                  skip @[CntrlDecode.scala 99:39]
                else : @[CntrlDecode.scala 111:38]
                  node _T_126 = eq(io.Lui, UInt<1>("h01")) @[CntrlDecode.scala 111:27]
                  when _T_126 : @[CntrlDecode.scala 111:38]
                    io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 112:29]
                    io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 113:27]
                    io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 114:28]
                    io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 115:29]
                    io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 116:29]
                    io.AluOp <= UInt<3>("h06") @[CntrlDecode.scala 117:26]
                    io.OpA <= UInt<2>("h03") @[CntrlDecode.scala 118:24]
                    io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 119:24]
                    io.ExtSel <= UInt<1>("h01") @[CntrlDecode.scala 120:27]
                    io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 121:27]
                    skip @[CntrlDecode.scala 111:38]
                  else : @[CntrlDecode.scala 123:20]
                    io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 124:29]
                    io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 125:27]
                    io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 126:28]
                    io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 127:29]
                    io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 128:29]
                    io.AluOp <= UInt<3>("h07") @[CntrlDecode.scala 129:26]
                    io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 130:24]
                    io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 131:24]
                    io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 132:27]
                    io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 133:27]
                    skip @[CntrlDecode.scala 123:20]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, AluOp : UInt<3>, OpA : UInt<2>, OpB : UInt<1>, ExtSel : UInt<2>, NextPc : UInt<2>}
    
    inst c1 of InstTypeDeco @[Control.scala 20:24]
    c1.clock <= clock
    c1.reset <= reset
    inst c2 of CntrlDecode @[Control.scala 21:24]
    c2.clock <= clock
    c2.reset <= reset
    c1.io.opcode <= io.opcode @[Control.scala 23:22]
    c2.io.R <= c1.io.R @[Control.scala 25:17]
    c2.io.Load <= c1.io.Load @[Control.scala 26:20]
    c2.io.Store <= c1.io.Store @[Control.scala 27:21]
    c2.io.Branch1 <= c1.io.Branch @[Control.scala 28:23]
    c2.io.I <= c1.io.I @[Control.scala 29:17]
    c2.io.Jal <= c1.io.Jal @[Control.scala 30:19]
    c2.io.Jalr <= c1.io.Jalr @[Control.scala 31:20]
    c2.io.Lui <= c1.io.Lui @[Control.scala 32:19]
    io.MemWrite <= c2.io.MemWrite @[Control.scala 34:21]
    io.Branch <= c2.io.Branch @[Control.scala 35:19]
    io.MemRead <= c2.io.MemRead @[Control.scala 36:20]
    io.RegWrite <= c2.io.RegWrite @[Control.scala 37:21]
    io.MemtoReg <= c2.io.MemtoReg @[Control.scala 38:21]
    io.AluOp <= c2.io.AluOp @[Control.scala 39:18]
    io.OpA <= c2.io.OpA @[Control.scala 40:16]
    io.OpB <= c2.io.OpB @[Control.scala 41:16]
    io.ExtSel <= c2.io.ExtSel @[Control.scala 42:19]
    io.NextPc <= c2.io.NextPc @[Control.scala 43:19]
    
  module ImmGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip instruction : UInt<32>, flip pc : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>}
    
    node _T_19 = bits(io.instruction, 31, 25) @[ImmGen.scala 18:42]
    node _T_20 = bits(io.instruction, 11, 7) @[ImmGen.scala 18:64]
    node s_imm13 = cat(_T_19, _T_20) @[Cat.scala 30:58]
    node _T_21 = bits(s_imm13, 11, 11) @[ImmGen.scala 19:41]
    node _T_22 = bits(_T_21, 0, 0) @[Bitwise.scala 72:15]
    node _T_25 = mux(_T_22, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_26 = cat(_T_25, s_imm13) @[Cat.scala 30:58]
    node _T_27 = asSInt(_T_26) @[ImmGen.scala 19:57]
    io.s_imm <= _T_27 @[ImmGen.scala 19:18]
    node _T_28 = bits(io.instruction, 31, 31) @[ImmGen.scala 21:43]
    node _T_29 = bits(io.instruction, 7, 7) @[ImmGen.scala 21:62]
    node _T_30 = bits(io.instruction, 30, 25) @[ImmGen.scala 21:80]
    node _T_31 = bits(io.instruction, 11, 8) @[ImmGen.scala 21:102]
    node _T_33 = cat(_T_31, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_34 = cat(_T_28, _T_29) @[Cat.scala 30:58]
    node _T_35 = cat(_T_34, _T_30) @[Cat.scala 30:58]
    node sb_imm13 = cat(_T_35, _T_33) @[Cat.scala 30:58]
    node _T_36 = bits(sb_imm13, 12, 12) @[ImmGen.scala 22:44]
    node _T_37 = bits(_T_36, 0, 0) @[Bitwise.scala 72:15]
    node _T_40 = mux(_T_37, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_41 = cat(_T_40, sb_imm13) @[Cat.scala 30:58]
    node _T_42 = add(_T_41, io.pc) @[ImmGen.scala 22:61]
    node _T_43 = tail(_T_42, 1) @[ImmGen.scala 22:61]
    node _T_44 = asSInt(_T_43) @[ImmGen.scala 22:70]
    io.sb_imm <= _T_44 @[ImmGen.scala 22:19]
    node _T_45 = bits(io.instruction, 31, 31) @[ImmGen.scala 24:43]
    node _T_46 = bits(io.instruction, 19, 12) @[ImmGen.scala 24:62]
    node _T_47 = bits(io.instruction, 20, 20) @[ImmGen.scala 24:84]
    node _T_48 = bits(io.instruction, 30, 21) @[ImmGen.scala 24:103]
    node _T_50 = cat(_T_48, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_51 = cat(_T_45, _T_46) @[Cat.scala 30:58]
    node _T_52 = cat(_T_51, _T_47) @[Cat.scala 30:58]
    node uj_imm21 = cat(_T_52, _T_50) @[Cat.scala 30:58]
    node _T_53 = bits(uj_imm21, 20, 20) @[ImmGen.scala 25:44]
    node _T_54 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_57 = mux(_T_54, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_58 = cat(_T_57, uj_imm21) @[Cat.scala 30:58]
    node _T_59 = add(_T_58, io.pc) @[ImmGen.scala 25:61]
    node _T_60 = tail(_T_59, 1) @[ImmGen.scala 25:61]
    node _T_61 = asSInt(_T_60) @[ImmGen.scala 25:70]
    io.uj_imm <= _T_61 @[ImmGen.scala 25:19]
    node _T_62 = bits(io.instruction, 31, 31) @[ImmGen.scala 27:49]
    node _T_63 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_63, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_67 = bits(io.instruction, 31, 12) @[ImmGen.scala 27:69]
    node _T_68 = cat(_T_66, _T_67) @[Cat.scala 30:58]
    node _T_69 = shl(_T_68, 12) @[ImmGen.scala 27:79]
    node _T_70 = asSInt(_T_69) @[ImmGen.scala 27:86]
    io.u_imm <= _T_70 @[ImmGen.scala 27:18]
    node _T_71 = bits(io.instruction, 31, 31) @[ImmGen.scala 29:48]
    node _T_72 = bits(_T_71, 0, 0) @[Bitwise.scala 72:15]
    node _T_75 = mux(_T_72, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_76 = bits(io.instruction, 31, 20) @[ImmGen.scala 29:68]
    node _T_77 = cat(_T_75, _T_76) @[Cat.scala 30:58]
    node _T_78 = asSInt(_T_77) @[ImmGen.scala 29:78]
    io.i_imm <= _T_78 @[ImmGen.scala 29:18]
    
  module AluCntrl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip aluOp : UInt<3>, flip funct3 : UInt<3>, flip funct7 : UInt<1>, out : UInt<5>}
    
    node _T_14 = eq(io.aluOp, UInt<1>("h00")) @[AluCntrl.scala 11:24]
    node _T_16 = eq(io.aluOp, UInt<1>("h01")) @[AluCntrl.scala 11:49]
    node _T_17 = or(_T_14, _T_16) @[AluCntrl.scala 11:37]
    when _T_17 : @[AluCntrl.scala 11:62]
      node _T_19 = cat(UInt<1>("h00"), io.funct7) @[Cat.scala 30:58]
      node _T_20 = cat(_T_19, io.funct3) @[Cat.scala 30:58]
      io.out <= _T_20 @[AluCntrl.scala 11:70]
      skip @[AluCntrl.scala 11:62]
    else : @[AluCntrl.scala 12:67]
      node _T_22 = eq(io.aluOp, UInt<3>("h05")) @[AluCntrl.scala 12:29]
      node _T_24 = eq(io.aluOp, UInt<3>("h04")) @[AluCntrl.scala 12:54]
      node _T_25 = or(_T_22, _T_24) @[AluCntrl.scala 12:42]
      when _T_25 : @[AluCntrl.scala 12:67]
        io.out <= UInt<1>("h00") @[AluCntrl.scala 12:75]
        skip @[AluCntrl.scala 12:67]
      else : @[AluCntrl.scala 13:42]
        node _T_28 = eq(io.aluOp, UInt<2>("h03")) @[AluCntrl.scala 13:29]
        when _T_28 : @[AluCntrl.scala 13:42]
          io.out <= UInt<5>("h01f") @[AluCntrl.scala 13:50]
          skip @[AluCntrl.scala 13:42]
        else : @[AluCntrl.scala 14:42]
          node _T_31 = eq(io.aluOp, UInt<2>("h02")) @[AluCntrl.scala 14:29]
          when _T_31 : @[AluCntrl.scala 14:42]
            node _T_33 = cat(UInt<2>("h02"), io.funct3) @[Cat.scala 30:58]
            io.out <= _T_33 @[AluCntrl.scala 14:50]
            skip @[AluCntrl.scala 14:42]
          else : @[AluCntrl.scala 15:42]
            node _T_35 = eq(io.aluOp, UInt<3>("h06")) @[AluCntrl.scala 15:29]
            when _T_35 : @[AluCntrl.scala 15:42]
              io.out <= UInt<1>("h00") @[AluCntrl.scala 15:50]
              skip @[AluCntrl.scala 15:42]
            else : @[AluCntrl.scala 16:20]
              io.out is invalid @[AluCntrl.scala 16:28]
              skip @[AluCntrl.scala 16:20]
    
  module Register : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip RegWrite : UInt<1>, flip rs1_s : UInt<5>, flip rs2_s : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    reg register : SInt<32>[32], clock @[Register.scala 16:27]
    register[0] <= asSInt(UInt<1>("h00")) @[Register.scala 17:21]
    register[2] <= asSInt(UInt<11>("h0200")) @[Register.scala 18:21]
    io.rs1 <= register[io.rs1_s] @[Register.scala 19:16]
    io.rs2 <= register[io.rs2_s] @[Register.scala 20:16]
    node _T_61 = eq(io.RegWrite, UInt<1>("h01")) @[Register.scala 21:26]
    when _T_61 : @[Register.scala 21:34]
      node _T_63 = eq(io.rd, UInt<1>("h00")) @[Register.scala 22:28]
      when _T_63 : @[Register.scala 22:43]
        register[io.rd] <= asSInt(UInt<1>("h00")) @[Register.scala 22:60]
        skip @[Register.scala 22:43]
      else : @[Register.scala 23:28]
        register[io.rd] <= io.WriteData @[Register.scala 23:45]
        skip @[Register.scala 23:28]
      skip @[Register.scala 21:34]
    
  module Memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<10>, rdData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[Memory.scala 11:22]
    infer mport _T_11 = mem[io.wrAddr], clock @[Memory.scala 12:25]
    io.rdData <= _T_11 @[Memory.scala 12:19]
    
  module Pc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Pc.scala 10:26]
    reg <= io.input @[Pc.scala 11:13]
    node _T_14 = add(reg, UInt<3>("h04")) @[Pc.scala 12:23]
    node _T_15 = tail(_T_14, 1) @[Pc.scala 12:23]
    io.pc4 <= _T_15 @[Pc.scala 12:16]
    io.pc <= reg @[Pc.scala 13:15]
    
  module Jalr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : SInt<32>, flip in2 : SInt<32>, out : SInt<32>}
    
    node _T_11 = add(io.in1, io.in2) @[Jalr.scala 11:24]
    node _T_12 = tail(_T_11, 1) @[Jalr.scala 11:24]
    node a = asSInt(_T_12) @[Jalr.scala 11:24]
    node _T_14 = and(a, asSInt(UInt<33>("h0fffffffe"))) @[Jalr.scala 12:21]
    node _T_15 = asSInt(_T_14) @[Jalr.scala 12:21]
    io.out <= _T_15 @[Jalr.scala 12:16]
    
  module MemoryD : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Addr : UInt<8>, flip Data : SInt<32>, flip MemWrite : UInt<1>, flip MemRead : UInt<1>, out : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[MemoryD.scala 15:22]
    node _T_18 = eq(io.MemWrite, UInt<1>("h01")) @[MemoryD.scala 16:27]
    when _T_18 : @[MemoryD.scala 16:35]
      write mport _T_19 = mem[io.Addr], clock
      _T_19 <= io.Data
      skip @[MemoryD.scala 16:35]
    node _T_21 = eq(io.MemRead, UInt<1>("h01")) @[MemoryD.scala 21:25]
    when _T_21 : @[MemoryD.scala 21:33]
      read mport _T_22 = mem[io.Addr], clock @[MemoryD.scala 22:35]
      io.out <= _T_22 @[MemoryD.scala 22:24]
      skip @[MemoryD.scala 21:33]
    else : @[MemoryD.scala 24:20]
      io.out is invalid @[MemoryD.scala 24:28]
      skip @[MemoryD.scala 24:20]
    
  module IF_ID_Reg : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : UInt<32>, pc_out : UInt<32>, flip pc4_in : UInt<32>, pc4_out : UInt<32>, flip inst_in : UInt<32>, inst_out : UInt<32>}
    
    reg pcreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID_Reg.scala 17:28]
    reg pc4reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID_Reg.scala 18:29]
    reg instreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID_Reg.scala 19:30]
    pcreg <= io.pc_in @[IF_ID_Reg.scala 20:15]
    io.pc_out <= pcreg @[IF_ID_Reg.scala 21:19]
    pc4reg <= io.pc4_in @[IF_ID_Reg.scala 22:16]
    io.pc4_out <= pc4reg @[IF_ID_Reg.scala 23:20]
    instreg <= io.inst_in @[IF_ID_Reg.scala 24:17]
    io.inst_out <= instreg @[IF_ID_Reg.scala 25:21]
    
  module ID_EX_Reg : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : UInt<32>, pc_out : UInt<32>, flip pc4_in : UInt<32>, pc4_out : UInt<32>, flip MemWrite_in : UInt<1>, flip Branch_in : UInt<1>, flip MemRead_in : UInt<1>, flip RegWrite_in : UInt<1>, flip MemtoReg_in : UInt<1>, flip AluOp_in : UInt<3>, flip OpA_in : UInt<2>, flip OpB_in : UInt<1>, flip NextPc_in : UInt<2>, MemWrite_out : UInt<1>, Branch_out : UInt<1>, MemRead_out : UInt<1>, RegWrite_out : UInt<1>, MemtoReg_out : UInt<1>, AluOp_out : UInt<3>, OpA_out : UInt<2>, OpB_out : UInt<1>, NextPc_out : UInt<2>, flip imm_in : SInt<32>, imm_out : SInt<32>, flip func3_in : UInt<3>, flip func7_in : UInt<1>, func3_out : UInt<3>, func7_out : UInt<1>, flip rs1_in : SInt<32>, flip rs2_in : SInt<32>, rs1_out : SInt<32>, rs2_out : SInt<32>, flip rs1_s_in : UInt<5>, flip rs2_s_in : UInt<5>, rs1_s_out : UInt<5>, rs2_s_out : UInt<5>, flip rd_in : UInt<5>, rd_out : UInt<5>}
    
    reg pcreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX_Reg.scala 54:28]
    reg pc4reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX_Reg.scala 55:29]
    reg instreg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX_Reg.scala 56:30]
    pcreg <= io.pc_in @[ID_EX_Reg.scala 57:15]
    io.pc_out <= pcreg @[ID_EX_Reg.scala 58:19]
    pc4reg <= io.pc4_in @[ID_EX_Reg.scala 59:16]
    io.pc4_out <= pc4reg @[ID_EX_Reg.scala 60:20]
    reg immreg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX_Reg.scala 62:29]
    immreg <= io.imm_in @[ID_EX_Reg.scala 63:16]
    io.imm_out <= immreg @[ID_EX_Reg.scala 64:20]
    reg func3reg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX_Reg.scala 66:31]
    func3reg <= io.func3_in @[ID_EX_Reg.scala 67:18]
    io.func3_out <= func3reg @[ID_EX_Reg.scala 68:22]
    reg func7reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX_Reg.scala 69:31]
    func7reg <= io.func7_in @[ID_EX_Reg.scala 70:18]
    io.func7_out <= func7reg @[ID_EX_Reg.scala 71:22]
    reg rs1reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX_Reg.scala 73:29]
    rs1reg <= io.rs1_in @[ID_EX_Reg.scala 74:16]
    io.rs1_out <= rs1reg @[ID_EX_Reg.scala 75:20]
    reg rs2reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX_Reg.scala 76:29]
    rs2reg <= io.rs2_in @[ID_EX_Reg.scala 77:16]
    io.rs2_out <= rs2reg @[ID_EX_Reg.scala 78:20]
    reg rs1sreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX_Reg.scala 79:30]
    rs1sreg <= io.rs1_s_in @[ID_EX_Reg.scala 80:17]
    io.rs1_s_out <= rs1sreg @[ID_EX_Reg.scala 81:22]
    reg rs2sreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX_Reg.scala 82:30]
    rs2sreg <= io.rs2_s_in @[ID_EX_Reg.scala 83:17]
    io.rs2_s_out <= rs2sreg @[ID_EX_Reg.scala 84:22]
    reg rdreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX_Reg.scala 85:28]
    rdreg <= io.rd_in @[ID_EX_Reg.scala 86:15]
    io.rd_out <= rdreg @[ID_EX_Reg.scala 87:19]
    reg MemWritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX_Reg.scala 89:34]
    reg Branchreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX_Reg.scala 90:32]
    reg MemReadreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX_Reg.scala 91:33]
    reg RegWritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX_Reg.scala 92:34]
    reg MemtoRegreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX_Reg.scala 93:34]
    reg AluOpreg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX_Reg.scala 94:31]
    reg OpAreg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX_Reg.scala 95:29]
    reg OpBreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX_Reg.scala 96:29]
    reg NextPcreg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX_Reg.scala 97:32]
    MemWritereg <= io.MemWrite_in @[ID_EX_Reg.scala 99:21]
    io.MemWrite_out <= MemWritereg @[ID_EX_Reg.scala 100:25]
    Branchreg <= io.Branch_in @[ID_EX_Reg.scala 101:19]
    io.Branch_out <= Branchreg @[ID_EX_Reg.scala 102:23]
    MemReadreg <= io.MemRead_in @[ID_EX_Reg.scala 103:20]
    io.MemRead_out <= MemReadreg @[ID_EX_Reg.scala 104:24]
    RegWritereg <= io.RegWrite_in @[ID_EX_Reg.scala 105:21]
    io.RegWrite_out <= RegWritereg @[ID_EX_Reg.scala 106:25]
    MemtoRegreg <= io.MemtoReg_in @[ID_EX_Reg.scala 107:21]
    io.MemtoReg_out <= MemtoRegreg @[ID_EX_Reg.scala 108:25]
    AluOpreg <= io.AluOp_in @[ID_EX_Reg.scala 109:18]
    io.AluOp_out <= AluOpreg @[ID_EX_Reg.scala 110:22]
    OpAreg <= io.OpA_in @[ID_EX_Reg.scala 111:16]
    io.OpA_out <= OpAreg @[ID_EX_Reg.scala 112:20]
    OpBreg <= io.OpB_in @[ID_EX_Reg.scala 113:16]
    io.OpB_out <= OpBreg @[ID_EX_Reg.scala 114:20]
    NextPcreg <= io.NextPc_in @[ID_EX_Reg.scala 115:19]
    io.NextPc_out <= NextPcreg @[ID_EX_Reg.scala 116:23]
    
  module EX_MEM_Reg : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs2_in : SInt<32>, rs2_out : SInt<32>, flip alu_in : SInt<32>, alu_out : SInt<32>, flip rd_in : UInt<5>, rd_out : UInt<5>, flip MemWrite_in : UInt<1>, flip MemRead_in : UInt<1>, flip RegWrite_in : UInt<1>, flip MemtoReg_in : UInt<1>, MemWrite_out : UInt<1>, MemRead_out : UInt<1>, RegWrite_out : UInt<1>, MemtoReg_out : UInt<1>}
    
    reg rs2reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM_Reg.scala 26:29]
    rs2reg <= io.rs2_in @[EX_MEM_Reg.scala 27:16]
    io.rs2_out <= rs2reg @[EX_MEM_Reg.scala 28:20]
    reg alureg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM_Reg.scala 30:29]
    alureg <= io.alu_in @[EX_MEM_Reg.scala 31:16]
    io.alu_out <= alureg @[EX_MEM_Reg.scala 32:20]
    reg rdreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM_Reg.scala 34:28]
    rdreg <= io.rd_in @[EX_MEM_Reg.scala 35:15]
    io.rd_out <= rdreg @[EX_MEM_Reg.scala 36:19]
    reg MemWritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM_Reg.scala 38:34]
    reg MemReadreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM_Reg.scala 39:33]
    reg RegWritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM_Reg.scala 40:34]
    reg MemtoRegreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM_Reg.scala 41:34]
    MemWritereg <= io.MemWrite_in @[EX_MEM_Reg.scala 43:21]
    io.MemWrite_out <= MemWritereg @[EX_MEM_Reg.scala 44:25]
    MemReadreg <= io.MemRead_in @[EX_MEM_Reg.scala 45:20]
    io.MemRead_out <= MemReadreg @[EX_MEM_Reg.scala 46:24]
    RegWritereg <= io.RegWrite_in @[EX_MEM_Reg.scala 47:21]
    io.RegWrite_out <= RegWritereg @[EX_MEM_Reg.scala 48:25]
    MemtoRegreg <= io.MemtoReg_in @[EX_MEM_Reg.scala 49:21]
    io.MemtoReg_out <= MemtoRegreg @[EX_MEM_Reg.scala 50:25]
    
  module MEM_WB_Reg : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip mem_in : SInt<32>, mem_out : SInt<32>, flip alu_in : SInt<32>, alu_out : SInt<32>, flip rd_in : UInt<5>, rd_out : UInt<5>, flip RegWrite_in : UInt<1>, RegWrite_out : UInt<1>, flip MemtoReg_in : UInt<1>, MemtoReg_out : UInt<1>}
    
    reg memreg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB_Reg.scala 20:29]
    memreg <= io.mem_in @[MEM_WB_Reg.scala 21:16]
    io.mem_out <= memreg @[MEM_WB_Reg.scala 22:20]
    reg alureg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB_Reg.scala 24:29]
    alureg <= io.alu_in @[MEM_WB_Reg.scala 25:16]
    io.alu_out <= alureg @[MEM_WB_Reg.scala 26:20]
    reg rdreg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_WB_Reg.scala 28:28]
    rdreg <= io.rd_in @[MEM_WB_Reg.scala 29:15]
    io.rd_out <= rdreg @[MEM_WB_Reg.scala 30:19]
    reg RegWritereg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB_Reg.scala 32:34]
    reg MemtoRegreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB_Reg.scala 33:34]
    RegWritereg <= io.RegWrite_in @[MEM_WB_Reg.scala 34:21]
    io.RegWrite_out <= RegWritereg @[MEM_WB_Reg.scala 35:25]
    MemtoRegreg <= io.MemtoReg_in @[MEM_WB_Reg.scala 36:21]
    io.MemtoReg_out <= MemtoRegreg @[MEM_WB_Reg.scala 37:25]
    
  module StallingUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inst_in : UInt<32>, inst_out : UInt<32>, flip MemRead : UInt<1>, flip rd : UInt<5>, flip rs1_s : UInt<5>, flip rs2_s : UInt<5>, stall : UInt<1>, flip pc_in : UInt<32>, pc_out : UInt<32>, flip pc4_in : UInt<32>, pc4_out : UInt<32>, control_s : UInt<1>}
    
    node _T_30 = eq(io.MemRead, UInt<1>("h01")) @[StallingUnit.scala 22:26]
    node _T_31 = eq(io.rd, io.rs1_s) @[StallingUnit.scala 22:48]
    node _T_32 = eq(io.rd, io.rs2_s) @[StallingUnit.scala 22:72]
    node _T_33 = or(_T_31, _T_32) @[StallingUnit.scala 22:62]
    node _T_34 = and(_T_30, _T_33) @[StallingUnit.scala 22:37]
    when _T_34 : @[StallingUnit.scala 22:87]
      io.stall <= UInt<1>("h01") @[StallingUnit.scala 23:26]
      io.control_s <= UInt<1>("h01") @[StallingUnit.scala 25:30]
      io.inst_out <= io.inst_in @[StallingUnit.scala 26:29]
      io.pc_out <= io.pc_in @[StallingUnit.scala 27:27]
      io.pc4_out <= io.pc4_in @[StallingUnit.scala 28:28]
      skip @[StallingUnit.scala 22:87]
    else : @[StallingUnit.scala 30:20]
      io.stall <= UInt<1>("h00") @[StallingUnit.scala 31:26]
      io.inst_out <= UInt<1>("h00") @[StallingUnit.scala 32:29]
      io.control_s <= UInt<1>("h00") @[StallingUnit.scala 34:30]
      io.pc_out <= UInt<1>("h00") @[StallingUnit.scala 35:27]
      io.pc4_out <= UInt<1>("h00") @[StallingUnit.scala 36:28]
      skip @[StallingUnit.scala 30:20]
    
  module ForwardingUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip RegWrite : UInt<1>, flip RegWrite1 : UInt<1>, flip EX_MEM_rd : UInt<5>, flip MEM_WB_rd : UInt<5>, flip ID_EX_rs1_s : UInt<5>, flip ID_EX_rs2_s : UInt<5>, forwardA : UInt<2>, forwardB : UInt<2>}
    
    io.forwardA <= UInt<1>("h00") @[ForwardingUnit.scala 18:21]
    io.forwardB <= UInt<1>("h00") @[ForwardingUnit.scala 19:21]
    node _T_24 = eq(io.RegWrite, UInt<1>("h01")) @[ForwardingUnit.scala 20:27]
    node _T_26 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[ForwardingUnit.scala 20:54]
    node _T_27 = and(_T_24, _T_26) @[ForwardingUnit.scala 20:38]
    when _T_27 : @[ForwardingUnit.scala 20:69]
      node _T_28 = eq(io.EX_MEM_rd, io.ID_EX_rs1_s) @[ForwardingUnit.scala 21:37]
      node _T_29 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[ForwardingUnit.scala 21:74]
      node _T_30 = and(_T_28, _T_29) @[ForwardingUnit.scala 21:57]
      when _T_30 : @[ForwardingUnit.scala 21:94]
        io.forwardA <= UInt<2>("h02") @[ForwardingUnit.scala 22:37]
        io.forwardB <= UInt<2>("h02") @[ForwardingUnit.scala 23:37]
        skip @[ForwardingUnit.scala 21:94]
      else : @[ForwardingUnit.scala 25:60]
        node _T_33 = eq(io.EX_MEM_rd, io.ID_EX_rs1_s) @[ForwardingUnit.scala 25:41]
        when _T_33 : @[ForwardingUnit.scala 25:60]
          io.forwardA <= UInt<2>("h02") @[ForwardingUnit.scala 25:73]
          skip @[ForwardingUnit.scala 25:60]
        else : @[ForwardingUnit.scala 26:60]
          node _T_35 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[ForwardingUnit.scala 26:41]
          when _T_35 : @[ForwardingUnit.scala 26:60]
            io.forwardB <= UInt<2>("h02") @[ForwardingUnit.scala 26:73]
            skip @[ForwardingUnit.scala 26:60]
      skip @[ForwardingUnit.scala 20:69]
    node _T_38 = eq(io.RegWrite1, UInt<1>("h01")) @[ForwardingUnit.scala 28:28]
    node _T_40 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[ForwardingUnit.scala 28:55]
    node _T_41 = and(_T_38, _T_40) @[ForwardingUnit.scala 28:39]
    when _T_41 : @[ForwardingUnit.scala 28:70]
      node _T_42 = eq(io.MEM_WB_rd, io.ID_EX_rs1_s) @[ForwardingUnit.scala 29:38]
      node _T_43 = eq(io.MEM_WB_rd, io.ID_EX_rs2_s) @[ForwardingUnit.scala 29:75]
      node _T_44 = and(_T_42, _T_43) @[ForwardingUnit.scala 29:58]
      node _T_46 = eq(io.RegWrite, UInt<1>("h01")) @[ForwardingUnit.scala 29:114]
      node _T_48 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[ForwardingUnit.scala 29:143]
      node _T_49 = and(_T_46, _T_48) @[ForwardingUnit.scala 29:126]
      node _T_50 = eq(io.EX_MEM_rd, io.ID_EX_rs1_s) @[ForwardingUnit.scala 29:176]
      node _T_51 = and(_T_49, _T_50) @[ForwardingUnit.scala 29:159]
      node _T_52 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[ForwardingUnit.scala 29:213]
      node _T_53 = and(_T_51, _T_52) @[ForwardingUnit.scala 29:196]
      node _T_54 = not(_T_53) @[ForwardingUnit.scala 29:99]
      node _T_55 = and(_T_44, _T_54) @[ForwardingUnit.scala 29:96]
      when _T_55 : @[ForwardingUnit.scala 29:234]
        io.forwardA <= UInt<1>("h01") @[ForwardingUnit.scala 30:37]
        io.forwardB <= UInt<1>("h01") @[ForwardingUnit.scala 31:37]
        skip @[ForwardingUnit.scala 29:234]
      else : @[ForwardingUnit.scala 33:161]
        node _T_58 = eq(io.MEM_WB_rd, io.ID_EX_rs1_s) @[ForwardingUnit.scala 33:41]
        node _T_60 = eq(io.RegWrite, UInt<1>("h01")) @[ForwardingUnit.scala 33:78]
        node _T_62 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[ForwardingUnit.scala 33:107]
        node _T_63 = and(_T_60, _T_62) @[ForwardingUnit.scala 33:90]
        node _T_64 = eq(io.EX_MEM_rd, io.ID_EX_rs1_s) @[ForwardingUnit.scala 33:140]
        node _T_65 = and(_T_63, _T_64) @[ForwardingUnit.scala 33:123]
        node _T_66 = not(_T_65) @[ForwardingUnit.scala 33:63]
        node _T_67 = and(_T_58, _T_66) @[ForwardingUnit.scala 33:60]
        when _T_67 : @[ForwardingUnit.scala 33:161]
          io.forwardA <= UInt<1>("h01") @[ForwardingUnit.scala 34:37]
          skip @[ForwardingUnit.scala 33:161]
        else : @[ForwardingUnit.scala 36:161]
          node _T_69 = eq(io.MEM_WB_rd, io.ID_EX_rs2_s) @[ForwardingUnit.scala 36:41]
          node _T_71 = eq(io.RegWrite, UInt<1>("h01")) @[ForwardingUnit.scala 36:78]
          node _T_73 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[ForwardingUnit.scala 36:107]
          node _T_74 = and(_T_71, _T_73) @[ForwardingUnit.scala 36:90]
          node _T_75 = eq(io.EX_MEM_rd, io.ID_EX_rs2_s) @[ForwardingUnit.scala 36:140]
          node _T_76 = and(_T_74, _T_75) @[ForwardingUnit.scala 36:123]
          node _T_77 = not(_T_76) @[ForwardingUnit.scala 36:63]
          node _T_78 = and(_T_69, _T_77) @[ForwardingUnit.scala 36:60]
          when _T_78 : @[ForwardingUnit.scala 36:161]
            io.forwardB <= UInt<1>("h01") @[ForwardingUnit.scala 37:37]
            skip @[ForwardingUnit.scala 36:161]
      skip @[ForwardingUnit.scala 28:70]
    
  module BranchUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip func3 : UInt<3>, flip rs1 : SInt<32>, flip rs2 : SInt<32>, branch : UInt<1>}
    
    node _T_14 = eq(io.func3, UInt<1>("h00")) @[BranchUnit.scala 15:24]
    when _T_14 : @[BranchUnit.scala 15:37]
      node _T_15 = eq(io.rs1, io.rs2) @[BranchUnit.scala 16:30]
      when _T_15 : @[BranchUnit.scala 16:41]
        io.branch <= UInt<1>("h01") @[BranchUnit.scala 16:52]
        skip @[BranchUnit.scala 16:41]
      else : @[BranchUnit.scala 17:28]
        io.branch <= UInt<1>("h00") @[BranchUnit.scala 17:39]
        skip @[BranchUnit.scala 17:28]
      skip @[BranchUnit.scala 15:37]
    else : @[BranchUnit.scala 19:42]
      node _T_19 = eq(io.func3, UInt<1>("h01")) @[BranchUnit.scala 19:29]
      when _T_19 : @[BranchUnit.scala 19:42]
        node _T_20 = neq(io.rs1, io.rs2) @[BranchUnit.scala 20:30]
        when _T_20 : @[BranchUnit.scala 20:41]
          io.branch <= UInt<1>("h01") @[BranchUnit.scala 20:52]
          skip @[BranchUnit.scala 20:41]
        else : @[BranchUnit.scala 21:28]
          io.branch <= UInt<1>("h00") @[BranchUnit.scala 21:39]
          skip @[BranchUnit.scala 21:28]
        skip @[BranchUnit.scala 19:42]
      else : @[BranchUnit.scala 23:42]
        node _T_24 = eq(io.func3, UInt<3>("h04")) @[BranchUnit.scala 23:29]
        when _T_24 : @[BranchUnit.scala 23:42]
          node _T_25 = lt(io.rs1, io.rs2) @[BranchUnit.scala 24:30]
          when _T_25 : @[BranchUnit.scala 24:39]
            io.branch <= UInt<1>("h01") @[BranchUnit.scala 24:50]
            skip @[BranchUnit.scala 24:39]
          else : @[BranchUnit.scala 25:28]
            io.branch <= UInt<1>("h00") @[BranchUnit.scala 25:39]
            skip @[BranchUnit.scala 25:28]
          skip @[BranchUnit.scala 23:42]
        else : @[BranchUnit.scala 27:42]
          node _T_29 = eq(io.func3, UInt<3>("h05")) @[BranchUnit.scala 27:29]
          when _T_29 : @[BranchUnit.scala 27:42]
            node _T_30 = geq(io.rs1, io.rs2) @[BranchUnit.scala 28:30]
            when _T_30 : @[BranchUnit.scala 28:40]
              io.branch <= UInt<1>("h01") @[BranchUnit.scala 28:51]
              skip @[BranchUnit.scala 28:40]
            else : @[BranchUnit.scala 29:28]
              io.branch <= UInt<1>("h00") @[BranchUnit.scala 29:39]
              skip @[BranchUnit.scala 29:28]
            skip @[BranchUnit.scala 27:42]
          else : @[BranchUnit.scala 31:42]
            node _T_34 = eq(io.func3, UInt<3>("h06")) @[BranchUnit.scala 31:29]
            when _T_34 : @[BranchUnit.scala 31:42]
              node _T_35 = asUInt(io.rs1) @[BranchUnit.scala 32:30]
              node _T_36 = asUInt(io.rs2) @[BranchUnit.scala 32:46]
              node _T_37 = lt(_T_35, _T_36) @[BranchUnit.scala 32:37]
              when _T_37 : @[BranchUnit.scala 32:53]
                io.branch <= UInt<1>("h01") @[BranchUnit.scala 32:64]
                skip @[BranchUnit.scala 32:53]
              else : @[BranchUnit.scala 33:28]
                io.branch <= UInt<1>("h00") @[BranchUnit.scala 33:39]
                skip @[BranchUnit.scala 33:28]
              skip @[BranchUnit.scala 31:42]
            else : @[BranchUnit.scala 35:42]
              node _T_41 = eq(io.func3, UInt<3>("h07")) @[BranchUnit.scala 35:29]
              when _T_41 : @[BranchUnit.scala 35:42]
                node _T_42 = asUInt(io.rs1) @[BranchUnit.scala 36:30]
                node _T_43 = asUInt(io.rs2) @[BranchUnit.scala 36:47]
                node _T_44 = geq(_T_42, _T_43) @[BranchUnit.scala 36:37]
                when _T_44 : @[BranchUnit.scala 36:54]
                  io.branch <= UInt<1>("h01") @[BranchUnit.scala 36:65]
                  skip @[BranchUnit.scala 36:54]
                else : @[BranchUnit.scala 37:28]
                  io.branch <= UInt<1>("h00") @[BranchUnit.scala 37:39]
                  skip @[BranchUnit.scala 37:28]
                skip @[BranchUnit.scala 35:42]
              else : @[BranchUnit.scala 39:20]
                io.branch <= UInt<1>("h00") @[BranchUnit.scala 39:31]
                skip @[BranchUnit.scala 39:20]
    
  module BranchForwardUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ID_EX_rd : UInt<5>, flip ID_EX_MemRead : UInt<1>, flip EX_MEM_rd : UInt<5>, flip EX_MEM_MemRead : UInt<1>, flip MEM_WB_rd : UInt<5>, flip MEM_WB_MemtoReg : UInt<1>, flip rs1_s : UInt<5>, flip rs2_s : UInt<5>, flip branch : UInt<1>, forwardA : UInt<4>, forwardB : UInt<4>}
    
    io.forwardA <= UInt<1>("h00") @[BranchForwardUnit.scala 19:17]
    io.forwardB <= UInt<1>("h00") @[BranchForwardUnit.scala 20:17]
    node _T_30 = eq(io.branch, UInt<1>("h01")) @[BranchForwardUnit.scala 22:20]
    when _T_30 : @[BranchForwardUnit.scala 22:29]
      node _T_32 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 23:24]
      node _T_34 = neq(io.ID_EX_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 23:59]
      node _T_35 = and(_T_32, _T_34) @[BranchForwardUnit.scala 23:39]
      node _T_36 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 23:83]
      node _T_37 = and(_T_35, _T_36) @[BranchForwardUnit.scala 23:67]
      node _T_38 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 23:113]
      node _T_39 = and(_T_37, _T_38) @[BranchForwardUnit.scala 23:97]
      when _T_39 : @[BranchForwardUnit.scala 23:128]
        io.forwardA <= UInt<1>("h01") @[BranchForwardUnit.scala 24:21]
        io.forwardB <= UInt<1>("h01") @[BranchForwardUnit.scala 25:21]
        skip @[BranchForwardUnit.scala 23:128]
      else : @[BranchForwardUnit.scala 26:105]
        node _T_43 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 26:31]
        node _T_45 = neq(io.ID_EX_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 26:66]
        node _T_46 = and(_T_43, _T_45) @[BranchForwardUnit.scala 26:46]
        node _T_47 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 26:90]
        node _T_48 = and(_T_46, _T_47) @[BranchForwardUnit.scala 26:74]
        when _T_48 : @[BranchForwardUnit.scala 26:105]
          io.forwardA <= UInt<1>("h01") @[BranchForwardUnit.scala 27:21]
          skip @[BranchForwardUnit.scala 26:105]
        else : @[BranchForwardUnit.scala 28:105]
          node _T_51 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 28:31]
          node _T_53 = neq(io.ID_EX_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 28:66]
          node _T_54 = and(_T_51, _T_53) @[BranchForwardUnit.scala 28:46]
          node _T_55 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 28:90]
          node _T_56 = and(_T_54, _T_55) @[BranchForwardUnit.scala 28:74]
          when _T_56 : @[BranchForwardUnit.scala 28:105]
            io.forwardB <= UInt<1>("h01") @[BranchForwardUnit.scala 29:21]
            skip @[BranchForwardUnit.scala 28:105]
      node _T_59 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 33:25]
      node _T_61 = neq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 33:61]
      node _T_62 = and(_T_59, _T_61) @[BranchForwardUnit.scala 33:40]
      node _T_64 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 34:24]
      node _T_65 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 34:56]
      node _T_66 = and(_T_64, _T_65) @[BranchForwardUnit.scala 34:40]
      node _T_67 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 34:86]
      node _T_68 = and(_T_66, _T_67) @[BranchForwardUnit.scala 34:70]
      node _T_69 = not(_T_68) @[BranchForwardUnit.scala 34:9]
      node _T_70 = and(_T_62, _T_69) @[BranchForwardUnit.scala 33:69]
      node _T_71 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 35:23]
      node _T_72 = and(_T_70, _T_71) @[BranchForwardUnit.scala 34:101]
      node _T_73 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 35:54]
      node _T_74 = and(_T_72, _T_73) @[BranchForwardUnit.scala 35:37]
      when _T_74 : @[BranchForwardUnit.scala 35:69]
        io.forwardA <= UInt<2>("h02") @[BranchForwardUnit.scala 37:21]
        io.forwardB <= UInt<2>("h02") @[BranchForwardUnit.scala 38:21]
        skip @[BranchForwardUnit.scala 35:69]
      else : @[BranchForwardUnit.scala 42:38]
        node _T_78 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 40:32]
        node _T_80 = neq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 40:68]
        node _T_81 = and(_T_78, _T_80) @[BranchForwardUnit.scala 40:47]
        node _T_83 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 41:24]
        node _T_84 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 41:56]
        node _T_85 = and(_T_83, _T_84) @[BranchForwardUnit.scala 41:40]
        node _T_86 = not(_T_85) @[BranchForwardUnit.scala 41:9]
        node _T_87 = and(_T_81, _T_86) @[BranchForwardUnit.scala 40:76]
        node _T_88 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 42:23]
        node _T_89 = and(_T_87, _T_88) @[BranchForwardUnit.scala 41:71]
        when _T_89 : @[BranchForwardUnit.scala 42:38]
          io.forwardB <= UInt<2>("h02") @[BranchForwardUnit.scala 44:21]
          skip @[BranchForwardUnit.scala 42:38]
        else : @[BranchForwardUnit.scala 48:38]
          node _T_92 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 46:32]
          node _T_94 = neq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 46:68]
          node _T_95 = and(_T_92, _T_94) @[BranchForwardUnit.scala 46:47]
          node _T_97 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 47:24]
          node _T_98 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 47:56]
          node _T_99 = and(_T_97, _T_98) @[BranchForwardUnit.scala 47:40]
          node _T_100 = not(_T_99) @[BranchForwardUnit.scala 47:9]
          node _T_101 = and(_T_95, _T_100) @[BranchForwardUnit.scala 46:76]
          node _T_102 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 48:23]
          node _T_103 = and(_T_101, _T_102) @[BranchForwardUnit.scala 47:71]
          when _T_103 : @[BranchForwardUnit.scala 48:38]
            io.forwardA <= UInt<2>("h02") @[BranchForwardUnit.scala 50:21]
            skip @[BranchForwardUnit.scala 48:38]
          else : @[BranchForwardUnit.scala 54:69]
            node _T_106 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 52:32]
            node _T_108 = eq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 52:68]
            node _T_109 = and(_T_106, _T_108) @[BranchForwardUnit.scala 52:47]
            node _T_111 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 53:24]
            node _T_112 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 53:56]
            node _T_113 = and(_T_111, _T_112) @[BranchForwardUnit.scala 53:40]
            node _T_114 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 53:86]
            node _T_115 = and(_T_113, _T_114) @[BranchForwardUnit.scala 53:70]
            node _T_116 = not(_T_115) @[BranchForwardUnit.scala 53:9]
            node _T_117 = and(_T_109, _T_116) @[BranchForwardUnit.scala 52:76]
            node _T_118 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 54:23]
            node _T_119 = and(_T_117, _T_118) @[BranchForwardUnit.scala 53:101]
            node _T_120 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 54:54]
            node _T_121 = and(_T_119, _T_120) @[BranchForwardUnit.scala 54:37]
            when _T_121 : @[BranchForwardUnit.scala 54:69]
              io.forwardA <= UInt<3>("h04") @[BranchForwardUnit.scala 56:21]
              io.forwardB <= UInt<3>("h04") @[BranchForwardUnit.scala 57:21]
              skip @[BranchForwardUnit.scala 54:69]
            else : @[BranchForwardUnit.scala 61:38]
              node _T_125 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 59:32]
              node _T_127 = eq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 59:68]
              node _T_128 = and(_T_125, _T_127) @[BranchForwardUnit.scala 59:47]
              node _T_130 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 60:24]
              node _T_131 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 60:56]
              node _T_132 = and(_T_130, _T_131) @[BranchForwardUnit.scala 60:40]
              node _T_133 = not(_T_132) @[BranchForwardUnit.scala 60:9]
              node _T_134 = and(_T_128, _T_133) @[BranchForwardUnit.scala 59:76]
              node _T_135 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 61:23]
              node _T_136 = and(_T_134, _T_135) @[BranchForwardUnit.scala 60:71]
              when _T_136 : @[BranchForwardUnit.scala 61:38]
                io.forwardB <= UInt<3>("h04") @[BranchForwardUnit.scala 63:21]
                skip @[BranchForwardUnit.scala 61:38]
              else : @[BranchForwardUnit.scala 67:38]
                node _T_139 = eq(io.branch, UInt<1>("h01")) @[BranchForwardUnit.scala 65:29]
                node _T_141 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 65:53]
                node _T_142 = and(_T_139, _T_141) @[BranchForwardUnit.scala 65:37]
                node _T_144 = eq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 65:89]
                node _T_145 = and(_T_142, _T_144) @[BranchForwardUnit.scala 65:68]
                node _T_147 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 66:24]
                node _T_148 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 66:56]
                node _T_149 = and(_T_147, _T_148) @[BranchForwardUnit.scala 66:40]
                node _T_150 = not(_T_149) @[BranchForwardUnit.scala 66:9]
                node _T_151 = and(_T_145, _T_150) @[BranchForwardUnit.scala 65:97]
                node _T_152 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 67:23]
                node _T_153 = and(_T_151, _T_152) @[BranchForwardUnit.scala 66:71]
                when _T_153 : @[BranchForwardUnit.scala 67:38]
                  io.forwardA <= UInt<3>("h04") @[BranchForwardUnit.scala 69:21]
                  skip @[BranchForwardUnit.scala 67:38]
      node _T_156 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 74:25]
      node _T_158 = neq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 74:62]
      node _T_159 = and(_T_156, _T_158) @[BranchForwardUnit.scala 74:40]
      node _T_161 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 76:24]
      node _T_162 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 76:56]
      node _T_163 = and(_T_161, _T_162) @[BranchForwardUnit.scala 76:40]
      node _T_164 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 76:86]
      node _T_165 = and(_T_163, _T_164) @[BranchForwardUnit.scala 76:70]
      node _T_166 = not(_T_165) @[BranchForwardUnit.scala 76:9]
      node _T_167 = and(_T_159, _T_166) @[BranchForwardUnit.scala 74:70]
      node _T_169 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 78:25]
      node _T_170 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 78:58]
      node _T_171 = and(_T_169, _T_170) @[BranchForwardUnit.scala 78:41]
      node _T_172 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 78:89]
      node _T_173 = and(_T_171, _T_172) @[BranchForwardUnit.scala 78:72]
      node _T_174 = not(_T_173) @[BranchForwardUnit.scala 78:9]
      node _T_175 = and(_T_167, _T_174) @[BranchForwardUnit.scala 76:101]
      node _T_176 = eq(io.MEM_WB_rd, io.rs1_s) @[BranchForwardUnit.scala 79:23]
      node _T_177 = and(_T_175, _T_176) @[BranchForwardUnit.scala 78:104]
      node _T_178 = eq(io.MEM_WB_rd, io.rs2_s) @[BranchForwardUnit.scala 79:54]
      node _T_179 = and(_T_177, _T_178) @[BranchForwardUnit.scala 79:37]
      when _T_179 : @[BranchForwardUnit.scala 79:69]
        io.forwardA <= UInt<2>("h03") @[BranchForwardUnit.scala 81:21]
        io.forwardB <= UInt<2>("h03") @[BranchForwardUnit.scala 82:21]
        skip @[BranchForwardUnit.scala 79:69]
      else : @[BranchForwardUnit.scala 90:40]
        node _T_183 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 85:32]
        node _T_185 = neq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 85:69]
        node _T_186 = and(_T_183, _T_185) @[BranchForwardUnit.scala 85:47]
        node _T_188 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 87:26]
        node _T_189 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 87:58]
        node _T_190 = and(_T_188, _T_189) @[BranchForwardUnit.scala 87:42]
        node _T_191 = not(_T_190) @[BranchForwardUnit.scala 87:11]
        node _T_192 = and(_T_186, _T_191) @[BranchForwardUnit.scala 85:77]
        node _T_194 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 89:27]
        node _T_195 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 89:60]
        node _T_196 = and(_T_194, _T_195) @[BranchForwardUnit.scala 89:43]
        node _T_197 = not(_T_196) @[BranchForwardUnit.scala 89:11]
        node _T_198 = and(_T_192, _T_197) @[BranchForwardUnit.scala 87:73]
        node _T_199 = eq(io.MEM_WB_rd, io.rs2_s) @[BranchForwardUnit.scala 90:25]
        node _T_200 = and(_T_198, _T_199) @[BranchForwardUnit.scala 89:75]
        when _T_200 : @[BranchForwardUnit.scala 90:40]
          io.forwardB <= UInt<2>("h03") @[BranchForwardUnit.scala 92:23]
          skip @[BranchForwardUnit.scala 90:40]
        else : @[BranchForwardUnit.scala 100:40]
          node _T_203 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 95:32]
          node _T_205 = neq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 95:69]
          node _T_206 = and(_T_203, _T_205) @[BranchForwardUnit.scala 95:47]
          node _T_208 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 97:26]
          node _T_209 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 97:58]
          node _T_210 = and(_T_208, _T_209) @[BranchForwardUnit.scala 97:42]
          node _T_211 = not(_T_210) @[BranchForwardUnit.scala 97:11]
          node _T_212 = and(_T_206, _T_211) @[BranchForwardUnit.scala 95:77]
          node _T_214 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 99:27]
          node _T_215 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 99:60]
          node _T_216 = and(_T_214, _T_215) @[BranchForwardUnit.scala 99:43]
          node _T_217 = not(_T_216) @[BranchForwardUnit.scala 99:11]
          node _T_218 = and(_T_212, _T_217) @[BranchForwardUnit.scala 97:73]
          node _T_219 = eq(io.MEM_WB_rd, io.rs1_s) @[BranchForwardUnit.scala 100:25]
          node _T_220 = and(_T_218, _T_219) @[BranchForwardUnit.scala 99:75]
          when _T_220 : @[BranchForwardUnit.scala 100:40]
            io.forwardA <= UInt<2>("h03") @[BranchForwardUnit.scala 102:23]
            skip @[BranchForwardUnit.scala 100:40]
          else : @[BranchForwardUnit.scala 109:69]
            node _T_223 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 104:34]
            node _T_225 = eq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 104:71]
            node _T_226 = and(_T_223, _T_225) @[BranchForwardUnit.scala 104:49]
            node _T_228 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 106:24]
            node _T_229 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 106:56]
            node _T_230 = and(_T_228, _T_229) @[BranchForwardUnit.scala 106:40]
            node _T_231 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 106:86]
            node _T_232 = and(_T_230, _T_231) @[BranchForwardUnit.scala 106:70]
            node _T_233 = not(_T_232) @[BranchForwardUnit.scala 106:9]
            node _T_234 = and(_T_226, _T_233) @[BranchForwardUnit.scala 104:79]
            node _T_236 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 108:25]
            node _T_237 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 108:58]
            node _T_238 = and(_T_236, _T_237) @[BranchForwardUnit.scala 108:41]
            node _T_239 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 108:89]
            node _T_240 = and(_T_238, _T_239) @[BranchForwardUnit.scala 108:72]
            node _T_241 = not(_T_240) @[BranchForwardUnit.scala 108:9]
            node _T_242 = and(_T_234, _T_241) @[BranchForwardUnit.scala 106:101]
            node _T_243 = eq(io.MEM_WB_rd, io.rs1_s) @[BranchForwardUnit.scala 109:23]
            node _T_244 = and(_T_242, _T_243) @[BranchForwardUnit.scala 108:104]
            node _T_245 = eq(io.MEM_WB_rd, io.rs2_s) @[BranchForwardUnit.scala 109:54]
            node _T_246 = and(_T_244, _T_245) @[BranchForwardUnit.scala 109:37]
            when _T_246 : @[BranchForwardUnit.scala 109:69]
              io.forwardA <= UInt<3>("h05") @[BranchForwardUnit.scala 111:21]
              io.forwardB <= UInt<3>("h05") @[BranchForwardUnit.scala 112:21]
              skip @[BranchForwardUnit.scala 109:69]
            else : @[BranchForwardUnit.scala 120:40]
              node _T_250 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 115:32]
              node _T_252 = eq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 115:69]
              node _T_253 = and(_T_250, _T_252) @[BranchForwardUnit.scala 115:47]
              node _T_255 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 117:26]
              node _T_256 = eq(io.ID_EX_rd, io.rs2_s) @[BranchForwardUnit.scala 117:58]
              node _T_257 = and(_T_255, _T_256) @[BranchForwardUnit.scala 117:42]
              node _T_258 = not(_T_257) @[BranchForwardUnit.scala 117:11]
              node _T_259 = and(_T_253, _T_258) @[BranchForwardUnit.scala 115:77]
              node _T_261 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 119:27]
              node _T_262 = eq(io.EX_MEM_rd, io.rs2_s) @[BranchForwardUnit.scala 119:60]
              node _T_263 = and(_T_261, _T_262) @[BranchForwardUnit.scala 119:43]
              node _T_264 = not(_T_263) @[BranchForwardUnit.scala 119:11]
              node _T_265 = and(_T_259, _T_264) @[BranchForwardUnit.scala 117:73]
              node _T_266 = eq(io.MEM_WB_rd, io.rs2_s) @[BranchForwardUnit.scala 120:25]
              node _T_267 = and(_T_265, _T_266) @[BranchForwardUnit.scala 119:75]
              when _T_267 : @[BranchForwardUnit.scala 120:40]
                io.forwardB <= UInt<3>("h05") @[BranchForwardUnit.scala 122:23]
                skip @[BranchForwardUnit.scala 120:40]
              else : @[BranchForwardUnit.scala 130:40]
                node _T_270 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 125:32]
                node _T_272 = eq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 125:69]
                node _T_273 = and(_T_270, _T_272) @[BranchForwardUnit.scala 125:47]
                node _T_275 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 127:26]
                node _T_276 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 127:58]
                node _T_277 = and(_T_275, _T_276) @[BranchForwardUnit.scala 127:42]
                node _T_278 = not(_T_277) @[BranchForwardUnit.scala 127:11]
                node _T_279 = and(_T_273, _T_278) @[BranchForwardUnit.scala 125:77]
                node _T_281 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 129:27]
                node _T_282 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 129:60]
                node _T_283 = and(_T_281, _T_282) @[BranchForwardUnit.scala 129:43]
                node _T_284 = not(_T_283) @[BranchForwardUnit.scala 129:11]
                node _T_285 = and(_T_279, _T_284) @[BranchForwardUnit.scala 127:73]
                node _T_286 = eq(io.MEM_WB_rd, io.rs1_s) @[BranchForwardUnit.scala 130:25]
                node _T_287 = and(_T_285, _T_286) @[BranchForwardUnit.scala 129:74]
                when _T_287 : @[BranchForwardUnit.scala 130:40]
                  io.forwardA <= UInt<3>("h05") @[BranchForwardUnit.scala 132:23]
                  skip @[BranchForwardUnit.scala 130:40]
      skip @[BranchForwardUnit.scala 22:29]
    else : @[BranchForwardUnit.scala 138:36]
      node _T_290 = eq(io.branch, UInt<1>("h00")) @[BranchForwardUnit.scala 138:27]
      when _T_290 : @[BranchForwardUnit.scala 138:36]
        node _T_292 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 140:26]
        node _T_294 = neq(io.ID_EX_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 140:61]
        node _T_295 = and(_T_292, _T_294) @[BranchForwardUnit.scala 140:41]
        node _T_296 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 140:85]
        node _T_297 = and(_T_295, _T_296) @[BranchForwardUnit.scala 140:69]
        when _T_297 : @[BranchForwardUnit.scala 140:99]
          io.forwardA <= UInt<3>("h06") @[BranchForwardUnit.scala 141:23]
          skip @[BranchForwardUnit.scala 140:99]
        node _T_300 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 145:27]
        node _T_302 = neq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 145:63]
        node _T_303 = and(_T_300, _T_302) @[BranchForwardUnit.scala 145:42]
        node _T_305 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 146:26]
        node _T_306 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 146:58]
        node _T_307 = and(_T_305, _T_306) @[BranchForwardUnit.scala 146:42]
        node _T_308 = not(_T_307) @[BranchForwardUnit.scala 146:11]
        node _T_309 = and(_T_303, _T_308) @[BranchForwardUnit.scala 145:71]
        node _T_310 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 147:25]
        node _T_311 = and(_T_309, _T_310) @[BranchForwardUnit.scala 146:73]
        when _T_311 : @[BranchForwardUnit.scala 147:40]
          io.forwardA <= UInt<3>("h07") @[BranchForwardUnit.scala 149:23]
          skip @[BranchForwardUnit.scala 147:40]
        else : @[BranchForwardUnit.scala 154:42]
          node _T_314 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 152:34]
          node _T_316 = eq(io.EX_MEM_MemRead, UInt<1>("h01")) @[BranchForwardUnit.scala 152:70]
          node _T_317 = and(_T_314, _T_316) @[BranchForwardUnit.scala 152:49]
          node _T_319 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 153:28]
          node _T_320 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 153:60]
          node _T_321 = and(_T_319, _T_320) @[BranchForwardUnit.scala 153:44]
          node _T_322 = not(_T_321) @[BranchForwardUnit.scala 153:13]
          node _T_323 = and(_T_317, _T_322) @[BranchForwardUnit.scala 152:78]
          node _T_324 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 154:27]
          node _T_325 = and(_T_323, _T_324) @[BranchForwardUnit.scala 153:75]
          when _T_325 : @[BranchForwardUnit.scala 154:42]
            io.forwardA <= UInt<4>("h09") @[BranchForwardUnit.scala 156:25]
            skip @[BranchForwardUnit.scala 154:42]
        node _T_328 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 162:27]
        node _T_330 = neq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 162:64]
        node _T_331 = and(_T_328, _T_330) @[BranchForwardUnit.scala 162:42]
        node _T_333 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 164:26]
        node _T_334 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 164:58]
        node _T_335 = and(_T_333, _T_334) @[BranchForwardUnit.scala 164:42]
        node _T_336 = not(_T_335) @[BranchForwardUnit.scala 164:11]
        node _T_337 = and(_T_331, _T_336) @[BranchForwardUnit.scala 162:72]
        node _T_339 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 166:27]
        node _T_340 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 166:60]
        node _T_341 = and(_T_339, _T_340) @[BranchForwardUnit.scala 166:43]
        node _T_342 = not(_T_341) @[BranchForwardUnit.scala 166:11]
        node _T_343 = and(_T_337, _T_342) @[BranchForwardUnit.scala 164:73]
        node _T_344 = eq(io.MEM_WB_rd, io.rs1_s) @[BranchForwardUnit.scala 167:25]
        node _T_345 = and(_T_343, _T_344) @[BranchForwardUnit.scala 166:75]
        when _T_345 : @[BranchForwardUnit.scala 167:40]
          io.forwardA <= UInt<4>("h08") @[BranchForwardUnit.scala 169:23]
          skip @[BranchForwardUnit.scala 167:40]
        else : @[BranchForwardUnit.scala 177:40]
          node _T_348 = neq(io.MEM_WB_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 172:35]
          node _T_350 = eq(io.MEM_WB_MemtoReg, UInt<1>("h01")) @[BranchForwardUnit.scala 172:72]
          node _T_351 = and(_T_348, _T_350) @[BranchForwardUnit.scala 172:50]
          node _T_353 = neq(io.ID_EX_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 174:26]
          node _T_354 = eq(io.ID_EX_rd, io.rs1_s) @[BranchForwardUnit.scala 174:58]
          node _T_355 = and(_T_353, _T_354) @[BranchForwardUnit.scala 174:42]
          node _T_356 = not(_T_355) @[BranchForwardUnit.scala 174:11]
          node _T_357 = and(_T_351, _T_356) @[BranchForwardUnit.scala 172:80]
          node _T_359 = neq(io.EX_MEM_rd, UInt<1>("h00")) @[BranchForwardUnit.scala 176:27]
          node _T_360 = eq(io.EX_MEM_rd, io.rs1_s) @[BranchForwardUnit.scala 176:60]
          node _T_361 = and(_T_359, _T_360) @[BranchForwardUnit.scala 176:43]
          node _T_362 = not(_T_361) @[BranchForwardUnit.scala 176:11]
          node _T_363 = and(_T_357, _T_362) @[BranchForwardUnit.scala 174:73]
          node _T_364 = eq(io.MEM_WB_rd, io.rs1_s) @[BranchForwardUnit.scala 177:25]
          node _T_365 = and(_T_363, _T_364) @[BranchForwardUnit.scala 176:75]
          when _T_365 : @[BranchForwardUnit.scala 177:40]
            io.forwardA <= UInt<4>("h0a") @[BranchForwardUnit.scala 179:23]
            skip @[BranchForwardUnit.scala 177:40]
        skip @[BranchForwardUnit.scala 138:36]
    
  module TopPipeline : 
    input clock : Clock
    input reset : UInt<1>
    output io : {Reg_Out : SInt<32>}
    
    inst Alu of Alu @[TopPipeline.scala 13:25]
    Alu.clock <= clock
    Alu.reset <= reset
    inst Control of Control @[TopPipeline.scala 14:29]
    Control.clock <= clock
    Control.reset <= reset
    inst ImmediateGeneration of ImmGen @[TopPipeline.scala 15:41]
    ImmediateGeneration.clock <= clock
    ImmediateGeneration.reset <= reset
    inst AluControl of AluCntrl @[TopPipeline.scala 16:32]
    AluControl.clock <= clock
    AluControl.reset <= reset
    inst Register of Register @[TopPipeline.scala 17:30]
    Register.clock <= clock
    Register.reset <= reset
    inst Memory of Memory @[TopPipeline.scala 18:28]
    Memory.clock <= clock
    Memory.reset <= reset
    inst Pc of Pc @[TopPipeline.scala 19:24]
    Pc.clock <= clock
    Pc.reset <= reset
    inst Jalr of Jalr @[TopPipeline.scala 20:26]
    Jalr.clock <= clock
    Jalr.reset <= reset
    inst DataMemory of MemoryD @[TopPipeline.scala 21:32]
    DataMemory.clock <= clock
    DataMemory.reset <= reset
    inst IF_ID of IF_ID_Reg @[TopPipeline.scala 23:27]
    IF_ID.clock <= clock
    IF_ID.reset <= reset
    inst ID_EX of ID_EX_Reg @[TopPipeline.scala 24:27]
    ID_EX.clock <= clock
    ID_EX.reset <= reset
    inst EX_MEM of EX_MEM_Reg @[TopPipeline.scala 25:28]
    EX_MEM.clock <= clock
    EX_MEM.reset <= reset
    inst MEM_WB of MEM_WB_Reg @[TopPipeline.scala 26:28]
    MEM_WB.clock <= clock
    MEM_WB.reset <= reset
    inst Stalling of StallingUnit @[TopPipeline.scala 28:30]
    Stalling.clock <= clock
    Stalling.reset <= reset
    inst ForwardingUnit of ForwardingUnit @[TopPipeline.scala 29:36]
    ForwardingUnit.clock <= clock
    ForwardingUnit.reset <= reset
    ForwardingUnit.io.RegWrite <= EX_MEM.io.RegWrite_out @[TopPipeline.scala 30:36]
    ForwardingUnit.io.RegWrite1 <= MEM_WB.io.RegWrite_out @[TopPipeline.scala 31:37]
    ForwardingUnit.io.EX_MEM_rd <= EX_MEM.io.rd_out @[TopPipeline.scala 32:37]
    ForwardingUnit.io.MEM_WB_rd <= MEM_WB.io.rd_out @[TopPipeline.scala 33:37]
    ForwardingUnit.io.ID_EX_rs1_s <= ID_EX.io.rs1_s_out @[TopPipeline.scala 34:39]
    ForwardingUnit.io.ID_EX_rs2_s <= ID_EX.io.rs2_s_out @[TopPipeline.scala 35:39]
    inst Branch of BranchUnit @[TopPipeline.scala 37:29]
    Branch.clock <= clock
    Branch.reset <= reset
    inst BranchForwarding of BranchForwardUnit @[TopPipeline.scala 38:39]
    BranchForwarding.clock <= clock
    BranchForwarding.reset <= reset
    BranchForwarding.io.ID_EX_rd <= ID_EX.io.rd_out @[TopPipeline.scala 39:38]
    BranchForwarding.io.ID_EX_MemRead <= ID_EX.io.MemRead_out @[TopPipeline.scala 40:43]
    BranchForwarding.io.EX_MEM_rd <= EX_MEM.io.rd_out @[TopPipeline.scala 41:39]
    BranchForwarding.io.EX_MEM_MemRead <= EX_MEM.io.MemRead_out @[TopPipeline.scala 42:44]
    BranchForwarding.io.MEM_WB_rd <= MEM_WB.io.rd_out @[TopPipeline.scala 43:39]
    BranchForwarding.io.MEM_WB_MemtoReg <= MEM_WB.io.MemtoReg_out @[TopPipeline.scala 44:45]
    node _T_7 = bits(IF_ID.io.inst_out, 19, 15) @[TopPipeline.scala 45:55]
    BranchForwarding.io.rs1_s <= _T_7 @[TopPipeline.scala 45:35]
    node _T_8 = bits(IF_ID.io.inst_out, 24, 20) @[TopPipeline.scala 46:55]
    BranchForwarding.io.rs2_s <= _T_8 @[TopPipeline.scala 46:35]
    BranchForwarding.io.branch <= Control.io.Branch @[TopPipeline.scala 47:36]
    node _T_9 = bits(Pc.io.pc, 11, 2) @[TopPipeline.scala 50:37]
    Memory.io.wrAddr <= _T_9 @[TopPipeline.scala 50:26]
    Alu.io.in2 <= asSInt(UInt<1>("h00")) @[TopPipeline.scala 51:20]
    EX_MEM.io.rs2_in <= asSInt(UInt<1>("h00")) @[TopPipeline.scala 52:26]
    IF_ID.io.pc_in <= Pc.io.pc @[TopPipeline.scala 53:24]
    IF_ID.io.pc4_in <= Pc.io.pc4 @[TopPipeline.scala 54:25]
    node _T_12 = bits(IF_ID.io.inst_out, 6, 0) @[TopPipeline.scala 56:47]
    Control.io.opcode <= _T_12 @[TopPipeline.scala 56:27]
    ImmediateGeneration.io.instruction <= IF_ID.io.inst_out @[TopPipeline.scala 57:44]
    ImmediateGeneration.io.pc <= IF_ID.io.pc_out @[TopPipeline.scala 58:35]
    node _T_13 = bits(IF_ID.io.inst_out, 19, 15) @[TopPipeline.scala 60:47]
    Register.io.rs1_s <= _T_13 @[TopPipeline.scala 60:27]
    node _T_14 = bits(IF_ID.io.inst_out, 24, 20) @[TopPipeline.scala 61:47]
    Register.io.rs2_s <= _T_14 @[TopPipeline.scala 61:27]
    Stalling.io.MemRead <= ID_EX.io.MemRead_out @[TopPipeline.scala 64:29]
    Stalling.io.rd <= ID_EX.io.rd_out @[TopPipeline.scala 65:24]
    node _T_15 = bits(IF_ID.io.inst_out, 19, 15) @[TopPipeline.scala 66:47]
    Stalling.io.rs1_s <= _T_15 @[TopPipeline.scala 66:27]
    node _T_16 = bits(IF_ID.io.inst_out, 24, 20) @[TopPipeline.scala 67:47]
    Stalling.io.rs2_s <= _T_16 @[TopPipeline.scala 67:27]
    Stalling.io.inst_in <= IF_ID.io.inst_out @[TopPipeline.scala 68:29]
    Stalling.io.pc_in <= IF_ID.io.pc_out @[TopPipeline.scala 69:27]
    Stalling.io.pc4_in <= IF_ID.io.pc4_out @[TopPipeline.scala 70:28]
    node _T_18 = eq(Stalling.io.stall, UInt<1>("h01")) @[TopPipeline.scala 72:33]
    when _T_18 : @[TopPipeline.scala 72:44]
      IF_ID.io.inst_in <= Stalling.io.inst_out @[TopPipeline.scala 73:34]
      Pc.io.input <= Stalling.io.pc_out @[TopPipeline.scala 74:29]
      ID_EX.io.MemWrite_in <= UInt<1>("h00") @[TopPipeline.scala 75:38]
      ID_EX.io.RegWrite_in <= UInt<1>("h00") @[TopPipeline.scala 76:38]
      skip @[TopPipeline.scala 72:44]
    else : @[TopPipeline.scala 78:20]
      IF_ID.io.inst_in <= Memory.io.rdData @[TopPipeline.scala 79:34]
      ID_EX.io.MemWrite_in <= Control.io.MemWrite @[TopPipeline.scala 80:38]
      ID_EX.io.RegWrite_in <= Control.io.RegWrite @[TopPipeline.scala 81:38]
      Pc.io.input <= Pc.io.pc4 @[TopPipeline.scala 82:29]
      skip @[TopPipeline.scala 78:20]
    node _T_22 = eq(Control.io.NextPc, UInt<1>("h01")) @[TopPipeline.scala 83:33]
    when _T_22 : @[TopPipeline.scala 83:45]
      node _T_24 = eq(Branch.io.branch, UInt<1>("h01")) @[TopPipeline.scala 84:39]
      node _T_26 = eq(Control.io.Branch, UInt<1>("h01")) @[TopPipeline.scala 84:71]
      node _T_27 = and(_T_24, _T_26) @[TopPipeline.scala 84:50]
      when _T_27 : @[TopPipeline.scala 84:82]
        node _T_28 = asUInt(ImmediateGeneration.io.sb_imm) @[TopPipeline.scala 85:70]
        Pc.io.input <= _T_28 @[TopPipeline.scala 85:37]
        IF_ID.io.pc_in <= UInt<1>("h00") @[TopPipeline.scala 86:40]
        IF_ID.io.pc4_in <= UInt<1>("h00") @[TopPipeline.scala 87:41]
        IF_ID.io.inst_in <= UInt<1>("h00") @[TopPipeline.scala 88:42]
        skip @[TopPipeline.scala 84:82]
      else : @[TopPipeline.scala 89:27]
        Pc.io.input <= Pc.io.pc4 @[TopPipeline.scala 89:39]
        skip @[TopPipeline.scala 89:27]
      skip @[TopPipeline.scala 83:45]
    else : @[TopPipeline.scala 91:50]
      node _T_33 = eq(Control.io.NextPc, UInt<2>("h02")) @[TopPipeline.scala 91:38]
      when _T_33 : @[TopPipeline.scala 91:50]
        node _T_34 = asUInt(ImmediateGeneration.io.uj_imm) @[TopPipeline.scala 92:62]
        Pc.io.input <= _T_34 @[TopPipeline.scala 92:29]
        IF_ID.io.pc_in <= UInt<1>("h00") @[TopPipeline.scala 93:32]
        IF_ID.io.pc4_in <= UInt<1>("h00") @[TopPipeline.scala 94:33]
        IF_ID.io.inst_in <= UInt<1>("h00") @[TopPipeline.scala 95:34]
        skip @[TopPipeline.scala 91:50]
      else : @[TopPipeline.scala 96:50]
        node _T_39 = eq(Control.io.NextPc, UInt<2>("h03")) @[TopPipeline.scala 96:38]
        when _T_39 : @[TopPipeline.scala 96:50]
          node _T_40 = asUInt(Jalr.io.out) @[TopPipeline.scala 97:44]
          Pc.io.input <= _T_40 @[TopPipeline.scala 97:29]
          IF_ID.io.pc_in <= UInt<1>("h00") @[TopPipeline.scala 98:32]
          IF_ID.io.pc4_in <= UInt<1>("h00") @[TopPipeline.scala 99:33]
          IF_ID.io.inst_in <= UInt<1>("h00") @[TopPipeline.scala 100:34]
          skip @[TopPipeline.scala 96:50]
        else : @[TopPipeline.scala 101:20]
          Pc.io.input <= Pc.io.pc4 @[TopPipeline.scala 102:29]
          skip @[TopPipeline.scala 101:20]
    ID_EX.io.pc_in <= IF_ID.io.pc_out @[TopPipeline.scala 108:24]
    ID_EX.io.pc4_in <= IF_ID.io.pc4_out @[TopPipeline.scala 109:25]
    ID_EX.io.Branch_in <= Control.io.Branch @[TopPipeline.scala 112:28]
    ID_EX.io.MemRead_in <= Control.io.MemRead @[TopPipeline.scala 113:29]
    ID_EX.io.MemtoReg_in <= Control.io.MemtoReg @[TopPipeline.scala 114:30]
    ID_EX.io.AluOp_in <= Control.io.AluOp @[TopPipeline.scala 115:27]
    ID_EX.io.OpA_in <= Control.io.OpA @[TopPipeline.scala 116:25]
    ID_EX.io.OpB_in <= Control.io.OpB @[TopPipeline.scala 117:25]
    ID_EX.io.NextPc_in <= Control.io.NextPc @[TopPipeline.scala 118:28]
    ID_EX.io.rs1_in <= Register.io.rs1 @[TopPipeline.scala 121:25]
    ID_EX.io.rs2_in <= Register.io.rs2 @[TopPipeline.scala 122:25]
    node _T_44 = bits(IF_ID.io.inst_out, 19, 15) @[TopPipeline.scala 123:47]
    ID_EX.io.rs1_s_in <= _T_44 @[TopPipeline.scala 123:27]
    node _T_45 = bits(IF_ID.io.inst_out, 24, 20) @[TopPipeline.scala 124:47]
    ID_EX.io.rs2_s_in <= _T_45 @[TopPipeline.scala 124:27]
    node _T_46 = bits(IF_ID.io.inst_out, 11, 7) @[TopPipeline.scala 125:44]
    ID_EX.io.rd_in <= _T_46 @[TopPipeline.scala 125:24]
    node _T_47 = bits(IF_ID.io.inst_out, 14, 12) @[TopPipeline.scala 127:45]
    Branch.io.func3 <= _T_47 @[TopPipeline.scala 127:25]
    node _T_49 = eq(BranchForwarding.io.forwardA, UInt<1>("h00")) @[TopPipeline.scala 129:44]
    when _T_49 : @[TopPipeline.scala 129:58]
      Branch.io.rs1 <= Register.io.rs1 @[TopPipeline.scala 130:31]
      Jalr.io.in1 <= Register.io.rs1 @[TopPipeline.scala 131:29]
      skip @[TopPipeline.scala 129:58]
    else : @[TopPipeline.scala 133:63]
      node _T_51 = eq(BranchForwarding.io.forwardA, UInt<1>("h01")) @[TopPipeline.scala 133:49]
      when _T_51 : @[TopPipeline.scala 133:63]
        Branch.io.rs1 <= Alu.io.out @[TopPipeline.scala 134:31]
        Jalr.io.in1 <= Register.io.rs1 @[TopPipeline.scala 135:29]
        skip @[TopPipeline.scala 133:63]
      else : @[TopPipeline.scala 137:63]
        node _T_53 = eq(BranchForwarding.io.forwardA, UInt<2>("h02")) @[TopPipeline.scala 137:49]
        when _T_53 : @[TopPipeline.scala 137:63]
          Branch.io.rs1 <= EX_MEM.io.alu_out @[TopPipeline.scala 138:31]
          Jalr.io.in1 <= Register.io.rs1 @[TopPipeline.scala 139:29]
          skip @[TopPipeline.scala 137:63]
        else : @[TopPipeline.scala 141:63]
          node _T_55 = eq(BranchForwarding.io.forwardA, UInt<2>("h03")) @[TopPipeline.scala 141:49]
          when _T_55 : @[TopPipeline.scala 141:63]
            Branch.io.rs1 <= Register.io.WriteData @[TopPipeline.scala 142:31]
            Jalr.io.in1 <= Register.io.rs1 @[TopPipeline.scala 143:29]
            skip @[TopPipeline.scala 141:63]
          else : @[TopPipeline.scala 145:63]
            node _T_57 = eq(BranchForwarding.io.forwardA, UInt<3>("h04")) @[TopPipeline.scala 145:49]
            when _T_57 : @[TopPipeline.scala 145:63]
              Branch.io.rs1 <= DataMemory.io.out @[TopPipeline.scala 146:31]
              Jalr.io.in1 <= Register.io.rs1 @[TopPipeline.scala 147:29]
              skip @[TopPipeline.scala 145:63]
            else : @[TopPipeline.scala 149:63]
              node _T_59 = eq(BranchForwarding.io.forwardA, UInt<3>("h05")) @[TopPipeline.scala 149:49]
              when _T_59 : @[TopPipeline.scala 149:63]
                Branch.io.rs1 <= Register.io.WriteData @[TopPipeline.scala 150:31]
                Jalr.io.in1 <= Register.io.rs1 @[TopPipeline.scala 151:29]
                skip @[TopPipeline.scala 149:63]
              else : @[TopPipeline.scala 153:63]
                node _T_61 = eq(BranchForwarding.io.forwardA, UInt<3>("h06")) @[TopPipeline.scala 153:49]
                when _T_61 : @[TopPipeline.scala 153:63]
                  Branch.io.rs1 <= Register.io.rs1 @[TopPipeline.scala 154:31]
                  Jalr.io.in1 <= Alu.io.out @[TopPipeline.scala 155:29]
                  skip @[TopPipeline.scala 153:63]
                else : @[TopPipeline.scala 157:63]
                  node _T_63 = eq(BranchForwarding.io.forwardA, UInt<3>("h07")) @[TopPipeline.scala 157:49]
                  when _T_63 : @[TopPipeline.scala 157:63]
                    Branch.io.rs1 <= Register.io.rs1 @[TopPipeline.scala 158:31]
                    Jalr.io.in1 <= EX_MEM.io.alu_out @[TopPipeline.scala 159:29]
                    skip @[TopPipeline.scala 157:63]
                  else : @[TopPipeline.scala 161:63]
                    node _T_65 = eq(BranchForwarding.io.forwardA, UInt<4>("h08")) @[TopPipeline.scala 161:49]
                    when _T_65 : @[TopPipeline.scala 161:63]
                      Branch.io.rs1 <= Register.io.rs1 @[TopPipeline.scala 162:31]
                      Jalr.io.in1 <= Register.io.WriteData @[TopPipeline.scala 163:29]
                      skip @[TopPipeline.scala 161:63]
                    else : @[TopPipeline.scala 165:63]
                      node _T_67 = eq(BranchForwarding.io.forwardA, UInt<4>("h09")) @[TopPipeline.scala 165:49]
                      when _T_67 : @[TopPipeline.scala 165:63]
                        Branch.io.rs1 <= Register.io.rs1 @[TopPipeline.scala 166:31]
                        Jalr.io.in1 <= DataMemory.io.out @[TopPipeline.scala 167:29]
                        skip @[TopPipeline.scala 165:63]
                      else : @[TopPipeline.scala 169:63]
                        node _T_69 = eq(BranchForwarding.io.forwardA, UInt<4>("h0a")) @[TopPipeline.scala 169:49]
                        when _T_69 : @[TopPipeline.scala 169:63]
                          Branch.io.rs1 <= Register.io.rs1 @[TopPipeline.scala 170:31]
                          Jalr.io.in1 <= Register.io.WriteData @[TopPipeline.scala 171:29]
                          skip @[TopPipeline.scala 169:63]
                        else : @[TopPipeline.scala 173:20]
                          Branch.io.rs1 <= Register.io.rs1 @[TopPipeline.scala 174:31]
                          Jalr.io.in1 <= Register.io.rs1 @[TopPipeline.scala 175:29]
                          skip @[TopPipeline.scala 173:20]
    node _T_71 = eq(BranchForwarding.io.forwardB, UInt<1>("h00")) @[TopPipeline.scala 178:44]
    when _T_71 : @[TopPipeline.scala 178:58]
      Branch.io.rs2 <= Register.io.rs2 @[TopPipeline.scala 179:31]
      skip @[TopPipeline.scala 178:58]
    else : @[TopPipeline.scala 180:63]
      node _T_73 = eq(BranchForwarding.io.forwardB, UInt<1>("h01")) @[TopPipeline.scala 180:49]
      when _T_73 : @[TopPipeline.scala 180:63]
        Branch.io.rs2 <= Alu.io.out @[TopPipeline.scala 181:31]
        skip @[TopPipeline.scala 180:63]
      else : @[TopPipeline.scala 182:63]
        node _T_75 = eq(BranchForwarding.io.forwardB, UInt<2>("h02")) @[TopPipeline.scala 182:49]
        when _T_75 : @[TopPipeline.scala 182:63]
          Branch.io.rs2 <= EX_MEM.io.alu_out @[TopPipeline.scala 183:31]
          skip @[TopPipeline.scala 182:63]
        else : @[TopPipeline.scala 184:63]
          node _T_77 = eq(BranchForwarding.io.forwardB, UInt<2>("h03")) @[TopPipeline.scala 184:49]
          when _T_77 : @[TopPipeline.scala 184:63]
            Branch.io.rs2 <= Register.io.WriteData @[TopPipeline.scala 185:31]
            skip @[TopPipeline.scala 184:63]
          else : @[TopPipeline.scala 186:63]
            node _T_79 = eq(BranchForwarding.io.forwardB, UInt<3>("h04")) @[TopPipeline.scala 186:49]
            when _T_79 : @[TopPipeline.scala 186:63]
              Branch.io.rs2 <= DataMemory.io.out @[TopPipeline.scala 187:31]
              skip @[TopPipeline.scala 186:63]
            else : @[TopPipeline.scala 188:63]
              node _T_81 = eq(BranchForwarding.io.forwardB, UInt<3>("h05")) @[TopPipeline.scala 188:49]
              when _T_81 : @[TopPipeline.scala 188:63]
                Branch.io.rs2 <= Register.io.WriteData @[TopPipeline.scala 189:31]
                skip @[TopPipeline.scala 188:63]
              else : @[TopPipeline.scala 190:20]
                Branch.io.rs2 <= Register.io.rs2 @[TopPipeline.scala 190:35]
                skip @[TopPipeline.scala 190:20]
    Jalr.io.in2 <= ImmediateGeneration.io.i_imm @[TopPipeline.scala 191:21]
    node _T_82 = bits(IF_ID.io.inst_out, 14, 12) @[TopPipeline.scala 193:47]
    ID_EX.io.func3_in <= _T_82 @[TopPipeline.scala 193:27]
    node _T_83 = bits(IF_ID.io.inst_out, 30, 30) @[TopPipeline.scala 194:47]
    ID_EX.io.func7_in <= _T_83 @[TopPipeline.scala 194:27]
    AluControl.io.funct3 <= ID_EX.io.func3_out @[TopPipeline.scala 195:30]
    AluControl.io.funct7 <= ID_EX.io.func7_out @[TopPipeline.scala 196:30]
    AluControl.io.aluOp <= ID_EX.io.AluOp_out @[TopPipeline.scala 197:29]
    node _T_85 = eq(Control.io.ExtSel, UInt<1>("h00")) @[TopPipeline.scala 199:33]
    when _T_85 : @[TopPipeline.scala 199:45]
      ID_EX.io.imm_in <= ImmediateGeneration.io.i_imm @[TopPipeline.scala 200:33]
      skip @[TopPipeline.scala 199:45]
    else : @[TopPipeline.scala 201:50]
      node _T_87 = eq(Control.io.ExtSel, UInt<1>("h01")) @[TopPipeline.scala 201:38]
      when _T_87 : @[TopPipeline.scala 201:50]
        ID_EX.io.imm_in <= ImmediateGeneration.io.u_imm @[TopPipeline.scala 202:33]
        skip @[TopPipeline.scala 201:50]
      else : @[TopPipeline.scala 203:50]
        node _T_89 = eq(Control.io.ExtSel, UInt<2>("h02")) @[TopPipeline.scala 203:38]
        when _T_89 : @[TopPipeline.scala 203:50]
          ID_EX.io.imm_in <= ImmediateGeneration.io.s_imm @[TopPipeline.scala 204:33]
          skip @[TopPipeline.scala 203:50]
        else : @[TopPipeline.scala 205:20]
          ID_EX.io.imm_in <= asSInt(UInt<1>("h00")) @[TopPipeline.scala 205:37]
          skip @[TopPipeline.scala 205:20]
    Alu.io.AluControl <= AluControl.io.out @[TopPipeline.scala 206:27]
    io.Reg_Out <= Register.io.WriteData @[TopPipeline.scala 207:20]
    node _T_92 = eq(ID_EX.io.OpB_out, UInt<1>("h01")) @[TopPipeline.scala 209:32]
    when _T_92 : @[TopPipeline.scala 209:43]
      Alu.io.in2 <= ID_EX.io.imm_out @[TopPipeline.scala 210:28]
      node _T_94 = eq(ForwardingUnit.io.forwardB, UInt<2>("h02")) @[TopPipeline.scala 211:50]
      when _T_94 : @[TopPipeline.scala 211:62]
        EX_MEM.io.rs2_in <= EX_MEM.io.alu_out @[TopPipeline.scala 211:80]
        skip @[TopPipeline.scala 211:62]
      else : @[TopPipeline.scala 212:67]
        node _T_96 = eq(ForwardingUnit.io.forwardB, UInt<1>("h01")) @[TopPipeline.scala 212:55]
        when _T_96 : @[TopPipeline.scala 212:67]
          EX_MEM.io.rs2_in <= Register.io.WriteData @[TopPipeline.scala 212:85]
          skip @[TopPipeline.scala 212:67]
        else : @[TopPipeline.scala 213:67]
          node _T_98 = eq(ForwardingUnit.io.forwardB, UInt<1>("h00")) @[TopPipeline.scala 213:55]
          when _T_98 : @[TopPipeline.scala 213:67]
            EX_MEM.io.rs2_in <= ID_EX.io.rs2_out @[TopPipeline.scala 213:85]
            skip @[TopPipeline.scala 213:67]
      skip @[TopPipeline.scala 209:43]
    else : @[TopPipeline.scala 215:20]
      node _T_100 = eq(ForwardingUnit.io.forwardB, UInt<2>("h02")) @[TopPipeline.scala 216:50]
      when _T_100 : @[TopPipeline.scala 216:62]
        Alu.io.in2 <= EX_MEM.io.alu_out @[TopPipeline.scala 217:36]
        EX_MEM.io.rs2_in <= EX_MEM.io.alu_out @[TopPipeline.scala 218:42]
        skip @[TopPipeline.scala 216:62]
      else : @[TopPipeline.scala 219:67]
        node _T_102 = eq(ForwardingUnit.io.forwardB, UInt<1>("h01")) @[TopPipeline.scala 219:55]
        when _T_102 : @[TopPipeline.scala 219:67]
          Alu.io.in2 <= Register.io.WriteData @[TopPipeline.scala 220:36]
          EX_MEM.io.rs2_in <= Register.io.WriteData @[TopPipeline.scala 221:42]
          skip @[TopPipeline.scala 219:67]
        else : @[TopPipeline.scala 222:67]
          node _T_104 = eq(ForwardingUnit.io.forwardB, UInt<1>("h00")) @[TopPipeline.scala 222:55]
          when _T_104 : @[TopPipeline.scala 222:67]
            Alu.io.in2 <= ID_EX.io.rs2_out @[TopPipeline.scala 223:36]
            EX_MEM.io.rs2_in <= ID_EX.io.rs2_out @[TopPipeline.scala 224:42]
            skip @[TopPipeline.scala 222:67]
      skip @[TopPipeline.scala 215:20]
    node _T_106 = eq(ID_EX.io.OpA_out, UInt<2>("h02")) @[TopPipeline.scala 227:32]
    when _T_106 : @[TopPipeline.scala 227:44]
      node _T_107 = asSInt(ID_EX.io.pc4_out) @[TopPipeline.scala 228:48]
      Alu.io.in1 <= _T_107 @[TopPipeline.scala 228:28]
      skip @[TopPipeline.scala 227:44]
    else : @[TopPipeline.scala 230:49]
      node _T_109 = eq(ID_EX.io.OpA_out, UInt<1>("h01")) @[TopPipeline.scala 230:37]
      when _T_109 : @[TopPipeline.scala 230:49]
        node _T_110 = asSInt(ID_EX.io.pc_out) @[TopPipeline.scala 231:47]
        Alu.io.in1 <= _T_110 @[TopPipeline.scala 231:28]
        skip @[TopPipeline.scala 230:49]
      else : @[TopPipeline.scala 233:20]
        node _T_112 = eq(ForwardingUnit.io.forwardA, UInt<2>("h02")) @[TopPipeline.scala 234:50]
        when _T_112 : @[TopPipeline.scala 234:62]
          Alu.io.in1 <= EX_MEM.io.alu_out @[TopPipeline.scala 234:74]
          skip @[TopPipeline.scala 234:62]
        else : @[TopPipeline.scala 235:67]
          node _T_114 = eq(ForwardingUnit.io.forwardA, UInt<1>("h01")) @[TopPipeline.scala 235:55]
          when _T_114 : @[TopPipeline.scala 235:67]
            Alu.io.in1 <= Register.io.WriteData @[TopPipeline.scala 235:79]
            skip @[TopPipeline.scala 235:67]
          else : @[TopPipeline.scala 236:67]
            node _T_116 = eq(ForwardingUnit.io.forwardA, UInt<1>("h00")) @[TopPipeline.scala 236:55]
            when _T_116 : @[TopPipeline.scala 236:67]
              Alu.io.in1 <= ID_EX.io.rs1_out @[TopPipeline.scala 236:79]
              skip @[TopPipeline.scala 236:67]
            else : @[TopPipeline.scala 237:28]
              Alu.io.in1 <= ID_EX.io.rs1_out @[TopPipeline.scala 237:40]
              skip @[TopPipeline.scala 237:28]
        skip @[TopPipeline.scala 233:20]
    node _T_118 = eq(MEM_WB.io.RegWrite_out, UInt<1>("h01")) @[TopPipeline.scala 240:38]
    node _T_119 = bits(IF_ID.io.inst_out, 19, 15) @[TopPipeline.scala 240:87]
    node _T_120 = eq(MEM_WB.io.rd_out, _T_119) @[TopPipeline.scala 240:66]
    node _T_121 = and(_T_118, _T_120) @[TopPipeline.scala 240:46]
    when _T_121 : @[TopPipeline.scala 240:95]
      ID_EX.io.rs1_in <= Register.io.WriteData @[TopPipeline.scala 241:33]
      skip @[TopPipeline.scala 240:95]
    else : @[TopPipeline.scala 243:20]
      ID_EX.io.rs1_in <= Register.io.rs1 @[TopPipeline.scala 243:37]
      skip @[TopPipeline.scala 243:20]
    node _T_123 = eq(MEM_WB.io.RegWrite_out, UInt<1>("h01")) @[TopPipeline.scala 244:38]
    node _T_124 = bits(IF_ID.io.inst_out, 24, 20) @[TopPipeline.scala 244:87]
    node _T_125 = eq(MEM_WB.io.rd_out, _T_124) @[TopPipeline.scala 244:66]
    node _T_126 = and(_T_123, _T_125) @[TopPipeline.scala 244:46]
    when _T_126 : @[TopPipeline.scala 244:95]
      ID_EX.io.rs2_in <= Register.io.WriteData @[TopPipeline.scala 245:33]
      skip @[TopPipeline.scala 244:95]
    else : @[TopPipeline.scala 247:20]
      ID_EX.io.rs2_in <= Register.io.rs2 @[TopPipeline.scala 247:37]
      skip @[TopPipeline.scala 247:20]
    EX_MEM.io.rd_in <= ID_EX.io.rd_out @[TopPipeline.scala 252:25]
    EX_MEM.io.alu_in <= Alu.io.out @[TopPipeline.scala 253:26]
    EX_MEM.io.MemWrite_in <= ID_EX.io.MemWrite_out @[TopPipeline.scala 254:31]
    EX_MEM.io.MemRead_in <= ID_EX.io.MemRead_out @[TopPipeline.scala 255:30]
    EX_MEM.io.RegWrite_in <= ID_EX.io.RegWrite_out @[TopPipeline.scala 256:31]
    EX_MEM.io.MemtoReg_in <= ID_EX.io.MemtoReg_out @[TopPipeline.scala 257:31]
    node _T_127 = bits(EX_MEM.io.alu_out, 9, 2) @[TopPipeline.scala 259:49]
    DataMemory.io.Addr <= _T_127 @[TopPipeline.scala 259:28]
    DataMemory.io.Data <= EX_MEM.io.rs2_out @[TopPipeline.scala 260:28]
    DataMemory.io.MemWrite <= EX_MEM.io.MemWrite_out @[TopPipeline.scala 261:32]
    DataMemory.io.MemRead <= EX_MEM.io.MemtoReg_out @[TopPipeline.scala 262:31]
    MEM_WB.io.rd_in <= EX_MEM.io.rd_out @[TopPipeline.scala 265:25]
    MEM_WB.io.alu_in <= EX_MEM.io.alu_out @[TopPipeline.scala 266:26]
    MEM_WB.io.mem_in <= DataMemory.io.out @[TopPipeline.scala 267:26]
    MEM_WB.io.RegWrite_in <= EX_MEM.io.RegWrite_out @[TopPipeline.scala 268:31]
    MEM_WB.io.MemtoReg_in <= EX_MEM.io.MemtoReg_out @[TopPipeline.scala 269:31]
    node _T_129 = eq(MEM_WB.io.MemtoReg_out, UInt<1>("h01")) @[TopPipeline.scala 271:38]
    when _T_129 : @[TopPipeline.scala 271:46]
      Register.io.WriteData <= MEM_WB.io.mem_out @[TopPipeline.scala 271:69]
      skip @[TopPipeline.scala 271:46]
    else : @[TopPipeline.scala 272:20]
      Register.io.WriteData <= MEM_WB.io.alu_out @[TopPipeline.scala 272:43]
      skip @[TopPipeline.scala 272:20]
    Register.io.RegWrite <= MEM_WB.io.RegWrite_out @[TopPipeline.scala 274:30]
    Register.io.rd <= MEM_WB.io.rd_out @[TopPipeline.scala 275:24]
    
