$version Generated by VerilatedVcd $end
$date Tue Feb 18 15:11:32 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 "[ clock $end
  $var wire 32 "] io_reg_out [31:0] $end
  $var wire  1 "\ reset $end
  $scope module top $end
   $var wire  1 "[ EX_MEM_clock $end
   $var wire 32 "$ EX_MEM_io_alu_out [31:0] $end
   $var wire 32 2 EX_MEM_io_alu_out_in [31:0] $end
   $var wire  1 z EX_MEM_io_memoryread $end
   $var wire  1 k EX_MEM_io_memoryread_out $end
   $var wire  1 | EX_MEM_io_memorytoregister $end
   $var wire  1 "" EX_MEM_io_memorytoregister_out $end
   $var wire  1 y EX_MEM_io_memorywrite $end
   $var wire  1 j EX_MEM_io_memorywrite_out $end
   $var wire  5 v EX_MEM_io_rd_select [4:0] $end
   $var wire  5 "# EX_MEM_io_rd_select_out [4:0] $end
   $var wire  1 { EX_MEM_io_registerwrite $end
   $var wire  1 "! EX_MEM_io_registerwrite_out $end
   $var wire 32 E EX_MEM_io_rs2_in [31:0] $end
   $var wire 32 m EX_MEM_io_rs2_out [31:0] $end
   $var wire  1 "\ EX_MEM_reset $end
   $var wire  1 "[ ID_EX_clock $end
   $var wire  3 B ID_EX_io_control_aluop_in [2:0] $end
   $var wire  3 ` ID_EX_io_control_aluop_out [2:0] $end
   $var wire  1 @ ID_EX_io_control_memoryread_in $end
   $var wire  1 z ID_EX_io_control_memoryread_out $end
   $var wire  1 @ ID_EX_io_control_memorytoregister_in $end
   $var wire  1 | ID_EX_io_control_memorytoregister_out $end
   $var wire  1 ? ID_EX_io_control_memorywrite_in $end
   $var wire  1 y ID_EX_io_control_memorywrite_out $end
   $var wire  2 C ID_EX_io_control_opa_select_in [1:0] $end
   $var wire  2 } ID_EX_io_control_opa_select_out [1:0] $end
   $var wire  1 D ID_EX_io_control_opb_select_in $end
   $var wire  1 ~ ID_EX_io_control_opb_select_out $end
   $var wire  1 A ID_EX_io_control_registerwrite_in $end
   $var wire  1 { ID_EX_io_control_registerwrite_out $end
   $var wire  3 p ID_EX_io_func3_in [2:0] $end
   $var wire  3 b ID_EX_io_func3_out [2:0] $end
   $var wire  1 q ID_EX_io_func7_in $end
   $var wire  1 a ID_EX_io_func7_out $end
   $var wire 32 > ID_EX_io_immediate_in [31:0] $end
   $var wire 32 u ID_EX_io_immediate_out [31:0] $end
   $var wire 32 n ID_EX_io_pc4_in [31:0] $end
   $var wire 32 r ID_EX_io_pc4_out [31:0] $end
   $var wire  5 o ID_EX_io_rd_select_in [4:0] $end
   $var wire  5 v ID_EX_io_rd_select_out [4:0] $end
   $var wire 32 - ID_EX_io_rs1_in [31:0] $end
   $var wire 32 s ID_EX_io_rs1_out [31:0] $end
   $var wire  5 ^ ID_EX_io_rs1_select_in [4:0] $end
   $var wire  5 w ID_EX_io_rs1_select_out [4:0] $end
   $var wire 32 . ID_EX_io_rs2_in [31:0] $end
   $var wire 32 t ID_EX_io_rs2_out [31:0] $end
   $var wire  5 _ ID_EX_io_rs2_select_in [4:0] $end
   $var wire  5 x ID_EX_io_rs2_select_out [4:0] $end
   $var wire  1 "\ ID_EX_reset $end
   $var wire  1 "[ IF_ID_clock $end
   $var wire 32 = IF_ID_io_instruction_in [31:0] $end
   $var wire 32 c IF_ID_io_instruction_out [31:0] $end
   $var wire 32 < IF_ID_io_pc4_in [31:0] $end
   $var wire 32 n IF_ID_io_pc4_out [31:0] $end
   $var wire 32 ; IF_ID_io_pc_in [31:0] $end
   $var wire 32 d IF_ID_io_pc_out [31:0] $end
   $var wire  1 "\ IF_ID_reset $end
   $var wire  1 "[ MEM_WB_clock $end
   $var wire 32 "( MEM_WB_io_alu_out [31:0] $end
   $var wire 32 "$ MEM_WB_io_alu_out_in [31:0] $end
   $var wire 32 : MEM_WB_io_datamemory_data_in [31:0] $end
   $var wire 32 "' MEM_WB_io_datamemory_data_out [31:0] $end
   $var wire  1 k MEM_WB_io_memoryread $end
   $var wire  1 "& MEM_WB_io_memoryread_out $end
   $var wire  1 "" MEM_WB_io_memorytoregister $end
   $var wire  1 "% MEM_WB_io_memorytoregister_out $end
   $var wire  5 "# MEM_WB_io_rd_select [4:0] $end
   $var wire  5 ] MEM_WB_io_rd_select_out [4:0] $end
   $var wire  1 "! MEM_WB_io_registerwrite $end
   $var wire  1 \ MEM_WB_io_registerwrite_out $end
   $var wire  1 "\ MEM_WB_reset $end
   $var wire  3 ` alu_control_io_alu_op [2:0] $end
   $var wire  3 b alu_control_io_func3 [2:0] $end
   $var wire  1 a alu_control_io_func7 $end
   $var wire  5 1 alu_control_io_output [4:0] $end
   $var wire  5 1 alu_io_alu_control [4:0] $end
   $var wire 32 / alu_io_operand_a [31:0] $end
   $var wire 32 0 alu_io_operand_b [31:0] $end
   $var wire 32 2 alu_io_output [31:0] $end
   $var wire  1 k branch_forward_io_EX_MEM_memoryread $end
   $var wire  5 "# branch_forward_io_EX_MEM_registerrd [4:0] $end
   $var wire  1 z branch_forward_io_ID_EX_memoryread $end
   $var wire  5 v branch_forward_io_ID_EX_registerrd [4:0] $end
   $var wire  1 "& branch_forward_io_MEM_WB_memoryread $end
   $var wire  5 ] branch_forward_io_MEM_WB_registerrd [4:0] $end
   $var wire  1 $ branch_forward_io_control_branch $end
   $var wire  4 L branch_forward_io_forward_rs1 [3:0] $end
   $var wire  4 M branch_forward_io_forward_rs2 [3:0] $end
   $var wire  5 ^ branch_forward_io_rs1_select [4:0] $end
   $var wire  5 _ branch_forward_io_rs2_select [4:0] $end
   $var wire  3 p branch_logic_io_func3 [2:0] $end
   $var wire  1 K branch_logic_io_output $end
   $var wire 32 I branch_logic_io_rs1 [31:0] $end
   $var wire 32 J branch_logic_io_rs2 [31:0] $end
   $var wire  1 "[ clock $end
   $var wire  3 ' control_io_alu_op [2:0] $end
   $var wire  1 $ control_io_branch $end
   $var wire  2 * control_io_extend_select [1:0] $end
   $var wire  1 % control_io_memory_read $end
   $var wire  1 % control_io_memory_to_register $end
   $var wire  1 # control_io_memory_write $end
   $var wire  2 + control_io_next_pc_select [1:0] $end
   $var wire  7 [ control_io_opcode [6:0] $end
   $var wire  2 ( control_io_operand_a_select [1:0] $end
   $var wire  1 ) control_io_operand_b_select $end
   $var wire  1 & control_io_register_write $end
   $var wire  1 "[ data_memory_clock $end
   $var wire 10 l data_memory_io_memory_address [9:0] $end
   $var wire 32 m data_memory_io_memory_data [31:0] $end
   $var wire 32 : data_memory_io_memory_out [31:0] $end
   $var wire  1 k data_memory_io_memory_read $end
   $var wire  1 j data_memory_io_memory_write $end
   $var wire  5 "# forward_unit_io_EX_MEM_registerrd [4:0] $end
   $var wire  1 "! forward_unit_io_EX_MEM_registerwrite $end
   $var wire  5 w forward_unit_io_ID_EX_registerrs1 [4:0] $end
   $var wire  5 x forward_unit_io_ID_EX_registerrs2 [4:0] $end
   $var wire  5 ] forward_unit_io_MEM_WB_registerrd [4:0] $end
   $var wire  1 \ forward_unit_io_MEM_WB_registerwrite $end
   $var wire  2 F forward_unit_io_forward_a [1:0] $end
   $var wire  2 G forward_unit_io_forward_b [1:0] $end
   $var wire  1 z hazard_detection_io_ID_EX_memoryread $end
   $var wire  5 v hazard_detection_io_ID_EX_registerrd [4:0] $end
   $var wire 32 c hazard_detection_io_IF_ID_instruction [31:0] $end
   $var wire  1 H hazard_detection_io_control_forward $end
   $var wire 32 d hazard_detection_io_current_pc [31:0] $end
   $var wire 32 d hazard_detection_io_current_pc_out [31:0] $end
   $var wire  1 H hazard_detection_io_instruction_forward $end
   $var wire 32 c hazard_detection_io_instruction_out [31:0] $end
   $var wire  1 H hazard_detection_io_pc_forward $end
   $var wire 32 n hazard_detection_io_pc_in [31:0] $end
   $var wire 32 n hazard_detection_io_pc_out [31:0] $end
   $var wire 32 5 immediate_generation_io_i_immediate [31:0] $end
   $var wire 32 c immediate_generation_io_instruction [31:0] $end
   $var wire 32 d immediate_generation_io_pc [31:0] $end
   $var wire 32 e immediate_generation_io_s_immediate [31:0] $end
   $var wire 32 3 immediate_generation_io_sb_immediate [31:0] $end
   $var wire 32 f immediate_generation_io_u_immediate [31:0] $end
   $var wire 32 4 immediate_generation_io_uj_immediate [31:0] $end
   $var wire  1 "[ instruction_memory_clock $end
   $var wire 32 9 instruction_memory_io_read_data [31:0] $end
   $var wire 10 i instruction_memory_io_write_address [9:0] $end
   $var wire 32 "] io_reg_out [31:0] $end
   $var wire 32 6 jalr_io_input_a [31:0] $end
   $var wire 32 5 jalr_io_input_b [31:0] $end
   $var wire 32 7 jalr_io_output [31:0] $end
   $var wire  1 "[ pc_clock $end
   $var wire 32 8 pc_io_in [31:0] $end
   $var wire 32 g pc_io_out [31:0] $end
   $var wire 32 h pc_io_pc4 [31:0] $end
   $var wire  1 "\ pc_reset $end
   $var wire  1 "[ register_file_clock $end
   $var wire  5 ] register_file_io_rd_select [4:0] $end
   $var wire  1 \ register_file_io_register_write $end
   $var wire 32 - register_file_io_rs1 [31:0] $end
   $var wire  5 ^ register_file_io_rs1_select [4:0] $end
   $var wire 32 . register_file_io_rs2 [31:0] $end
   $var wire  5 _ register_file_io_rs2_select [4:0] $end
   $var wire 32 , register_file_io_write_data [31:0] $end
   $var wire  1 "\ register_file_reset $end
   $var wire  1 "\ reset $end
   $scope module EX_MEM $end
    $var wire  1 "[ clock $end
    $var wire 32 "$ io_alu_out [31:0] $end
    $var wire 32 2 io_alu_out_in [31:0] $end
    $var wire  1 z io_memoryread $end
    $var wire  1 k io_memoryread_out $end
    $var wire  1 | io_memorytoregister $end
    $var wire  1 "" io_memorytoregister_out $end
    $var wire  1 y io_memorywrite $end
    $var wire  1 j io_memorywrite_out $end
    $var wire  5 v io_rd_select [4:0] $end
    $var wire  5 "# io_rd_select_out [4:0] $end
    $var wire  1 { io_registerwrite $end
    $var wire  1 "! io_registerwrite_out $end
    $var wire 32 E io_rs2_in [31:0] $end
    $var wire 32 m io_rs2_out [31:0] $end
    $var wire 32 "$ register_alu_out [31:0] $end
    $var wire  1 k register_memoryread $end
    $var wire  1 "" register_memorytoregister $end
    $var wire  1 j register_memorywrite $end
    $var wire  5 "# register_rd_select [4:0] $end
    $var wire  1 "! register_registerwrite $end
    $var wire 32 m register_rs2 [31:0] $end
    $var wire  1 "\ reset $end
   $upscope $end
   $scope module ID_EX $end
    $var wire  1 "[ clock $end
    $var wire  3 ` control_aluop_register [2:0] $end
    $var wire  1 z control_memoryread_register $end
    $var wire  1 | control_memorytoregister_register $end
    $var wire  1 y control_memorywrite_register $end
    $var wire  2 } control_opa_select_register [1:0] $end
    $var wire  1 ~ control_opb_select_register $end
    $var wire  1 { control_registerwrite_register $end
    $var wire  3 b func3_register [2:0] $end
    $var wire  1 a func7_register $end
    $var wire 32 u immediate_register [31:0] $end
    $var wire  3 B io_control_aluop_in [2:0] $end
    $var wire  3 ` io_control_aluop_out [2:0] $end
    $var wire  1 @ io_control_memoryread_in $end
    $var wire  1 z io_control_memoryread_out $end
    $var wire  1 @ io_control_memorytoregister_in $end
    $var wire  1 | io_control_memorytoregister_out $end
    $var wire  1 ? io_control_memorywrite_in $end
    $var wire  1 y io_control_memorywrite_out $end
    $var wire  2 C io_control_opa_select_in [1:0] $end
    $var wire  2 } io_control_opa_select_out [1:0] $end
    $var wire  1 D io_control_opb_select_in $end
    $var wire  1 ~ io_control_opb_select_out $end
    $var wire  1 A io_control_registerwrite_in $end
    $var wire  1 { io_control_registerwrite_out $end
    $var wire  3 p io_func3_in [2:0] $end
    $var wire  3 b io_func3_out [2:0] $end
    $var wire  1 q io_func7_in $end
    $var wire  1 a io_func7_out $end
    $var wire 32 > io_immediate_in [31:0] $end
    $var wire 32 u io_immediate_out [31:0] $end
    $var wire 32 n io_pc4_in [31:0] $end
    $var wire 32 r io_pc4_out [31:0] $end
    $var wire  5 o io_rd_select_in [4:0] $end
    $var wire  5 v io_rd_select_out [4:0] $end
    $var wire 32 - io_rs1_in [31:0] $end
    $var wire 32 s io_rs1_out [31:0] $end
    $var wire  5 ^ io_rs1_select_in [4:0] $end
    $var wire  5 w io_rs1_select_out [4:0] $end
    $var wire 32 . io_rs2_in [31:0] $end
    $var wire 32 t io_rs2_out [31:0] $end
    $var wire  5 _ io_rs2_select_in [4:0] $end
    $var wire  5 x io_rs2_select_out [4:0] $end
    $var wire 32 r pc4_register [31:0] $end
    $var wire  5 v rd_select_register [4:0] $end
    $var wire  1 "\ reset $end
    $var wire 32 s rs1_register [31:0] $end
    $var wire  5 w rs1_select_register [4:0] $end
    $var wire 32 t rs2_register [31:0] $end
    $var wire  5 x rs2_select_register [4:0] $end
   $upscope $end
   $scope module IF_ID $end
    $var wire  1 "[ clock $end
    $var wire 32 c instruction_register [31:0] $end
    $var wire 32 = io_instruction_in [31:0] $end
    $var wire 32 c io_instruction_out [31:0] $end
    $var wire 32 < io_pc4_in [31:0] $end
    $var wire 32 n io_pc4_out [31:0] $end
    $var wire 32 ; io_pc_in [31:0] $end
    $var wire 32 d io_pc_out [31:0] $end
    $var wire 32 n pc4_register [31:0] $end
    $var wire 32 d pc_register [31:0] $end
    $var wire  1 "\ reset $end
   $upscope $end
   $scope module MEM_WB $end
    $var wire  1 "[ clock $end
    $var wire 32 "( io_alu_out [31:0] $end
    $var wire 32 "$ io_alu_out_in [31:0] $end
    $var wire 32 : io_datamemory_data_in [31:0] $end
    $var wire 32 "' io_datamemory_data_out [31:0] $end
    $var wire  1 k io_memoryread $end
    $var wire  1 "& io_memoryread_out $end
    $var wire  1 "" io_memorytoregister $end
    $var wire  1 "% io_memorytoregister_out $end
    $var wire  5 "# io_rd_select [4:0] $end
    $var wire  5 ] io_rd_select_out [4:0] $end
    $var wire  1 "! io_registerwrite $end
    $var wire  1 \ io_registerwrite_out $end
    $var wire 32 "( register_alu [31:0] $end
    $var wire 32 "' register_datamemory_data [31:0] $end
    $var wire  1 "& register_memoryread $end
    $var wire  1 "% register_memorytoregister $end
    $var wire  5 ] register_rd_select [4:0] $end
    $var wire  1 \ register_registerwrite $end
    $var wire  1 "\ reset $end
   $upscope $end
   $scope module alu $end
    $var wire  5 1 io_alu_control [4:0] $end
    $var wire 32 / io_operand_a [31:0] $end
    $var wire 32 0 io_operand_b [31:0] $end
    $var wire 32 2 io_output [31:0] $end
   $upscope $end
   $scope module alu_control $end
    $var wire  3 ` io_alu_op [2:0] $end
    $var wire  3 b io_func3 [2:0] $end
    $var wire  1 a io_func7 $end
    $var wire  5 1 io_output [4:0] $end
   $upscope $end
   $scope module branch_forward $end
    $var wire  1 k io_EX_MEM_memoryread $end
    $var wire  5 "# io_EX_MEM_registerrd [4:0] $end
    $var wire  1 z io_ID_EX_memoryread $end
    $var wire  5 v io_ID_EX_registerrd [4:0] $end
    $var wire  1 "& io_MEM_WB_memoryread $end
    $var wire  5 ] io_MEM_WB_registerrd [4:0] $end
    $var wire  1 $ io_control_branch $end
    $var wire  4 L io_forward_rs1 [3:0] $end
    $var wire  4 M io_forward_rs2 [3:0] $end
    $var wire  5 ^ io_rs1_select [4:0] $end
    $var wire  5 _ io_rs2_select [4:0] $end
   $upscope $end
   $scope module branch_logic $end
    $var wire  3 p io_func3 [2:0] $end
    $var wire  1 K io_output $end
    $var wire 32 I io_rs1 [31:0] $end
    $var wire 32 J io_rs2 [31:0] $end
   $upscope $end
   $scope module control $end
    $var wire  3 ' control_decode_io_alu_op [2:0] $end
    $var wire  1 $ control_decode_io_branch $end
    $var wire  2 * control_decode_io_extend_select [1:0] $end
    $var wire  1 Q control_decode_io_i_type $end
    $var wire  1 S control_decode_io_jal_type $end
    $var wire  1 R control_decode_io_jalr_type $end
    $var wire  1 N control_decode_io_load_type $end
    $var wire  1 T control_decode_io_lui_type $end
    $var wire  1 % control_decode_io_memory_read $end
    $var wire  1 % control_decode_io_memory_to_register $end
    $var wire  1 # control_decode_io_memory_write $end
    $var wire  2 + control_decode_io_next_pc_select [1:0] $end
    $var wire  2 ( control_decode_io_operand_a_select [1:0] $end
    $var wire  1 ) control_decode_io_operand_b_select $end
    $var wire  1 ") control_decode_io_r_type $end
    $var wire  1 & control_decode_io_register_write $end
    $var wire  1 O control_decode_io_s_type $end
    $var wire  1 P control_decode_io_sb_type $end
    $var wire  1 Q instruction_type_decode_io_i_type $end
    $var wire  1 S instruction_type_decode_io_jal_type $end
    $var wire  1 R instruction_type_decode_io_jalr_type $end
    $var wire  1 N instruction_type_decode_io_load_type $end
    $var wire  1 T instruction_type_decode_io_lui_type $end
    $var wire  7 [ instruction_type_decode_io_opcode [6:0] $end
    $var wire  1 ") instruction_type_decode_io_r_type $end
    $var wire  1 O instruction_type_decode_io_s_type $end
    $var wire  1 P instruction_type_decode_io_sb_type $end
    $var wire  3 ' io_alu_op [2:0] $end
    $var wire  1 $ io_branch $end
    $var wire  2 * io_extend_select [1:0] $end
    $var wire  1 % io_memory_read $end
    $var wire  1 % io_memory_to_register $end
    $var wire  1 # io_memory_write $end
    $var wire  2 + io_next_pc_select [1:0] $end
    $var wire  7 [ io_opcode [6:0] $end
    $var wire  2 ( io_operand_a_select [1:0] $end
    $var wire  1 ) io_operand_b_select $end
    $var wire  1 & io_register_write $end
    $scope module control_decode $end
     $var wire  3 ' io_alu_op [2:0] $end
     $var wire  1 $ io_branch $end
     $var wire  2 * io_extend_select [1:0] $end
     $var wire  1 Q io_i_type $end
     $var wire  1 S io_jal_type $end
     $var wire  1 R io_jalr_type $end
     $var wire  1 N io_load_type $end
     $var wire  1 T io_lui_type $end
     $var wire  1 % io_memory_read $end
     $var wire  1 % io_memory_to_register $end
     $var wire  1 # io_memory_write $end
     $var wire  2 + io_next_pc_select [1:0] $end
     $var wire  2 ( io_operand_a_select [1:0] $end
     $var wire  1 ) io_operand_b_select $end
     $var wire  1 ") io_r_type $end
     $var wire  1 & io_register_write $end
     $var wire  1 O io_s_type $end
     $var wire  1 P io_sb_type $end
    $upscope $end
    $scope module instruction_type_decode $end
     $var wire  1 Q io_i_type $end
     $var wire  1 S io_jal_type $end
     $var wire  1 R io_jalr_type $end
     $var wire  1 N io_load_type $end
     $var wire  1 T io_lui_type $end
     $var wire  7 [ io_opcode [6:0] $end
     $var wire  1 ") io_r_type $end
     $var wire  1 O io_s_type $end
     $var wire  1 P io_sb_type $end
    $upscope $end
   $upscope $end
   $scope module data_memory $end
    $var wire  1 "[ clock $end
    $var wire 10 l io_memory_address [9:0] $end
    $var wire 32 m io_memory_data [31:0] $end
    $var wire 32 : io_memory_out [31:0] $end
    $var wire  1 k io_memory_read $end
    $var wire  1 j io_memory_write $end
    $var wire 10 l memory__T_22_addr [9:0] $end
    $var wire 32 m memory__T_22_data [31:0] $end
    $var wire  1 "Z memory__T_22_en $end
    $var wire  1 "^ memory__T_22_mask $end
    $var wire 10 l memory__T_23_addr [9:0] $end
    $var wire 32 Y memory__T_23_data [31:0] $end
    $var wire 10 l memory__T_24_addr [9:0] $end
    $var wire 32 Z memory__T_24_data [31:0] $end
   $upscope $end
   $scope module forward_unit $end
    $var wire  5 "# io_EX_MEM_registerrd [4:0] $end
    $var wire  1 "! io_EX_MEM_registerwrite $end
    $var wire  5 w io_ID_EX_registerrs1 [4:0] $end
    $var wire  5 x io_ID_EX_registerrs2 [4:0] $end
    $var wire  5 ] io_MEM_WB_registerrd [4:0] $end
    $var wire  1 \ io_MEM_WB_registerwrite $end
    $var wire  2 F io_forward_a [1:0] $end
    $var wire  2 G io_forward_b [1:0] $end
   $upscope $end
   $scope module hazard_detection $end
    $var wire  1 z io_ID_EX_memoryread $end
    $var wire  5 v io_ID_EX_registerrd [4:0] $end
    $var wire 32 c io_IF_ID_instruction [31:0] $end
    $var wire  1 H io_control_forward $end
    $var wire 32 d io_current_pc [31:0] $end
    $var wire 32 d io_current_pc_out [31:0] $end
    $var wire  1 H io_instruction_forward $end
    $var wire 32 c io_instruction_out [31:0] $end
    $var wire  1 H io_pc_forward $end
    $var wire 32 n io_pc_in [31:0] $end
    $var wire 32 n io_pc_out [31:0] $end
    $var wire  5 ^ rs1_sel [4:0] $end
    $var wire  5 _ rs2_sel [4:0] $end
   $upscope $end
   $scope module immediate_generation $end
    $var wire 12 "J i_immediate_12 [11:0] $end
    $var wire 32 U i_immediate_32 [31:0] $end
    $var wire 32 5 io_i_immediate [31:0] $end
    $var wire 32 c io_instruction [31:0] $end
    $var wire 32 d io_pc [31:0] $end
    $var wire 32 e io_s_immediate [31:0] $end
    $var wire 32 3 io_sb_immediate [31:0] $end
    $var wire 32 f io_u_immediate [31:0] $end
    $var wire 32 4 io_uj_immediate [31:0] $end
    $var wire 12 "L s_immediate_12 [11:0] $end
    $var wire 32 e s_immediate_32 [31:0] $end
    $var wire  5 o s_lower_half [4:0] $end
    $var wire  7 "K s_upper_half [6:0] $end
    $var wire  1 "O sb_11thbit $end
    $var wire  1 "P sb_12thbit $end
    $var wire 13 "Q sb_immediate_13 [12:0] $end
    $var wire 32 V sb_immediate_32 [31:0] $end
    $var wire  4 "M sb_lower_half [3:0] $end
    $var wire  6 "N sb_upper_half [5:0] $end
    $var wire 20 "R u_immediate_20 [19:0] $end
    $var wire 32 "S u_immediate_32 [31:0] $end
    $var wire 47 "T u_immediate_32_shifted [46:0] $end
    $var wire  1 "W uj_11thbit $end
    $var wire 21 "Y uj_immediate_21 [20:0] $end
    $var wire 32 W uj_immediate_32 [31:0] $end
    $var wire 10 "V uj_lower_half [9:0] $end
    $var wire  8 "X uj_upper_half [7:0] $end
   $upscope $end
   $scope module instruction_memory $end
    $var wire  1 "[ clock $end
    $var wire 32 9 io_read_data [31:0] $end
    $var wire 10 i io_write_address [9:0] $end
    $var wire 10 i memory__T_11_addr [9:0] $end
    $var wire 32 9 memory__T_11_data [31:0] $end
    $scope module BindsTo_0_instruction_memory_Inst $end
     $var wire  1 "[ clock $end
     $var wire 32 9 io_read_data [31:0] $end
     $var wire 10 i io_write_address [9:0] $end
    $upscope $end
   $upscope $end
   $scope module jalr $end
    $var wire 32 6 io_input_a [31:0] $end
    $var wire 32 5 io_input_b [31:0] $end
    $var wire 32 7 io_output [31:0] $end
    $var wire 32 X sum [31:0] $end
   $upscope $end
   $scope module pc $end
    $var wire  1 "[ clock $end
    $var wire 32 8 io_in [31:0] $end
    $var wire 32 g io_out [31:0] $end
    $var wire 32 h io_pc4 [31:0] $end
    $var wire 32 g register [31:0] $end
    $var wire  1 "\ reset $end
   $upscope $end
   $scope module register_file $end
    $var wire  1 "[ clock $end
    $var wire  5 ] io_rd_select [4:0] $end
    $var wire  1 \ io_register_write $end
    $var wire 32 - io_rs1 [31:0] $end
    $var wire  5 ^ io_rs1_select [4:0] $end
    $var wire 32 . io_rs2 [31:0] $end
    $var wire  5 _ io_rs2_select [4:0] $end
    $var wire 32 , io_write_data [31:0] $end
    $var wire 32 "* registers_0 [31:0] $end
    $var wire 32 "+ registers_1 [31:0] $end
    $var wire 32 "4 registers_10 [31:0] $end
    $var wire 32 "5 registers_11 [31:0] $end
    $var wire 32 "6 registers_12 [31:0] $end
    $var wire 32 "7 registers_13 [31:0] $end
    $var wire 32 "8 registers_14 [31:0] $end
    $var wire 32 "9 registers_15 [31:0] $end
    $var wire 32 ": registers_16 [31:0] $end
    $var wire 32 "; registers_17 [31:0] $end
    $var wire 32 "< registers_18 [31:0] $end
    $var wire 32 "= registers_19 [31:0] $end
    $var wire 32 ", registers_2 [31:0] $end
    $var wire 32 "> registers_20 [31:0] $end
    $var wire 32 "? registers_21 [31:0] $end
    $var wire 32 "@ registers_22 [31:0] $end
    $var wire 32 "A registers_23 [31:0] $end
    $var wire 32 "B registers_24 [31:0] $end
    $var wire 32 "C registers_25 [31:0] $end
    $var wire 32 "D registers_26 [31:0] $end
    $var wire 32 "E registers_27 [31:0] $end
    $var wire 32 "F registers_28 [31:0] $end
    $var wire 32 "G registers_29 [31:0] $end
    $var wire 32 "- registers_3 [31:0] $end
    $var wire 32 "H registers_30 [31:0] $end
    $var wire 32 "I registers_31 [31:0] $end
    $var wire 32 ". registers_4 [31:0] $end
    $var wire 32 "/ registers_5 [31:0] $end
    $var wire 32 "0 registers_6 [31:0] $end
    $var wire 32 "1 registers_7 [31:0] $end
    $var wire 32 "2 registers_8 [31:0] $end
    $var wire 32 "3 registers_9 [31:0] $end
    $var wire  1 "\ reset $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


