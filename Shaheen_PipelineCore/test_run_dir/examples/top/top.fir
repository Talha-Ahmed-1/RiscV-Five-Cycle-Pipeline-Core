;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit top : 
  module instruction_type_decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, r_type : UInt<1>, load_type : UInt<1>, s_type : UInt<1>, sb_type : UInt<1>, i_type : UInt<1>, jalr_type : UInt<1>, jal_type : UInt<1>, lui_type : UInt<1>}
    
    io.r_type <= UInt<1>("h00") @[instruction_type_decode.scala 16:19]
    io.load_type <= UInt<1>("h00") @[instruction_type_decode.scala 17:22]
    io.s_type <= UInt<1>("h00") @[instruction_type_decode.scala 18:19]
    io.sb_type <= UInt<1>("h00") @[instruction_type_decode.scala 19:20]
    io.i_type <= UInt<1>("h00") @[instruction_type_decode.scala 20:19]
    io.jalr_type <= UInt<1>("h00") @[instruction_type_decode.scala 21:22]
    io.jal_type <= UInt<1>("h00") @[instruction_type_decode.scala 22:21]
    io.lui_type <= UInt<1>("h00") @[instruction_type_decode.scala 23:21]
    node _T_32 = eq(io.opcode, UInt<6>("h033")) @[instruction_type_decode.scala 25:20]
    when _T_32 : @[instruction_type_decode.scala 25:38]
      io.r_type <= UInt<1>("h01") @[instruction_type_decode.scala 26:19]
      skip @[instruction_type_decode.scala 25:38]
    else : @[instruction_type_decode.scala 27:45]
      node _T_35 = eq(io.opcode, UInt<2>("h03")) @[instruction_type_decode.scala 27:27]
      when _T_35 : @[instruction_type_decode.scala 27:45]
        io.load_type <= UInt<1>("h01") @[instruction_type_decode.scala 28:22]
        skip @[instruction_type_decode.scala 27:45]
      else : @[instruction_type_decode.scala 29:45]
        node _T_38 = eq(io.opcode, UInt<6>("h023")) @[instruction_type_decode.scala 29:27]
        when _T_38 : @[instruction_type_decode.scala 29:45]
          io.s_type <= UInt<1>("h01") @[instruction_type_decode.scala 30:19]
          skip @[instruction_type_decode.scala 29:45]
        else : @[instruction_type_decode.scala 31:45]
          node _T_41 = eq(io.opcode, UInt<7>("h063")) @[instruction_type_decode.scala 31:27]
          when _T_41 : @[instruction_type_decode.scala 31:45]
            io.sb_type <= UInt<1>("h01") @[instruction_type_decode.scala 32:20]
            skip @[instruction_type_decode.scala 31:45]
          else : @[instruction_type_decode.scala 33:45]
            node _T_44 = eq(io.opcode, UInt<5>("h013")) @[instruction_type_decode.scala 33:27]
            when _T_44 : @[instruction_type_decode.scala 33:45]
              io.i_type <= UInt<1>("h01") @[instruction_type_decode.scala 34:19]
              skip @[instruction_type_decode.scala 33:45]
            else : @[instruction_type_decode.scala 35:45]
              node _T_47 = eq(io.opcode, UInt<7>("h067")) @[instruction_type_decode.scala 35:27]
              when _T_47 : @[instruction_type_decode.scala 35:45]
                io.jalr_type <= UInt<1>("h01") @[instruction_type_decode.scala 36:22]
                skip @[instruction_type_decode.scala 35:45]
              else : @[instruction_type_decode.scala 37:45]
                node _T_50 = eq(io.opcode, UInt<7>("h06f")) @[instruction_type_decode.scala 37:27]
                when _T_50 : @[instruction_type_decode.scala 37:45]
                  io.jal_type <= UInt<1>("h01") @[instruction_type_decode.scala 38:21]
                  skip @[instruction_type_decode.scala 37:45]
                else : @[instruction_type_decode.scala 39:45]
                  node _T_53 = eq(io.opcode, UInt<6>("h037")) @[instruction_type_decode.scala 39:27]
                  when _T_53 : @[instruction_type_decode.scala 39:45]
                    io.lui_type <= UInt<1>("h01") @[instruction_type_decode.scala 40:21]
                    skip @[instruction_type_decode.scala 39:45]
                  else : @[instruction_type_decode.scala 41:18]
                    io.r_type <= UInt<1>("h00") @[instruction_type_decode.scala 42:19]
                    io.load_type <= UInt<1>("h00") @[instruction_type_decode.scala 43:22]
                    io.s_type <= UInt<1>("h00") @[instruction_type_decode.scala 44:19]
                    io.sb_type <= UInt<1>("h00") @[instruction_type_decode.scala 45:20]
                    io.i_type <= UInt<1>("h00") @[instruction_type_decode.scala 46:19]
                    io.jalr_type <= UInt<1>("h00") @[instruction_type_decode.scala 47:22]
                    io.jal_type <= UInt<1>("h00") @[instruction_type_decode.scala 48:21]
                    io.lui_type <= UInt<1>("h00") @[instruction_type_decode.scala 49:21]
                    skip @[instruction_type_decode.scala 41:18]
    
  module control_decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip r_type : UInt<1>, flip load_type : UInt<1>, flip s_type : UInt<1>, flip sb_type : UInt<1>, flip i_type : UInt<1>, flip jalr_type : UInt<1>, flip jal_type : UInt<1>, flip lui_type : UInt<1>, memory_write : UInt<1>, branch : UInt<1>, memory_read : UInt<1>, register_write : UInt<1>, memory_to_register : UInt<1>, alu_op : UInt<3>, operand_a_select : UInt<2>, operand_b_select : UInt<1>, extend_select : UInt<2>, next_pc_select : UInt<2>}
    
    node _T_42 = eq(io.r_type, UInt<1>("h01")) @[control_decode.scala 27:20]
    when _T_42 : @[control_decode.scala 27:29]
      io.memory_write <= UInt<1>("h00") @[control_decode.scala 28:25]
      io.branch <= UInt<1>("h00") @[control_decode.scala 29:19]
      io.memory_read <= UInt<1>("h00") @[control_decode.scala 30:24]
      io.register_write <= UInt<1>("h01") @[control_decode.scala 31:27]
      io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 32:31]
      io.alu_op <= UInt<1>("h00") @[control_decode.scala 33:19]
      io.operand_a_select <= UInt<1>("h00") @[control_decode.scala 34:29]
      io.operand_b_select <= UInt<1>("h00") @[control_decode.scala 35:29]
      io.extend_select <= UInt<1>("h00") @[control_decode.scala 36:26]
      io.next_pc_select <= UInt<1>("h00") @[control_decode.scala 37:27]
      skip @[control_decode.scala 27:29]
    else : @[control_decode.scala 38:39]
      node _T_54 = eq(io.load_type, UInt<1>("h01")) @[control_decode.scala 38:30]
      when _T_54 : @[control_decode.scala 38:39]
        io.memory_write <= UInt<1>("h00") @[control_decode.scala 40:25]
        io.branch <= UInt<1>("h00") @[control_decode.scala 41:19]
        io.memory_read <= UInt<1>("h01") @[control_decode.scala 42:24]
        io.register_write <= UInt<1>("h01") @[control_decode.scala 43:27]
        io.memory_to_register <= UInt<1>("h01") @[control_decode.scala 44:31]
        io.alu_op <= UInt<3>("h04") @[control_decode.scala 45:19]
        io.operand_a_select <= UInt<1>("h00") @[control_decode.scala 46:29]
        io.operand_b_select <= UInt<1>("h01") @[control_decode.scala 47:29]
        io.extend_select <= UInt<1>("h00") @[control_decode.scala 48:26]
        io.next_pc_select <= UInt<1>("h00") @[control_decode.scala 49:27]
        skip @[control_decode.scala 38:39]
      else : @[control_decode.scala 50:36]
        node _T_66 = eq(io.s_type, UInt<1>("h01")) @[control_decode.scala 50:27]
        when _T_66 : @[control_decode.scala 50:36]
          io.memory_write <= UInt<1>("h01") @[control_decode.scala 52:25]
          io.branch <= UInt<1>("h00") @[control_decode.scala 53:19]
          io.memory_read <= UInt<1>("h00") @[control_decode.scala 54:24]
          io.register_write <= UInt<1>("h00") @[control_decode.scala 55:27]
          io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 56:31]
          io.alu_op <= UInt<3>("h05") @[control_decode.scala 57:19]
          io.operand_a_select <= UInt<1>("h00") @[control_decode.scala 58:29]
          io.operand_b_select <= UInt<1>("h01") @[control_decode.scala 59:29]
          io.extend_select <= UInt<1>("h01") @[control_decode.scala 60:26]
          io.next_pc_select <= UInt<1>("h00") @[control_decode.scala 61:27]
          skip @[control_decode.scala 50:36]
        else : @[control_decode.scala 62:37]
          node _T_78 = eq(io.sb_type, UInt<1>("h01")) @[control_decode.scala 62:28]
          when _T_78 : @[control_decode.scala 62:37]
            io.memory_write <= UInt<1>("h00") @[control_decode.scala 63:25]
            io.branch <= UInt<1>("h01") @[control_decode.scala 64:19]
            io.memory_read <= UInt<1>("h00") @[control_decode.scala 65:24]
            io.register_write <= UInt<1>("h00") @[control_decode.scala 66:27]
            io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 67:31]
            io.alu_op <= UInt<2>("h02") @[control_decode.scala 68:19]
            io.operand_a_select <= UInt<1>("h00") @[control_decode.scala 69:29]
            io.operand_b_select <= UInt<1>("h00") @[control_decode.scala 70:29]
            io.extend_select <= UInt<1>("h00") @[control_decode.scala 71:26]
            io.next_pc_select <= UInt<1>("h01") @[control_decode.scala 72:27]
            skip @[control_decode.scala 62:37]
          else : @[control_decode.scala 73:36]
            node _T_90 = eq(io.i_type, UInt<1>("h01")) @[control_decode.scala 73:27]
            when _T_90 : @[control_decode.scala 73:36]
              io.memory_write <= UInt<1>("h00") @[control_decode.scala 74:25]
              io.branch <= UInt<1>("h00") @[control_decode.scala 75:19]
              io.memory_read <= UInt<1>("h00") @[control_decode.scala 76:24]
              io.register_write <= UInt<1>("h01") @[control_decode.scala 77:27]
              io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 78:31]
              io.alu_op <= UInt<1>("h01") @[control_decode.scala 79:19]
              io.operand_a_select <= UInt<1>("h00") @[control_decode.scala 80:29]
              io.operand_b_select <= UInt<1>("h01") @[control_decode.scala 81:29]
              io.extend_select <= UInt<1>("h00") @[control_decode.scala 82:26]
              io.next_pc_select <= UInt<1>("h00") @[control_decode.scala 83:27]
              skip @[control_decode.scala 73:36]
            else : @[control_decode.scala 84:39]
              node _T_102 = eq(io.jalr_type, UInt<1>("h01")) @[control_decode.scala 84:30]
              when _T_102 : @[control_decode.scala 84:39]
                io.memory_write <= UInt<1>("h00") @[control_decode.scala 85:25]
                io.branch <= UInt<1>("h00") @[control_decode.scala 86:19]
                io.memory_read <= UInt<1>("h00") @[control_decode.scala 87:24]
                io.register_write <= UInt<1>("h01") @[control_decode.scala 88:27]
                io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 89:31]
                io.alu_op <= UInt<2>("h03") @[control_decode.scala 90:19]
                io.operand_a_select <= UInt<2>("h02") @[control_decode.scala 91:29]
                io.operand_b_select <= UInt<1>("h00") @[control_decode.scala 92:29]
                io.extend_select <= UInt<1>("h00") @[control_decode.scala 93:26]
                io.next_pc_select <= UInt<2>("h03") @[control_decode.scala 94:27]
                skip @[control_decode.scala 84:39]
              else : @[control_decode.scala 95:38]
                node _T_114 = eq(io.jal_type, UInt<1>("h01")) @[control_decode.scala 95:29]
                when _T_114 : @[control_decode.scala 95:38]
                  io.memory_write <= UInt<1>("h00") @[control_decode.scala 96:25]
                  io.branch <= UInt<1>("h00") @[control_decode.scala 97:19]
                  io.memory_read <= UInt<1>("h00") @[control_decode.scala 98:24]
                  io.register_write <= UInt<1>("h01") @[control_decode.scala 99:27]
                  io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 100:31]
                  io.alu_op <= UInt<2>("h03") @[control_decode.scala 101:19]
                  io.operand_a_select <= UInt<2>("h02") @[control_decode.scala 102:29]
                  io.operand_b_select <= UInt<1>("h00") @[control_decode.scala 103:29]
                  io.extend_select <= UInt<1>("h00") @[control_decode.scala 104:26]
                  io.next_pc_select <= UInt<2>("h02") @[control_decode.scala 105:27]
                  skip @[control_decode.scala 95:38]
                else : @[control_decode.scala 106:38]
                  node _T_126 = eq(io.lui_type, UInt<1>("h01")) @[control_decode.scala 106:29]
                  when _T_126 : @[control_decode.scala 106:38]
                    io.memory_write <= UInt<1>("h00") @[control_decode.scala 107:25]
                    io.branch <= UInt<1>("h00") @[control_decode.scala 108:19]
                    io.memory_read <= UInt<1>("h00") @[control_decode.scala 109:24]
                    io.register_write <= UInt<1>("h01") @[control_decode.scala 110:27]
                    io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 111:31]
                    io.alu_op <= UInt<3>("h06") @[control_decode.scala 112:19]
                    io.operand_a_select <= UInt<2>("h03") @[control_decode.scala 113:29]
                    io.operand_b_select <= UInt<1>("h01") @[control_decode.scala 114:29]
                    io.extend_select <= UInt<2>("h02") @[control_decode.scala 115:26]
                    io.next_pc_select <= UInt<1>("h00") @[control_decode.scala 116:27]
                    skip @[control_decode.scala 106:38]
                  else : @[control_decode.scala 117:18]
                    io.memory_write <= UInt<1>("h00") @[control_decode.scala 118:25]
                    io.branch <= UInt<1>("h00") @[control_decode.scala 119:19]
                    io.memory_read <= UInt<1>("h00") @[control_decode.scala 120:24]
                    io.register_write <= UInt<1>("h00") @[control_decode.scala 121:27]
                    io.memory_to_register <= UInt<1>("h00") @[control_decode.scala 122:31]
                    io.alu_op <= UInt<3>("h07") @[control_decode.scala 123:19]
                    io.operand_a_select <= UInt<1>("h00") @[control_decode.scala 124:29]
                    io.operand_b_select <= UInt<1>("h00") @[control_decode.scala 125:29]
                    io.extend_select <= UInt<1>("h00") @[control_decode.scala 126:26]
                    io.next_pc_select <= UInt<1>("h00") @[control_decode.scala 127:27]
                    skip @[control_decode.scala 117:18]
    
  module control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, memory_write : UInt<1>, branch : UInt<1>, memory_read : UInt<1>, register_write : UInt<1>, memory_to_register : UInt<1>, alu_op : UInt<3>, operand_a_select : UInt<2>, operand_b_select : UInt<1>, extend_select : UInt<2>, next_pc_select : UInt<2>}
    
    inst instruction_type_decode of instruction_type_decode @[control.scala 18:41]
    instruction_type_decode.clock <= clock
    instruction_type_decode.reset <= reset
    inst control_decode of control_decode @[control.scala 19:32]
    control_decode.clock <= clock
    control_decode.reset <= reset
    instruction_type_decode.io.opcode <= io.opcode @[control.scala 20:39]
    control_decode.io.r_type <= instruction_type_decode.io.r_type @[control.scala 21:30]
    control_decode.io.load_type <= instruction_type_decode.io.load_type @[control.scala 22:33]
    control_decode.io.s_type <= instruction_type_decode.io.s_type @[control.scala 23:30]
    control_decode.io.sb_type <= instruction_type_decode.io.sb_type @[control.scala 24:31]
    control_decode.io.i_type <= instruction_type_decode.io.i_type @[control.scala 25:30]
    control_decode.io.jalr_type <= instruction_type_decode.io.jalr_type @[control.scala 26:33]
    control_decode.io.jal_type <= instruction_type_decode.io.jal_type @[control.scala 27:32]
    control_decode.io.lui_type <= instruction_type_decode.io.lui_type @[control.scala 28:32]
    io.memory_write <= control_decode.io.memory_write @[control.scala 30:21]
    io.branch <= control_decode.io.branch @[control.scala 31:15]
    io.memory_read <= control_decode.io.memory_read @[control.scala 32:20]
    io.register_write <= control_decode.io.register_write @[control.scala 33:23]
    io.memory_to_register <= control_decode.io.memory_to_register @[control.scala 34:27]
    io.alu_op <= control_decode.io.alu_op @[control.scala 35:15]
    io.operand_a_select <= control_decode.io.operand_a_select @[control.scala 36:25]
    io.operand_b_select <= control_decode.io.operand_b_select @[control.scala 37:25]
    io.extend_select <= control_decode.io.extend_select @[control.scala 38:22]
    io.next_pc_select <= control_decode.io.next_pc_select @[control.scala 39:23]
    
  module register_file : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip register_write : UInt<1>, flip rd_select : UInt<5>, flip rs1_select : UInt<5>, flip rs2_select : UInt<5>, flip write_data : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    wire _T_54 : SInt<32>[32] @[register_file.scala 14:36]
    _T_54[0] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[1] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[2] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[3] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[4] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[5] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[6] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[7] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[8] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[9] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[10] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[11] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[12] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[13] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[14] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[15] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[16] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[17] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[18] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[19] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[20] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[21] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[22] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[23] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[24] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[25] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[26] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[27] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[28] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[29] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[30] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    _T_54[31] <= asSInt(UInt<32>("h00")) @[register_file.scala 14:36]
    reg registers : SInt<32>[32], clock with : (reset => (reset, _T_54)) @[register_file.scala 14:28]
    registers[0] <= asSInt(UInt<1>("h00")) @[register_file.scala 15:18]
    io.rs1 <= registers[io.rs1_select] @[register_file.scala 16:12]
    io.rs2 <= registers[io.rs2_select] @[register_file.scala 17:12]
    node _T_265 = eq(io.register_write, UInt<1>("h01")) @[register_file.scala 18:28]
    when _T_265 : @[register_file.scala 18:37]
      node _T_267 = eq(io.rd_select, UInt<1>("h00")) @[register_file.scala 19:27]
      when _T_267 : @[register_file.scala 19:43]
        registers[io.rd_select] <= asSInt(UInt<1>("h00")) @[register_file.scala 19:68]
        skip @[register_file.scala 19:43]
      else : @[register_file.scala 20:20]
        registers[io.rd_select] <= io.write_data @[register_file.scala 20:45]
        skip @[register_file.scala 20:20]
      skip @[register_file.scala 18:37]
    
  module alu_module : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip operand_a : SInt<32>, flip operand_b : SInt<32>, flip alu_control : UInt<5>, output : SInt<32>, branch : UInt<1>}
    
    node _T_16 = eq(io.alu_control, UInt<1>("h00")) @[alu_module.scala 14:25]
    when _T_16 : @[alu_module.scala 14:41]
      node _T_17 = add(io.operand_a, io.operand_b) @[alu_module.scala 16:35]
      node _T_18 = tail(_T_17, 1) @[alu_module.scala 16:35]
      node _T_19 = asSInt(_T_18) @[alu_module.scala 16:35]
      io.output <= _T_19 @[alu_module.scala 16:19]
      skip @[alu_module.scala 14:41]
    else : @[alu_module.scala 17:48]
      node _T_21 = eq(io.alu_control, UInt<1>("h01")) @[alu_module.scala 17:32]
      when _T_21 : @[alu_module.scala 17:48]
        node _T_22 = bits(io.operand_b, 4, 0) @[alu_module.scala 19:38]
        node _T_23 = dshl(io.operand_a, _T_22) @[alu_module.scala 20:35]
        io.output <= _T_23 @[alu_module.scala 20:19]
        skip @[alu_module.scala 17:48]
      else : @[alu_module.scala 21:48]
        node _T_25 = eq(io.alu_control, UInt<2>("h02")) @[alu_module.scala 21:32]
        when _T_25 : @[alu_module.scala 21:48]
          node _T_26 = lt(io.operand_a, io.operand_b) @[alu_module.scala 23:27]
          when _T_26 : @[alu_module.scala 23:43]
            io.output <= asSInt(UInt<2>("h01")) @[alu_module.scala 24:23]
            skip @[alu_module.scala 23:43]
          else : @[alu_module.scala 25:22]
            io.output <= asSInt(UInt<1>("h00")) @[alu_module.scala 26:23]
            skip @[alu_module.scala 25:22]
          skip @[alu_module.scala 21:48]
        else : @[alu_module.scala 28:81]
          node _T_30 = eq(io.alu_control, UInt<2>("h03")) @[alu_module.scala 28:32]
          node _T_32 = eq(io.alu_control, UInt<5>("h016")) @[alu_module.scala 28:65]
          node _T_33 = or(_T_30, _T_32) @[alu_module.scala 28:47]
          when _T_33 : @[alu_module.scala 28:81]
            node _T_34 = asUInt(io.operand_a) @[alu_module.scala 30:27]
            node _T_35 = asUInt(io.operand_b) @[alu_module.scala 30:49]
            node _T_36 = lt(_T_34, _T_35) @[alu_module.scala 30:34]
            when _T_36 : @[alu_module.scala 30:57]
              io.output <= asSInt(UInt<2>("h01")) @[alu_module.scala 31:23]
              skip @[alu_module.scala 30:57]
            else : @[alu_module.scala 32:22]
              io.output <= asSInt(UInt<1>("h00")) @[alu_module.scala 33:23]
              skip @[alu_module.scala 32:22]
            skip @[alu_module.scala 28:81]
          else : @[alu_module.scala 35:48]
            node _T_40 = eq(io.alu_control, UInt<3>("h04")) @[alu_module.scala 35:32]
            when _T_40 : @[alu_module.scala 35:48]
              node _T_41 = xor(io.operand_a, io.operand_b) @[alu_module.scala 37:35]
              node _T_42 = asSInt(_T_41) @[alu_module.scala 37:35]
              io.output <= _T_42 @[alu_module.scala 37:19]
              skip @[alu_module.scala 35:48]
            else : @[alu_module.scala 38:81]
              node _T_44 = eq(io.alu_control, UInt<3>("h05")) @[alu_module.scala 38:32]
              node _T_46 = eq(io.alu_control, UInt<4>("h0d")) @[alu_module.scala 38:65]
              node _T_47 = or(_T_44, _T_46) @[alu_module.scala 38:47]
              when _T_47 : @[alu_module.scala 38:81]
                node _T_48 = bits(io.operand_b, 4, 0) @[alu_module.scala 40:39]
                node _T_49 = dshr(io.operand_a, _T_48) @[alu_module.scala 41:35]
                io.output <= _T_49 @[alu_module.scala 41:19]
                skip @[alu_module.scala 38:81]
              else : @[alu_module.scala 42:48]
                node _T_51 = eq(io.alu_control, UInt<3>("h06")) @[alu_module.scala 42:32]
                when _T_51 : @[alu_module.scala 42:48]
                  node _T_52 = or(io.operand_a, io.operand_b) @[alu_module.scala 44:35]
                  node _T_53 = asSInt(_T_52) @[alu_module.scala 44:35]
                  io.output <= _T_53 @[alu_module.scala 44:19]
                  skip @[alu_module.scala 42:48]
                else : @[alu_module.scala 45:48]
                  node _T_55 = eq(io.alu_control, UInt<3>("h07")) @[alu_module.scala 45:32]
                  when _T_55 : @[alu_module.scala 45:48]
                    node _T_56 = and(io.operand_a, io.operand_b) @[alu_module.scala 47:35]
                    node _T_57 = asSInt(_T_56) @[alu_module.scala 47:35]
                    io.output <= _T_57 @[alu_module.scala 47:19]
                    skip @[alu_module.scala 45:48]
                  else : @[alu_module.scala 48:48]
                    node _T_59 = eq(io.alu_control, UInt<4>("h08")) @[alu_module.scala 48:32]
                    when _T_59 : @[alu_module.scala 48:48]
                      node _T_60 = sub(io.operand_a, io.operand_b) @[alu_module.scala 50:35]
                      node _T_61 = tail(_T_60, 1) @[alu_module.scala 50:35]
                      node _T_62 = asSInt(_T_61) @[alu_module.scala 50:35]
                      io.output <= _T_62 @[alu_module.scala 50:19]
                      skip @[alu_module.scala 48:48]
                    else : @[alu_module.scala 51:48]
                      node _T_64 = eq(io.alu_control, UInt<5>("h010")) @[alu_module.scala 51:32]
                      when _T_64 : @[alu_module.scala 51:48]
                        node _T_65 = eq(io.operand_a, io.operand_b) @[alu_module.scala 53:27]
                        when _T_65 : @[alu_module.scala 53:45]
                          io.output <= asSInt(UInt<2>("h01")) @[alu_module.scala 54:23]
                          skip @[alu_module.scala 53:45]
                        else : @[alu_module.scala 55:22]
                          io.output <= asSInt(UInt<1>("h00")) @[alu_module.scala 56:23]
                          skip @[alu_module.scala 55:22]
                        skip @[alu_module.scala 51:48]
                      else : @[alu_module.scala 58:48]
                        node _T_69 = eq(io.alu_control, UInt<5>("h011")) @[alu_module.scala 58:32]
                        when _T_69 : @[alu_module.scala 58:48]
                          node _T_70 = eq(io.operand_a, io.operand_b) @[alu_module.scala 60:29]
                          node _T_71 = not(_T_70) @[alu_module.scala 60:14]
                          when _T_71 : @[alu_module.scala 60:48]
                            io.output <= asSInt(UInt<2>("h01")) @[alu_module.scala 61:23]
                            skip @[alu_module.scala 60:48]
                          else : @[alu_module.scala 62:22]
                            io.output <= asSInt(UInt<1>("h00")) @[alu_module.scala 63:23]
                            skip @[alu_module.scala 62:22]
                          skip @[alu_module.scala 58:48]
                        else : @[alu_module.scala 65:48]
                          node _T_75 = eq(io.alu_control, UInt<5>("h014")) @[alu_module.scala 65:32]
                          when _T_75 : @[alu_module.scala 65:48]
                            node _T_76 = lt(io.operand_a, io.operand_b) @[alu_module.scala 67:27]
                            when _T_76 : @[alu_module.scala 67:43]
                              io.output <= asSInt(UInt<2>("h01")) @[alu_module.scala 68:23]
                              skip @[alu_module.scala 67:43]
                            else : @[alu_module.scala 69:22]
                              io.output <= asSInt(UInt<1>("h00")) @[alu_module.scala 70:23]
                              skip @[alu_module.scala 69:22]
                            skip @[alu_module.scala 65:48]
                          else : @[alu_module.scala 72:48]
                            node _T_80 = eq(io.alu_control, UInt<5>("h015")) @[alu_module.scala 72:32]
                            when _T_80 : @[alu_module.scala 72:48]
                              node _T_81 = geq(io.operand_a, io.operand_b) @[alu_module.scala 74:27]
                              when _T_81 : @[alu_module.scala 74:44]
                                io.output <= asSInt(UInt<2>("h01")) @[alu_module.scala 75:23]
                                skip @[alu_module.scala 74:44]
                              else : @[alu_module.scala 76:22]
                                io.output <= asSInt(UInt<1>("h00")) @[alu_module.scala 77:23]
                                skip @[alu_module.scala 76:22]
                              skip @[alu_module.scala 72:48]
                            else : @[alu_module.scala 79:48]
                              node _T_85 = eq(io.alu_control, UInt<5>("h017")) @[alu_module.scala 79:32]
                              when _T_85 : @[alu_module.scala 79:48]
                                node _T_86 = asUInt(io.operand_a) @[alu_module.scala 81:27]
                                node _T_87 = asUInt(io.operand_b) @[alu_module.scala 81:50]
                                node _T_88 = geq(_T_86, _T_87) @[alu_module.scala 81:34]
                                when _T_88 : @[alu_module.scala 81:58]
                                  io.output <= asSInt(UInt<2>("h01")) @[alu_module.scala 82:23]
                                  skip @[alu_module.scala 81:58]
                                else : @[alu_module.scala 83:22]
                                  io.output <= asSInt(UInt<1>("h00")) @[alu_module.scala 84:23]
                                  skip @[alu_module.scala 83:22]
                                skip @[alu_module.scala 79:48]
                              else : @[alu_module.scala 86:48]
                                node _T_92 = eq(io.alu_control, UInt<5>("h01f")) @[alu_module.scala 86:32]
                                when _T_92 : @[alu_module.scala 86:48]
                                  io.output <= io.operand_a @[alu_module.scala 88:19]
                                  skip @[alu_module.scala 86:48]
                                else : @[alu_module.scala 90:16]
                                  io.output is invalid @[alu_module.scala 91:19]
                                  skip @[alu_module.scala 90:16]
    node _T_93 = bits(io.alu_control, 4, 3) @[alu_module.scala 94:24]
    node _T_95 = eq(_T_93, UInt<2>("h02")) @[alu_module.scala 94:30]
    node _T_97 = eq(io.output, asSInt(UInt<2>("h01"))) @[alu_module.scala 94:55]
    node _T_98 = and(_T_95, _T_97) @[alu_module.scala 94:42]
    when _T_98 : @[alu_module.scala 94:64]
      io.branch <= UInt<1>("h01") @[alu_module.scala 95:19]
      skip @[alu_module.scala 94:64]
    else : @[alu_module.scala 96:18]
      io.branch <= UInt<1>("h00") @[alu_module.scala 97:19]
      skip @[alu_module.scala 96:18]
    
  module alu_control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip alu_op : UInt<3>, flip func7 : UInt<1>, flip func3 : UInt<3>, output : UInt<5>}
    
    node _T_14 = eq(io.alu_op, UInt<1>("h00")) @[alu_control.scala 11:20]
    when _T_14 : @[alu_control.scala 11:33]
      node _T_16 = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
      node _T_17 = cat(_T_16, io.func3) @[Cat.scala 30:58]
      io.output <= _T_17 @[alu_control.scala 13:19]
      skip @[alu_control.scala 11:33]
    else : @[alu_control.scala 14:41]
      node _T_19 = eq(io.alu_op, UInt<3>("h04")) @[alu_control.scala 14:27]
      when _T_19 : @[alu_control.scala 14:41]
        io.output <= UInt<1>("h00") @[alu_control.scala 16:19]
        skip @[alu_control.scala 14:41]
      else : @[alu_control.scala 17:41]
        node _T_22 = eq(io.alu_op, UInt<1>("h01")) @[alu_control.scala 17:27]
        when _T_22 : @[alu_control.scala 17:41]
          node _T_24 = eq(io.func3, UInt<3>("h05")) @[alu_control.scala 19:23]
          when _T_24 : @[alu_control.scala 19:37]
            node _T_26 = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
            node _T_27 = cat(_T_26, io.func3) @[Cat.scala 30:58]
            io.output <= _T_27 @[alu_control.scala 20:23]
            skip @[alu_control.scala 19:37]
          else : @[alu_control.scala 21:22]
            node _T_30 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 30:58]
            node _T_31 = cat(_T_30, io.func3) @[Cat.scala 30:58]
            io.output <= _T_31 @[alu_control.scala 22:23]
            skip @[alu_control.scala 21:22]
          skip @[alu_control.scala 17:41]
        else : @[alu_control.scala 25:41]
          node _T_33 = eq(io.alu_op, UInt<3>("h05")) @[alu_control.scala 25:27]
          when _T_33 : @[alu_control.scala 25:41]
            io.output <= UInt<1>("h00") @[alu_control.scala 26:19]
            skip @[alu_control.scala 25:41]
          else : @[alu_control.scala 27:41]
            node _T_36 = eq(io.alu_op, UInt<2>("h02")) @[alu_control.scala 27:27]
            when _T_36 : @[alu_control.scala 27:41]
              node _T_38 = cat(UInt<2>("h02"), io.func3) @[Cat.scala 30:58]
              io.output <= _T_38 @[alu_control.scala 29:19]
              skip @[alu_control.scala 27:41]
            else : @[alu_control.scala 30:41]
              node _T_40 = eq(io.alu_op, UInt<2>("h03")) @[alu_control.scala 30:27]
              when _T_40 : @[alu_control.scala 30:41]
                io.output <= UInt<5>("h01f") @[alu_control.scala 32:19]
                skip @[alu_control.scala 30:41]
              else : @[alu_control.scala 33:41]
                node _T_43 = eq(io.alu_op, UInt<3>("h06")) @[alu_control.scala 33:27]
                when _T_43 : @[alu_control.scala 33:41]
                  io.output <= UInt<1>("h00") @[alu_control.scala 35:19]
                  skip @[alu_control.scala 33:41]
                else : @[alu_control.scala 36:18]
                  io.output is invalid @[alu_control.scala 37:19]
                  skip @[alu_control.scala 36:18]
    
  module immediate_generation : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip instruction : UInt<32>, flip pc : SInt<32>, s_immediate : SInt<32>, sb_immediate : SInt<32>, u_immediate : SInt<32>, uj_immediate : SInt<32>, i_immediate : SInt<32>}
    
    node i_immediate_12 = bits(io.instruction, 31, 20) @[immediate_generation.scala 17:40]
    node _T_19 = bits(i_immediate_12, 11, 11) @[immediate_generation.scala 18:53]
    node _T_20 = bits(_T_19, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_20, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node i_immediate_32 = cat(_T_23, i_immediate_12) @[Cat.scala 30:58]
    node _T_24 = asSInt(i_immediate_32) @[immediate_generation.scala 19:38]
    io.i_immediate <= _T_24 @[immediate_generation.scala 19:20]
    node s_lower_half = bits(io.instruction, 11, 7) @[immediate_generation.scala 21:38]
    node s_upper_half = bits(io.instruction, 31, 25) @[immediate_generation.scala 22:38]
    node s_immediate_12 = cat(s_upper_half, s_lower_half) @[Cat.scala 30:58]
    node _T_25 = bits(s_immediate_12, 11, 11) @[immediate_generation.scala 24:53]
    node _T_26 = bits(_T_25, 0, 0) @[Bitwise.scala 72:15]
    node _T_29 = mux(_T_26, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node s_immediate_32 = cat(_T_29, s_immediate_12) @[Cat.scala 30:58]
    node _T_30 = asSInt(s_immediate_32) @[immediate_generation.scala 25:38]
    io.s_immediate <= _T_30 @[immediate_generation.scala 25:20]
    node sb_lower_half = bits(io.instruction, 11, 8) @[immediate_generation.scala 27:39]
    node sb_upper_half = bits(io.instruction, 30, 25) @[immediate_generation.scala 28:39]
    node sb_11thbit = bits(io.instruction, 7, 7) @[immediate_generation.scala 29:36]
    node sb_12thbit = bits(io.instruction, 31, 31) @[immediate_generation.scala 30:36]
    node _T_32 = asUInt(asSInt(UInt<1>("h00"))) @[Cat.scala 30:58]
    node _T_33 = cat(sb_lower_half, _T_32) @[Cat.scala 30:58]
    node _T_34 = cat(sb_12thbit, sb_11thbit) @[Cat.scala 30:58]
    node _T_35 = cat(_T_34, sb_upper_half) @[Cat.scala 30:58]
    node sb_immediate_13 = cat(_T_35, _T_33) @[Cat.scala 30:58]
    node _T_36 = bits(sb_immediate_13, 12, 12) @[immediate_generation.scala 32:55]
    node _T_37 = bits(_T_36, 0, 0) @[Bitwise.scala 72:15]
    node _T_40 = mux(_T_37, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_41 = cat(_T_40, sb_immediate_13) @[Cat.scala 30:58]
    node sb_immediate_32 = asSInt(_T_41) @[immediate_generation.scala 32:79]
    node _T_42 = add(sb_immediate_32, io.pc) @[immediate_generation.scala 33:40]
    node _T_43 = tail(_T_42, 1) @[immediate_generation.scala 33:40]
    node _T_44 = asSInt(_T_43) @[immediate_generation.scala 33:40]
    io.sb_immediate <= _T_44 @[immediate_generation.scala 33:21]
    node u_immediate_20 = bits(io.instruction, 31, 12) @[immediate_generation.scala 35:40]
    node _T_45 = bits(u_immediate_20, 19, 19) @[immediate_generation.scala 36:53]
    node _T_46 = bits(_T_45, 0, 0) @[Bitwise.scala 72:15]
    node _T_49 = mux(_T_46, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node u_immediate_32 = cat(_T_49, u_immediate_20) @[Cat.scala 30:58]
    node u_immediate_32_shifted = dshl(u_immediate_32, UInt<4>("h0c")) @[immediate_generation.scala 37:49]
    node _T_51 = asSInt(u_immediate_32_shifted) @[immediate_generation.scala 38:46]
    io.u_immediate <= _T_51 @[immediate_generation.scala 38:20]
    node uj_lower_half = bits(io.instruction, 30, 21) @[immediate_generation.scala 42:39]
    node uj_11thbit = bits(io.instruction, 20, 20) @[immediate_generation.scala 43:36]
    node uj_upper_half = bits(io.instruction, 19, 12) @[immediate_generation.scala 44:39]
    node uj_20thbit = bits(io.instruction, 31, 31) @[immediate_generation.scala 45:36]
    node _T_53 = asUInt(asSInt(UInt<1>("h00"))) @[Cat.scala 30:58]
    node _T_54 = cat(uj_lower_half, _T_53) @[Cat.scala 30:58]
    node _T_55 = cat(uj_20thbit, uj_upper_half) @[Cat.scala 30:58]
    node _T_56 = cat(_T_55, uj_11thbit) @[Cat.scala 30:58]
    node uj_immediate_21 = cat(_T_56, _T_54) @[Cat.scala 30:58]
    node _T_57 = bits(uj_immediate_21, 20, 20) @[immediate_generation.scala 47:55]
    node _T_58 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_61 = mux(_T_58, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _T_62 = cat(_T_61, uj_immediate_21) @[Cat.scala 30:58]
    node uj_immediate_32 = asSInt(_T_62) @[immediate_generation.scala 47:79]
    node _T_63 = add(uj_immediate_32, io.pc) @[immediate_generation.scala 48:40]
    node _T_64 = tail(_T_63, 1) @[immediate_generation.scala 48:40]
    node _T_65 = asSInt(_T_64) @[immediate_generation.scala 48:40]
    io.uj_immediate <= _T_65 @[immediate_generation.scala 48:21]
    
  module jalr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input_a : SInt<32>, flip input_b : SInt<32>, output : SInt<32>}
    
    node _T_11 = add(io.input_a, io.input_b) @[jalr.scala 11:26]
    node _T_12 = tail(_T_11, 1) @[jalr.scala 11:26]
    node sum = asSInt(_T_12) @[jalr.scala 11:26]
    node _T_14 = and(sum, asSInt(UInt<33>("h0fffffffe"))) @[jalr.scala 12:22]
    node _T_15 = asSInt(_T_14) @[jalr.scala 12:22]
    io.output <= _T_15 @[jalr.scala 12:15]
    
  module pc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, pc4 : SInt<32>}
    
    reg register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[pc.scala 11:27]
    register <= io.in @[pc.scala 12:14]
    io.out <= register @[pc.scala 13:12]
    node _T_14 = add(register, asSInt(UInt<4>("h04"))) @[pc.scala 14:24]
    node _T_15 = tail(_T_14, 1) @[pc.scala 14:24]
    node _T_16 = asSInt(_T_15) @[pc.scala 14:24]
    io.pc4 <= _T_16 @[pc.scala 14:12]
    
  module instruction_memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip write_address : UInt<10>, read_data : UInt<32>}
    
    cmem memory : UInt<32>[1024] @[instruction_memory.scala 10:21]
    infer mport _T_11 = memory[io.write_address], clock @[instruction_memory.scala 12:27]
    io.read_data <= _T_11 @[instruction_memory.scala 12:18]
    
  module data_memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memory_write : UInt<1>, flip memory_read : UInt<1>, flip memory_address : UInt<10>, flip memory_data : SInt<32>, memory_out : SInt<32>}
    
    cmem memory : SInt<32>[1024] @[data_memory.scala 12:21]
    node _T_18 = eq(io.memory_write, UInt<1>("h01")) @[data_memory.scala 13:26]
    node _T_20 = eq(io.memory_read, UInt<1>("h00")) @[data_memory.scala 13:55]
    node _T_21 = and(_T_18, _T_20) @[data_memory.scala 13:37]
    when _T_21 : @[data_memory.scala 13:67]
      write mport _T_22 = memory[io.memory_address], clock
      _T_22 <= io.memory_data
      read mport _T_23 = memory[io.memory_address], clock @[data_memory.scala 16:37]
      io.memory_out <= _T_23 @[data_memory.scala 16:23]
      skip @[data_memory.scala 13:67]
    else : @[data_memory.scala 17:18]
      read mport _T_24 = memory[io.memory_address], clock @[data_memory.scala 19:37]
      io.memory_out <= _T_24 @[data_memory.scala 19:23]
      skip @[data_memory.scala 17:18]
    
  module IF_ID : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : SInt<32>, flip pc4_in : SInt<32>, flip instruction_in : UInt<32>, pc_out : SInt<32>, pc4_out : SInt<32>, instruction_out : UInt<32>}
    
    reg pc_register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF_ID.scala 13:30]
    reg pc4_register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF_ID.scala 14:31]
    reg instruction_register : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 15:39]
    pc_register <= io.pc_in @[IF_ID.scala 16:17]
    pc4_register <= io.pc4_in @[IF_ID.scala 17:18]
    instruction_register <= io.instruction_in @[IF_ID.scala 18:26]
    io.pc_out <= pc_register @[IF_ID.scala 19:15]
    io.pc4_out <= pc4_register @[IF_ID.scala 20:16]
    io.instruction_out <= instruction_register @[IF_ID.scala 21:24]
    
  module ID_EX : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : SInt<32>, flip pc4_in : SInt<32>, flip rs1_select_in : UInt<5>, flip rs2_select_in : UInt<5>, flip rs1_in : SInt<32>, flip rs2_in : SInt<32>, flip immediate_in : SInt<32>, flip rd_select_in : UInt<5>, flip func3_in : UInt<3>, flip func7_in : UInt<1>, flip control_memorywrite_in : UInt<1>, flip control_memoryread_in : UInt<1>, flip control_branch_in : UInt<1>, flip control_registerwrite_in : UInt<1>, flip control_memorytoregister_in : UInt<1>, flip control_aluop_in : UInt<3>, flip control_opa_select_in : UInt<2>, flip control_opb_select_in : UInt<1>, flip control_nextpc_select_in : UInt<2>, pc_out : SInt<32>, pc4_out : SInt<32>, rs1_out : SInt<32>, rs2_out : SInt<32>, immediate_out : SInt<32>, func3_out : UInt<3>, func7_out : UInt<1>, rd_select_out : UInt<5>, rs1_select_out : UInt<5>, rs2_select_out : UInt<5>, control_memorywrite_out : UInt<1>, control_memoryread_out : UInt<1>, control_branch_out : UInt<1>, control_registerwrite_out : UInt<1>, control_memorytoregister_out : UInt<1>, control_aluop_out : UInt<3>, control_opa_select_out : UInt<2>, control_opb_select_out : UInt<1>, control_nextpc_select_out : UInt<2>}
    
    reg pc_register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 45:30]
    reg pc4_register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 46:31]
    reg rs1_register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 47:31]
    reg rs2_register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 48:31]
    reg immediate_register : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 49:37]
    reg rd_select_register : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 50:37]
    reg rs1_select_register : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 51:38]
    reg rs2_select_register : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 52:38]
    reg func3_register : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX.scala 53:33]
    reg func7_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 54:33]
    reg control_memorywrite_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 56:47]
    reg control_memoryread_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 57:46]
    reg control_branch_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 58:42]
    reg control_registerwrite_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 59:49]
    reg control_memorytoregister_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 60:52]
    reg control_aluop_register : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX.scala 61:41]
    reg control_opa_select_register : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX.scala 62:46]
    reg control_opb_select_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 63:46]
    reg control_nextpc_select_register : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 64:49]
    pc_register <= io.pc_in @[ID_EX.scala 67:17]
    pc4_register <= io.pc4_in @[ID_EX.scala 68:18]
    rs1_register <= io.rs1_in @[ID_EX.scala 69:18]
    rs2_register <= io.rs2_in @[ID_EX.scala 70:18]
    immediate_register <= io.immediate_in @[ID_EX.scala 71:24]
    rd_select_register <= io.rd_select_in @[ID_EX.scala 72:24]
    rs1_select_register <= io.rs1_select_in @[ID_EX.scala 73:25]
    rs2_select_register <= io.rs2_select_in @[ID_EX.scala 74:25]
    func3_register <= io.func3_in @[ID_EX.scala 75:20]
    func7_register <= io.func7_in @[ID_EX.scala 76:20]
    control_memorywrite_register <= io.control_memorywrite_in @[ID_EX.scala 78:34]
    control_memoryread_register <= io.control_memoryread_in @[ID_EX.scala 79:33]
    control_branch_register <= io.control_branch_in @[ID_EX.scala 80:29]
    control_registerwrite_register <= io.control_registerwrite_in @[ID_EX.scala 81:36]
    control_memorytoregister_register <= io.control_memorytoregister_in @[ID_EX.scala 82:39]
    control_aluop_register <= io.control_aluop_in @[ID_EX.scala 83:28]
    control_opa_select_register <= io.control_opa_select_in @[ID_EX.scala 84:33]
    control_opb_select_register <= io.control_opb_select_in @[ID_EX.scala 85:33]
    control_nextpc_select_register <= io.control_nextpc_select_in @[ID_EX.scala 86:36]
    io.pc_out <= pc_register @[ID_EX.scala 88:15]
    io.pc4_out <= pc4_register @[ID_EX.scala 89:16]
    io.rs1_out <= rs1_register @[ID_EX.scala 90:16]
    io.rs2_out <= rs2_register @[ID_EX.scala 91:16]
    io.immediate_out <= immediate_register @[ID_EX.scala 92:22]
    io.rd_select_out <= rd_select_register @[ID_EX.scala 93:22]
    io.rs1_select_out <= rs1_select_register @[ID_EX.scala 94:23]
    io.rs2_select_out <= rs2_select_register @[ID_EX.scala 95:23]
    io.func3_out <= func3_register @[ID_EX.scala 96:18]
    io.func7_out <= func7_register @[ID_EX.scala 97:18]
    io.control_memorywrite_out <= control_memorywrite_register @[ID_EX.scala 99:32]
    io.control_memoryread_out <= control_memoryread_register @[ID_EX.scala 100:31]
    io.control_branch_out <= control_branch_register @[ID_EX.scala 101:27]
    io.control_registerwrite_out <= control_registerwrite_register @[ID_EX.scala 102:34]
    io.control_memorytoregister_out <= control_memorytoregister_register @[ID_EX.scala 103:37]
    io.control_aluop_out <= control_aluop_register @[ID_EX.scala 104:26]
    io.control_opa_select_out <= control_opa_select_register @[ID_EX.scala 105:31]
    io.control_opb_select_out <= control_opb_select_register @[ID_EX.scala 106:31]
    io.control_nextpc_select_out <= control_nextpc_select_register @[ID_EX.scala 107:34]
    
  module EX_MEM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memorywrite : UInt<1>, flip memoryread : UInt<1>, flip registerwrite : UInt<1>, flip memorytoregister : UInt<1>, flip rs2_in : SInt<32>, flip rd_select : UInt<5>, flip rs2_select : UInt<5>, flip alu_out_in : SInt<32>, memorywrite_out : UInt<1>, memoryread_out : UInt<1>, registerwrite_out : UInt<1>, memorytoregister_out : UInt<1>, rs2_out : SInt<32>, rd_select_out : UInt<5>, rs2_select_out : UInt<5>, alu_out : SInt<32>}
    
    reg register_memorywrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 27:43]
    register_memorywrite <= io.memorywrite @[EX_MEM.scala 28:30]
    io.memorywrite_out <= register_memorywrite @[EX_MEM.scala 29:28]
    reg register_memoryread : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 31:42]
    register_memoryread <= io.memoryread @[EX_MEM.scala 32:29]
    io.memoryread_out <= register_memoryread @[EX_MEM.scala 33:27]
    reg register_registerwrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 35:45]
    register_registerwrite <= io.registerwrite @[EX_MEM.scala 36:32]
    io.registerwrite_out <= register_registerwrite @[EX_MEM.scala 37:30]
    reg register_memorytoregister : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 39:48]
    register_memorytoregister <= io.memorytoregister @[EX_MEM.scala 40:35]
    io.memorytoregister_out <= register_memorytoregister @[EX_MEM.scala 41:33]
    reg register_rs2 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 43:35]
    register_rs2 <= io.rs2_in @[EX_MEM.scala 44:22]
    io.rs2_out <= register_rs2 @[EX_MEM.scala 45:20]
    reg register_rd_select : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM.scala 47:41]
    register_rd_select <= io.rd_select @[EX_MEM.scala 48:28]
    io.rd_select_out <= register_rd_select @[EX_MEM.scala 49:26]
    reg register_rs2_select : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM.scala 51:42]
    register_rs2_select <= io.rs2_select @[EX_MEM.scala 52:29]
    io.rs2_select_out <= register_rs2_select @[EX_MEM.scala 53:27]
    reg register_alu_out : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 55:39]
    register_alu_out <= io.alu_out_in @[EX_MEM.scala 56:26]
    io.alu_out <= register_alu_out @[EX_MEM.scala 57:20]
    
  module MEM_WB : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip registerwrite : UInt<1>, flip memorytoregister : UInt<1>, flip rd_select : UInt<5>, flip memoryread : UInt<1>, flip datamemory_data_in : SInt<32>, flip alu_out_in : SInt<32>, registerwrite_out : UInt<1>, memorytoregister_out : UInt<1>, memoryread_out : UInt<1>, rd_select_out : UInt<5>, datamemory_data_out : SInt<32>, alu_out : SInt<32>}
    
    reg register_registerwrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 21:41]
    register_registerwrite <= io.registerwrite @[MEM_WB.scala 22:28]
    io.registerwrite_out <= register_registerwrite @[MEM_WB.scala 23:26]
    reg register_memorytoregister : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 25:44]
    register_memorytoregister <= io.memorytoregister @[MEM_WB.scala 26:31]
    io.memorytoregister_out <= register_memorytoregister @[MEM_WB.scala 27:29]
    reg register_memoryread : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 29:38]
    register_memoryread <= io.memoryread @[MEM_WB.scala 30:25]
    io.memoryread_out <= register_memoryread @[MEM_WB.scala 31:23]
    reg register_rd_select : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_WB.scala 33:37]
    register_rd_select <= io.rd_select @[MEM_WB.scala 34:24]
    io.rd_select_out <= register_rd_select @[MEM_WB.scala 35:22]
    reg register_datamemory_data : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 37:43]
    register_datamemory_data <= io.datamemory_data_in @[MEM_WB.scala 38:30]
    io.datamemory_data_out <= register_datamemory_data @[MEM_WB.scala 39:28]
    reg register_alu : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 41:31]
    register_alu <= io.alu_out_in @[MEM_WB.scala 42:18]
    io.alu_out <= register_alu @[MEM_WB.scala 43:16]
    
  module forward_unit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip EX_MEM_registerrd : UInt<5>, flip MEM_WB_registerrd : UInt<5>, flip ID_EX_registerrs1 : UInt<5>, flip ID_EX_registerrs2 : UInt<5>, flip EX_MEM_registerwrite : UInt<1>, flip MEM_WB_registerwrite : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[forward_unit.scala 14:22]
    io.forward_b <= UInt<1>("h00") @[forward_unit.scala 15:22]
    node _T_24 = eq(io.EX_MEM_registerwrite, UInt<1>("h01")) @[forward_unit.scala 17:35]
    node _T_26 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[forward_unit.scala 17:72]
    node _T_27 = and(_T_24, _T_26) @[forward_unit.scala 17:47]
    node _T_28 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs1) @[forward_unit.scala 17:113]
    node _T_29 = and(_T_27, _T_28) @[forward_unit.scala 17:88]
    node _T_30 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs2) @[forward_unit.scala 17:164]
    node _T_31 = and(_T_29, _T_30) @[forward_unit.scala 17:139]
    when _T_31 : @[forward_unit.scala 17:191]
      io.forward_a <= UInt<1>("h01") @[forward_unit.scala 20:22]
      io.forward_b <= UInt<1>("h01") @[forward_unit.scala 21:22]
      skip @[forward_unit.scala 17:191]
    else : @[forward_unit.scala 22:143]
      node _T_35 = eq(io.EX_MEM_registerwrite, UInt<1>("h01")) @[forward_unit.scala 22:41]
      node _T_37 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[forward_unit.scala 22:76]
      node _T_38 = and(_T_35, _T_37) @[forward_unit.scala 22:52]
      node _T_39 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs2) @[forward_unit.scala 22:116]
      node _T_40 = and(_T_38, _T_39) @[forward_unit.scala 22:91]
      when _T_40 : @[forward_unit.scala 22:143]
        io.forward_b <= UInt<1>("h01") @[forward_unit.scala 23:22]
        skip @[forward_unit.scala 22:143]
      else : @[forward_unit.scala 25:143]
        node _T_43 = eq(io.EX_MEM_registerwrite, UInt<1>("h01")) @[forward_unit.scala 25:41]
        node _T_45 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[forward_unit.scala 25:76]
        node _T_46 = and(_T_43, _T_45) @[forward_unit.scala 25:52]
        node _T_47 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs1) @[forward_unit.scala 25:116]
        node _T_48 = and(_T_46, _T_47) @[forward_unit.scala 25:91]
        when _T_48 : @[forward_unit.scala 25:143]
          io.forward_a <= UInt<1>("h01") @[forward_unit.scala 26:22]
          skip @[forward_unit.scala 25:143]
    node _T_51 = eq(io.MEM_WB_registerwrite, UInt<1>("h01")) @[forward_unit.scala 31:34]
    node _T_53 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[forward_unit.scala 31:69]
    node _T_54 = and(_T_51, _T_53) @[forward_unit.scala 31:45]
    node _T_56 = eq(io.EX_MEM_registerwrite, UInt<1>("h01")) @[forward_unit.scala 31:114]
    node _T_58 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[forward_unit.scala 31:151]
    node _T_59 = and(_T_56, _T_58) @[forward_unit.scala 31:126]
    node _T_60 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs1) @[forward_unit.scala 31:192]
    node _T_61 = and(_T_59, _T_60) @[forward_unit.scala 31:167]
    node _T_62 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs2) @[forward_unit.scala 31:243]
    node _T_63 = and(_T_61, _T_62) @[forward_unit.scala 31:218]
    node _T_64 = not(_T_63) @[forward_unit.scala 31:87]
    node _T_65 = and(_T_54, _T_64) @[forward_unit.scala 31:84]
    node _T_66 = eq(io.MEM_WB_registerrd, io.ID_EX_registerrs1) @[forward_unit.scala 31:295]
    node _T_67 = and(_T_65, _T_66) @[forward_unit.scala 31:270]
    node _T_68 = eq(io.MEM_WB_registerrd, io.ID_EX_registerrs2) @[forward_unit.scala 31:346]
    node _T_69 = and(_T_67, _T_68) @[forward_unit.scala 31:321]
    when _T_69 : @[forward_unit.scala 31:373]
      io.forward_a <= UInt<1>("h01") @[forward_unit.scala 32:22]
      io.forward_b <= UInt<1>("h01") @[forward_unit.scala 33:22]
      skip @[forward_unit.scala 31:373]
    else : @[forward_unit.scala 34:278]
      node _T_73 = eq(io.MEM_WB_registerwrite, UInt<1>("h01")) @[forward_unit.scala 34:41]
      node _T_75 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[forward_unit.scala 34:76]
      node _T_76 = and(_T_73, _T_75) @[forward_unit.scala 34:52]
      node _T_78 = eq(io.EX_MEM_registerwrite, UInt<1>("h01")) @[forward_unit.scala 34:121]
      node _T_80 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[forward_unit.scala 34:158]
      node _T_81 = and(_T_78, _T_80) @[forward_unit.scala 34:133]
      node _T_82 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs2) @[forward_unit.scala 34:199]
      node _T_83 = and(_T_81, _T_82) @[forward_unit.scala 34:174]
      node _T_84 = not(_T_83) @[forward_unit.scala 34:94]
      node _T_85 = and(_T_76, _T_84) @[forward_unit.scala 34:91]
      node _T_86 = eq(io.MEM_WB_registerrd, io.ID_EX_registerrs2) @[forward_unit.scala 34:251]
      node _T_87 = and(_T_85, _T_86) @[forward_unit.scala 34:226]
      when _T_87 : @[forward_unit.scala 34:278]
        io.forward_b <= UInt<1>("h01") @[forward_unit.scala 35:22]
        skip @[forward_unit.scala 34:278]
      else : @[forward_unit.scala 37:279]
        node _T_90 = eq(io.MEM_WB_registerwrite, UInt<1>("h01")) @[forward_unit.scala 37:41]
        node _T_92 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[forward_unit.scala 37:76]
        node _T_93 = and(_T_90, _T_92) @[forward_unit.scala 37:52]
        node _T_95 = eq(io.EX_MEM_registerwrite, UInt<1>("h01")) @[forward_unit.scala 37:121]
        node _T_97 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[forward_unit.scala 37:158]
        node _T_98 = and(_T_95, _T_97) @[forward_unit.scala 37:133]
        node _T_99 = eq(io.EX_MEM_registerrd, io.ID_EX_registerrs2) @[forward_unit.scala 37:199]
        node _T_100 = and(_T_98, _T_99) @[forward_unit.scala 37:174]
        node _T_101 = not(_T_100) @[forward_unit.scala 37:94]
        node _T_102 = and(_T_93, _T_101) @[forward_unit.scala 37:91]
        node _T_103 = eq(io.MEM_WB_registerrd, io.ID_EX_registerrs1) @[forward_unit.scala 37:252]
        node _T_104 = and(_T_102, _T_103) @[forward_unit.scala 37:227]
        when _T_104 : @[forward_unit.scala 37:279]
          io.forward_a <= UInt<1>("h01") @[forward_unit.scala 38:22]
          skip @[forward_unit.scala 37:279]
    
  module hazard_detection : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : SInt<32>, flip current_pc : SInt<32>, flip ID_EX_memoryread : UInt<1>, flip IF_ID_instruction : UInt<32>, flip ID_EX_registerrd : UInt<5>, instruction_forward : UInt<1>, pc_forward : UInt<1>, control_forward : UInt<1>, instruction_out : UInt<32>, pc_out : SInt<32>, current_pc_out : SInt<32>}
    
    node rs1_sel = bits(io.IF_ID_instruction, 19, 15) @[hazard_detection.scala 18:37]
    node rs2_sel = bits(io.IF_ID_instruction, 24, 20) @[hazard_detection.scala 19:37]
    node _T_28 = eq(io.ID_EX_memoryread, UInt<1>("h01")) @[hazard_detection.scala 20:28]
    node _T_29 = eq(io.ID_EX_registerrd, rs1_sel) @[hazard_detection.scala 20:64]
    node _T_30 = eq(io.ID_EX_registerrd, rs2_sel) @[hazard_detection.scala 20:101]
    node _T_31 = or(_T_29, _T_30) @[hazard_detection.scala 20:77]
    node _T_32 = and(_T_28, _T_31) @[hazard_detection.scala 20:39]
    when _T_32 : @[hazard_detection.scala 20:116]
      io.instruction_forward <= UInt<1>("h01") @[hazard_detection.scala 21:30]
      io.pc_forward <= UInt<1>("h01") @[hazard_detection.scala 22:21]
      io.control_forward <= UInt<1>("h01") @[hazard_detection.scala 23:26]
      io.instruction_out <= io.IF_ID_instruction @[hazard_detection.scala 24:26]
      io.pc_out <= io.pc_in @[hazard_detection.scala 25:17]
      io.current_pc_out <= io.current_pc @[hazard_detection.scala 26:25]
      skip @[hazard_detection.scala 20:116]
    else : @[hazard_detection.scala 28:16]
      io.instruction_forward <= UInt<1>("h00") @[hazard_detection.scala 29:28]
      io.pc_forward <= UInt<1>("h00") @[hazard_detection.scala 30:19]
      io.control_forward <= UInt<1>("h00") @[hazard_detection.scala 31:24]
      io.instruction_out <= io.IF_ID_instruction @[hazard_detection.scala 32:24]
      io.pc_out <= io.pc_in @[hazard_detection.scala 33:15]
      io.current_pc_out <= io.current_pc @[hazard_detection.scala 34:23]
      skip @[hazard_detection.scala 28:16]
    
  module branch_logic : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1 : SInt<32>, flip rs2 : SInt<32>, flip func3 : UInt<3>, output : UInt<1>}
    
    node _T_14 = eq(io.func3, UInt<1>("h00")) @[branch_logic.scala 11:17]
    when _T_14 : @[branch_logic.scala 11:31]
      node _T_15 = eq(io.rs1, io.rs2) @[branch_logic.scala 13:17]
      when _T_15 : @[branch_logic.scala 13:29]
        io.output <= UInt<1>("h01") @[branch_logic.scala 14:17]
        skip @[branch_logic.scala 13:29]
      else : @[branch_logic.scala 15:18]
        io.output <= UInt<1>("h00") @[branch_logic.scala 16:17]
        skip @[branch_logic.scala 15:18]
      skip @[branch_logic.scala 11:31]
    else : @[branch_logic.scala 18:38]
      node _T_19 = eq(io.func3, UInt<1>("h01")) @[branch_logic.scala 18:24]
      when _T_19 : @[branch_logic.scala 18:38]
        node _T_20 = neq(io.rs1, io.rs2) @[branch_logic.scala 20:17]
        when _T_20 : @[branch_logic.scala 20:29]
          io.output <= UInt<1>("h01") @[branch_logic.scala 21:17]
          skip @[branch_logic.scala 20:29]
        else : @[branch_logic.scala 22:18]
          io.output <= UInt<1>("h00") @[branch_logic.scala 23:17]
          skip @[branch_logic.scala 22:18]
        skip @[branch_logic.scala 18:38]
      else : @[branch_logic.scala 25:38]
        node _T_24 = eq(io.func3, UInt<3>("h04")) @[branch_logic.scala 25:24]
        when _T_24 : @[branch_logic.scala 25:38]
          node _T_25 = lt(io.rs1, io.rs2) @[branch_logic.scala 27:17]
          when _T_25 : @[branch_logic.scala 27:27]
            io.output <= UInt<1>("h01") @[branch_logic.scala 28:17]
            skip @[branch_logic.scala 27:27]
          else : @[branch_logic.scala 29:18]
            io.output <= UInt<1>("h00") @[branch_logic.scala 30:17]
            skip @[branch_logic.scala 29:18]
          skip @[branch_logic.scala 25:38]
        else : @[branch_logic.scala 32:38]
          node _T_29 = eq(io.func3, UInt<3>("h05")) @[branch_logic.scala 32:24]
          when _T_29 : @[branch_logic.scala 32:38]
            node _T_30 = geq(io.rs1, io.rs2) @[branch_logic.scala 34:17]
            when _T_30 : @[branch_logic.scala 34:28]
              io.output <= UInt<1>("h01") @[branch_logic.scala 35:17]
              skip @[branch_logic.scala 34:28]
            else : @[branch_logic.scala 36:18]
              io.output <= UInt<1>("h00") @[branch_logic.scala 37:17]
              skip @[branch_logic.scala 36:18]
            skip @[branch_logic.scala 32:38]
          else : @[branch_logic.scala 39:38]
            node _T_34 = eq(io.func3, UInt<3>("h06")) @[branch_logic.scala 39:24]
            when _T_34 : @[branch_logic.scala 39:38]
              node _T_35 = asUInt(io.rs1) @[branch_logic.scala 41:17]
              node _T_36 = asUInt(io.rs2) @[branch_logic.scala 41:33]
              node _T_37 = lt(_T_35, _T_36) @[branch_logic.scala 41:24]
              when _T_37 : @[branch_logic.scala 41:41]
                io.output <= UInt<1>("h01") @[branch_logic.scala 42:17]
                skip @[branch_logic.scala 41:41]
              else : @[branch_logic.scala 43:18]
                io.output <= UInt<1>("h00") @[branch_logic.scala 44:17]
                skip @[branch_logic.scala 43:18]
              skip @[branch_logic.scala 39:38]
            else : @[branch_logic.scala 46:38]
              node _T_41 = eq(io.func3, UInt<3>("h07")) @[branch_logic.scala 46:24]
              when _T_41 : @[branch_logic.scala 46:38]
                node _T_42 = asUInt(io.rs1) @[branch_logic.scala 48:17]
                node _T_43 = asUInt(io.rs2) @[branch_logic.scala 48:34]
                node _T_44 = geq(_T_42, _T_43) @[branch_logic.scala 48:24]
                when _T_44 : @[branch_logic.scala 48:42]
                  io.output <= UInt<1>("h01") @[branch_logic.scala 49:17]
                  skip @[branch_logic.scala 48:42]
                else : @[branch_logic.scala 50:18]
                  io.output <= UInt<1>("h00") @[branch_logic.scala 51:17]
                  skip @[branch_logic.scala 50:18]
                skip @[branch_logic.scala 46:38]
              else : @[branch_logic.scala 53:16]
                io.output <= UInt<1>("h00") @[branch_logic.scala 54:15]
                skip @[branch_logic.scala 53:16]
    
  module branch_forward : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ID_EX_registerrd : UInt<5>, flip ID_EX_memoryread : UInt<1>, flip EX_MEM_registerrd : UInt<5>, flip EX_MEM_memoryread : UInt<1>, flip MEM_WB_registerrd : UInt<5>, flip MEM_WB_memoryread : UInt<1>, flip rs1_select : UInt<5>, flip rs2_select : UInt<5>, flip control_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[branch_forward.scala 18:20]
    io.forward_rs2 <= UInt<1>("h00") @[branch_forward.scala 19:20]
    node _T_30 = eq(io.control_branch, UInt<1>("h01")) @[branch_forward.scala 24:28]
    when _T_30 : @[branch_forward.scala 24:37]
      node _T_32 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 26:32]
      node _T_34 = neq(io.ID_EX_memoryread, UInt<1>("h01")) @[branch_forward.scala 26:70]
      node _T_35 = and(_T_32, _T_34) @[branch_forward.scala 26:47]
      node _T_36 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 26:102]
      node _T_37 = and(_T_35, _T_36) @[branch_forward.scala 26:78]
      node _T_38 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 26:145]
      node _T_39 = and(_T_37, _T_38) @[branch_forward.scala 26:121]
      when _T_39 : @[branch_forward.scala 26:165]
        io.forward_rs1 <= UInt<1>("h01") @[branch_forward.scala 27:24]
        io.forward_rs2 <= UInt<1>("h01") @[branch_forward.scala 28:24]
        skip @[branch_forward.scala 26:165]
      else : @[branch_forward.scala 29:129]
        node _T_43 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 29:39]
        node _T_45 = neq(io.ID_EX_memoryread, UInt<1>("h01")) @[branch_forward.scala 29:77]
        node _T_46 = and(_T_43, _T_45) @[branch_forward.scala 29:54]
        node _T_47 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 29:109]
        node _T_48 = and(_T_46, _T_47) @[branch_forward.scala 29:85]
        when _T_48 : @[branch_forward.scala 29:129]
          io.forward_rs1 <= UInt<1>("h01") @[branch_forward.scala 30:24]
          skip @[branch_forward.scala 29:129]
        else : @[branch_forward.scala 31:129]
          node _T_51 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 31:39]
          node _T_53 = neq(io.ID_EX_memoryread, UInt<1>("h01")) @[branch_forward.scala 31:77]
          node _T_54 = and(_T_51, _T_53) @[branch_forward.scala 31:54]
          node _T_55 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 31:109]
          node _T_56 = and(_T_54, _T_55) @[branch_forward.scala 31:85]
          when _T_56 : @[branch_forward.scala 31:129]
            io.forward_rs2 <= UInt<1>("h01") @[branch_forward.scala 32:24]
            skip @[branch_forward.scala 31:129]
      node _T_59 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 36:33]
      node _T_61 = neq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 36:72]
      node _T_62 = and(_T_59, _T_61) @[branch_forward.scala 36:48]
      node _T_64 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 37:32]
      node _T_65 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 37:72]
      node _T_66 = and(_T_64, _T_65) @[branch_forward.scala 37:48]
      node _T_67 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 37:115]
      node _T_68 = and(_T_66, _T_67) @[branch_forward.scala 37:91]
      node _T_69 = not(_T_68) @[branch_forward.scala 37:9]
      node _T_70 = and(_T_62, _T_69) @[branch_forward.scala 36:80]
      node _T_71 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 38:31]
      node _T_72 = and(_T_70, _T_71) @[branch_forward.scala 37:135]
      node _T_73 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 38:75]
      node _T_74 = and(_T_72, _T_73) @[branch_forward.scala 38:50]
      when _T_74 : @[branch_forward.scala 38:95]
        io.forward_rs1 <= UInt<2>("h02") @[branch_forward.scala 40:24]
        io.forward_rs2 <= UInt<2>("h02") @[branch_forward.scala 41:24]
        skip @[branch_forward.scala 38:95]
      else : @[branch_forward.scala 45:51]
        node _T_78 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 43:40]
        node _T_80 = neq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 43:79]
        node _T_81 = and(_T_78, _T_80) @[branch_forward.scala 43:55]
        node _T_83 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 44:32]
        node _T_84 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 44:72]
        node _T_85 = and(_T_83, _T_84) @[branch_forward.scala 44:48]
        node _T_86 = not(_T_85) @[branch_forward.scala 44:9]
        node _T_87 = and(_T_81, _T_86) @[branch_forward.scala 43:87]
        node _T_88 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 45:31]
        node _T_89 = and(_T_87, _T_88) @[branch_forward.scala 44:92]
        when _T_89 : @[branch_forward.scala 45:51]
          io.forward_rs2 <= UInt<2>("h02") @[branch_forward.scala 47:24]
          skip @[branch_forward.scala 45:51]
        else : @[branch_forward.scala 51:51]
          node _T_92 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 49:40]
          node _T_94 = neq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 49:79]
          node _T_95 = and(_T_92, _T_94) @[branch_forward.scala 49:55]
          node _T_97 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 50:32]
          node _T_98 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 50:72]
          node _T_99 = and(_T_97, _T_98) @[branch_forward.scala 50:48]
          node _T_100 = not(_T_99) @[branch_forward.scala 50:9]
          node _T_101 = and(_T_95, _T_100) @[branch_forward.scala 49:87]
          node _T_102 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 51:31]
          node _T_103 = and(_T_101, _T_102) @[branch_forward.scala 50:92]
          when _T_103 : @[branch_forward.scala 51:51]
            io.forward_rs1 <= UInt<2>("h02") @[branch_forward.scala 53:24]
            skip @[branch_forward.scala 51:51]
          else : @[branch_forward.scala 58:95]
            node _T_106 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 56:40]
            node _T_108 = eq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 56:79]
            node _T_109 = and(_T_106, _T_108) @[branch_forward.scala 56:55]
            node _T_111 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 57:32]
            node _T_112 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 57:72]
            node _T_113 = and(_T_111, _T_112) @[branch_forward.scala 57:48]
            node _T_114 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 57:115]
            node _T_115 = and(_T_113, _T_114) @[branch_forward.scala 57:91]
            node _T_116 = not(_T_115) @[branch_forward.scala 57:9]
            node _T_117 = and(_T_109, _T_116) @[branch_forward.scala 56:87]
            node _T_118 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 58:31]
            node _T_119 = and(_T_117, _T_118) @[branch_forward.scala 57:135]
            node _T_120 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 58:75]
            node _T_121 = and(_T_119, _T_120) @[branch_forward.scala 58:50]
            when _T_121 : @[branch_forward.scala 58:95]
              io.forward_rs1 <= UInt<3>("h04") @[branch_forward.scala 59:24]
              io.forward_rs2 <= UInt<3>("h04") @[branch_forward.scala 60:24]
              skip @[branch_forward.scala 58:95]
            else : @[branch_forward.scala 64:51]
              node _T_125 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 62:40]
              node _T_127 = eq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 62:79]
              node _T_128 = and(_T_125, _T_127) @[branch_forward.scala 62:55]
              node _T_130 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 63:32]
              node _T_131 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 63:72]
              node _T_132 = and(_T_130, _T_131) @[branch_forward.scala 63:48]
              node _T_133 = not(_T_132) @[branch_forward.scala 63:9]
              node _T_134 = and(_T_128, _T_133) @[branch_forward.scala 62:87]
              node _T_135 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 64:31]
              node _T_136 = and(_T_134, _T_135) @[branch_forward.scala 63:92]
              when _T_136 : @[branch_forward.scala 64:51]
                io.forward_rs2 <= UInt<3>("h04") @[branch_forward.scala 66:24]
                skip @[branch_forward.scala 64:51]
              else : @[branch_forward.scala 70:51]
                node _T_139 = eq(io.control_branch, UInt<1>("h01")) @[branch_forward.scala 68:37]
                node _T_141 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 68:69]
                node _T_142 = and(_T_139, _T_141) @[branch_forward.scala 68:45]
                node _T_144 = eq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 68:108]
                node _T_145 = and(_T_142, _T_144) @[branch_forward.scala 68:84]
                node _T_147 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 69:32]
                node _T_148 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 69:72]
                node _T_149 = and(_T_147, _T_148) @[branch_forward.scala 69:48]
                node _T_150 = not(_T_149) @[branch_forward.scala 69:9]
                node _T_151 = and(_T_145, _T_150) @[branch_forward.scala 68:116]
                node _T_152 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 70:31]
                node _T_153 = and(_T_151, _T_152) @[branch_forward.scala 69:92]
                when _T_153 : @[branch_forward.scala 70:51]
                  io.forward_rs1 <= UInt<3>("h04") @[branch_forward.scala 72:24]
                  skip @[branch_forward.scala 70:51]
      node _T_156 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 77:33]
      node _T_158 = neq(io.MEM_WB_memoryread, UInt<1>("h01")) @[branch_forward.scala 77:72]
      node _T_159 = and(_T_156, _T_158) @[branch_forward.scala 77:48]
      node _T_161 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 79:32]
      node _T_162 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 79:72]
      node _T_163 = and(_T_161, _T_162) @[branch_forward.scala 79:48]
      node _T_164 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 79:115]
      node _T_165 = and(_T_163, _T_164) @[branch_forward.scala 79:91]
      node _T_166 = not(_T_165) @[branch_forward.scala 79:9]
      node _T_167 = and(_T_159, _T_166) @[branch_forward.scala 77:80]
      node _T_169 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 81:33]
      node _T_170 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 81:74]
      node _T_171 = and(_T_169, _T_170) @[branch_forward.scala 81:49]
      node _T_172 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 81:118]
      node _T_173 = and(_T_171, _T_172) @[branch_forward.scala 81:93]
      node _T_174 = not(_T_173) @[branch_forward.scala 81:9]
      node _T_175 = and(_T_167, _T_174) @[branch_forward.scala 79:135]
      node _T_176 = eq(io.MEM_WB_registerrd, io.rs1_select) @[branch_forward.scala 82:31]
      node _T_177 = and(_T_175, _T_176) @[branch_forward.scala 81:138]
      node _T_178 = eq(io.MEM_WB_registerrd, io.rs2_select) @[branch_forward.scala 82:75]
      node _T_179 = and(_T_177, _T_178) @[branch_forward.scala 82:50]
      when _T_179 : @[branch_forward.scala 82:95]
        io.forward_rs1 <= UInt<2>("h03") @[branch_forward.scala 84:24]
        io.forward_rs2 <= UInt<2>("h03") @[branch_forward.scala 85:24]
        skip @[branch_forward.scala 82:95]
      else : @[branch_forward.scala 93:53]
        node _T_183 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 88:40]
        node _T_185 = neq(io.MEM_WB_memoryread, UInt<1>("h01")) @[branch_forward.scala 88:79]
        node _T_186 = and(_T_183, _T_185) @[branch_forward.scala 88:55]
        node _T_188 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 90:34]
        node _T_189 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 90:74]
        node _T_190 = and(_T_188, _T_189) @[branch_forward.scala 90:50]
        node _T_191 = not(_T_190) @[branch_forward.scala 90:11]
        node _T_192 = and(_T_186, _T_191) @[branch_forward.scala 88:87]
        node _T_194 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 92:35]
        node _T_195 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 92:76]
        node _T_196 = and(_T_194, _T_195) @[branch_forward.scala 92:51]
        node _T_197 = not(_T_196) @[branch_forward.scala 92:11]
        node _T_198 = and(_T_192, _T_197) @[branch_forward.scala 90:94]
        node _T_199 = eq(io.MEM_WB_registerrd, io.rs2_select) @[branch_forward.scala 93:33]
        node _T_200 = and(_T_198, _T_199) @[branch_forward.scala 92:96]
        when _T_200 : @[branch_forward.scala 93:53]
          io.forward_rs2 <= UInt<2>("h03") @[branch_forward.scala 95:26]
          skip @[branch_forward.scala 93:53]
        else : @[branch_forward.scala 103:53]
          node _T_203 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 98:40]
          node _T_205 = neq(io.MEM_WB_memoryread, UInt<1>("h01")) @[branch_forward.scala 98:79]
          node _T_206 = and(_T_203, _T_205) @[branch_forward.scala 98:55]
          node _T_208 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 100:34]
          node _T_209 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 100:74]
          node _T_210 = and(_T_208, _T_209) @[branch_forward.scala 100:50]
          node _T_211 = not(_T_210) @[branch_forward.scala 100:11]
          node _T_212 = and(_T_206, _T_211) @[branch_forward.scala 98:87]
          node _T_214 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 102:35]
          node _T_215 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 102:76]
          node _T_216 = and(_T_214, _T_215) @[branch_forward.scala 102:51]
          node _T_217 = not(_T_216) @[branch_forward.scala 102:11]
          node _T_218 = and(_T_212, _T_217) @[branch_forward.scala 100:94]
          node _T_219 = eq(io.MEM_WB_registerrd, io.rs1_select) @[branch_forward.scala 103:33]
          node _T_220 = and(_T_218, _T_219) @[branch_forward.scala 102:96]
          when _T_220 : @[branch_forward.scala 103:53]
            io.forward_rs1 <= UInt<2>("h03") @[branch_forward.scala 105:26]
            skip @[branch_forward.scala 103:53]
          else : @[branch_forward.scala 112:95]
            node _T_223 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 107:42]
            node _T_225 = eq(io.MEM_WB_memoryread, UInt<1>("h01")) @[branch_forward.scala 107:81]
            node _T_226 = and(_T_223, _T_225) @[branch_forward.scala 107:57]
            node _T_228 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 109:32]
            node _T_229 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 109:72]
            node _T_230 = and(_T_228, _T_229) @[branch_forward.scala 109:48]
            node _T_231 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 109:115]
            node _T_232 = and(_T_230, _T_231) @[branch_forward.scala 109:91]
            node _T_233 = not(_T_232) @[branch_forward.scala 109:9]
            node _T_234 = and(_T_226, _T_233) @[branch_forward.scala 107:89]
            node _T_236 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 111:33]
            node _T_237 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 111:74]
            node _T_238 = and(_T_236, _T_237) @[branch_forward.scala 111:49]
            node _T_239 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 111:118]
            node _T_240 = and(_T_238, _T_239) @[branch_forward.scala 111:93]
            node _T_241 = not(_T_240) @[branch_forward.scala 111:9]
            node _T_242 = and(_T_234, _T_241) @[branch_forward.scala 109:135]
            node _T_243 = eq(io.MEM_WB_registerrd, io.rs1_select) @[branch_forward.scala 112:31]
            node _T_244 = and(_T_242, _T_243) @[branch_forward.scala 111:138]
            node _T_245 = eq(io.MEM_WB_registerrd, io.rs2_select) @[branch_forward.scala 112:75]
            node _T_246 = and(_T_244, _T_245) @[branch_forward.scala 112:50]
            when _T_246 : @[branch_forward.scala 112:95]
              io.forward_rs1 <= UInt<3>("h05") @[branch_forward.scala 114:24]
              io.forward_rs2 <= UInt<3>("h05") @[branch_forward.scala 115:24]
              skip @[branch_forward.scala 112:95]
            else : @[branch_forward.scala 123:53]
              node _T_250 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 118:40]
              node _T_252 = eq(io.MEM_WB_memoryread, UInt<1>("h01")) @[branch_forward.scala 118:79]
              node _T_253 = and(_T_250, _T_252) @[branch_forward.scala 118:55]
              node _T_255 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 120:34]
              node _T_256 = eq(io.ID_EX_registerrd, io.rs2_select) @[branch_forward.scala 120:74]
              node _T_257 = and(_T_255, _T_256) @[branch_forward.scala 120:50]
              node _T_258 = not(_T_257) @[branch_forward.scala 120:11]
              node _T_259 = and(_T_253, _T_258) @[branch_forward.scala 118:87]
              node _T_261 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 122:35]
              node _T_262 = eq(io.EX_MEM_registerrd, io.rs2_select) @[branch_forward.scala 122:76]
              node _T_263 = and(_T_261, _T_262) @[branch_forward.scala 122:51]
              node _T_264 = not(_T_263) @[branch_forward.scala 122:11]
              node _T_265 = and(_T_259, _T_264) @[branch_forward.scala 120:94]
              node _T_266 = eq(io.MEM_WB_registerrd, io.rs2_select) @[branch_forward.scala 123:33]
              node _T_267 = and(_T_265, _T_266) @[branch_forward.scala 122:96]
              when _T_267 : @[branch_forward.scala 123:53]
                io.forward_rs2 <= UInt<3>("h05") @[branch_forward.scala 125:26]
                skip @[branch_forward.scala 123:53]
              else : @[branch_forward.scala 133:53]
                node _T_270 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 128:40]
                node _T_272 = eq(io.MEM_WB_memoryread, UInt<1>("h01")) @[branch_forward.scala 128:79]
                node _T_273 = and(_T_270, _T_272) @[branch_forward.scala 128:55]
                node _T_275 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 130:34]
                node _T_276 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 130:74]
                node _T_277 = and(_T_275, _T_276) @[branch_forward.scala 130:50]
                node _T_278 = not(_T_277) @[branch_forward.scala 130:11]
                node _T_279 = and(_T_273, _T_278) @[branch_forward.scala 128:87]
                node _T_281 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 132:35]
                node _T_282 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 132:76]
                node _T_283 = and(_T_281, _T_282) @[branch_forward.scala 132:51]
                node _T_284 = not(_T_283) @[branch_forward.scala 132:11]
                node _T_285 = and(_T_279, _T_284) @[branch_forward.scala 130:94]
                node _T_286 = eq(io.MEM_WB_registerrd, io.rs1_select) @[branch_forward.scala 133:33]
                node _T_287 = and(_T_285, _T_286) @[branch_forward.scala 132:95]
                when _T_287 : @[branch_forward.scala 133:53]
                  io.forward_rs1 <= UInt<3>("h05") @[branch_forward.scala 135:26]
                  skip @[branch_forward.scala 133:53]
      skip @[branch_forward.scala 24:37]
    else : @[branch_forward.scala 143:44]
      node _T_290 = eq(io.control_branch, UInt<1>("h00")) @[branch_forward.scala 143:35]
      when _T_290 : @[branch_forward.scala 143:44]
        node _T_292 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 145:42]
        node _T_294 = neq(io.ID_EX_memoryread, UInt<1>("h01")) @[branch_forward.scala 145:80]
        node _T_295 = and(_T_292, _T_294) @[branch_forward.scala 145:57]
        node _T_296 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 145:112]
        node _T_297 = and(_T_295, _T_296) @[branch_forward.scala 145:88]
        when _T_297 : @[branch_forward.scala 145:131]
          io.forward_rs1 <= UInt<3>("h06") @[branch_forward.scala 146:34]
          skip @[branch_forward.scala 145:131]
        node _T_300 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 150:43]
        node _T_302 = neq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 150:82]
        node _T_303 = and(_T_300, _T_302) @[branch_forward.scala 150:58]
        node _T_305 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 151:42]
        node _T_306 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 151:82]
        node _T_307 = and(_T_305, _T_306) @[branch_forward.scala 151:58]
        node _T_308 = not(_T_307) @[branch_forward.scala 151:19]
        node _T_309 = and(_T_303, _T_308) @[branch_forward.scala 150:90]
        node _T_310 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 152:41]
        node _T_311 = and(_T_309, _T_310) @[branch_forward.scala 151:102]
        when _T_311 : @[branch_forward.scala 152:61]
          io.forward_rs1 <= UInt<3>("h07") @[branch_forward.scala 153:34]
          skip @[branch_forward.scala 152:61]
        else : @[branch_forward.scala 158:63]
          node _T_314 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 156:49]
          node _T_316 = eq(io.EX_MEM_memoryread, UInt<1>("h01")) @[branch_forward.scala 156:88]
          node _T_317 = and(_T_314, _T_316) @[branch_forward.scala 156:64]
          node _T_319 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 157:44]
          node _T_320 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 157:84]
          node _T_321 = and(_T_319, _T_320) @[branch_forward.scala 157:60]
          node _T_322 = not(_T_321) @[branch_forward.scala 157:21]
          node _T_323 = and(_T_317, _T_322) @[branch_forward.scala 156:96]
          node _T_324 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 158:43]
          node _T_325 = and(_T_323, _T_324) @[branch_forward.scala 157:104]
          when _T_325 : @[branch_forward.scala 158:63]
            io.forward_rs1 <= UInt<4>("h09") @[branch_forward.scala 159:36]
            skip @[branch_forward.scala 158:63]
        node _T_328 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 163:43]
        node _T_330 = neq(io.MEM_WB_memoryread, UInt<1>("h01")) @[branch_forward.scala 163:82]
        node _T_331 = and(_T_328, _T_330) @[branch_forward.scala 163:58]
        node _T_333 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 165:42]
        node _T_334 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 165:82]
        node _T_335 = and(_T_333, _T_334) @[branch_forward.scala 165:58]
        node _T_336 = not(_T_335) @[branch_forward.scala 165:19]
        node _T_337 = and(_T_331, _T_336) @[branch_forward.scala 163:90]
        node _T_339 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 167:43]
        node _T_340 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 167:84]
        node _T_341 = and(_T_339, _T_340) @[branch_forward.scala 167:59]
        node _T_342 = not(_T_341) @[branch_forward.scala 167:19]
        node _T_343 = and(_T_337, _T_342) @[branch_forward.scala 165:102]
        node _T_344 = eq(io.MEM_WB_registerrd, io.rs1_select) @[branch_forward.scala 168:41]
        node _T_345 = and(_T_343, _T_344) @[branch_forward.scala 167:104]
        when _T_345 : @[branch_forward.scala 168:61]
          io.forward_rs1 <= UInt<4>("h08") @[branch_forward.scala 169:34]
          skip @[branch_forward.scala 168:61]
        else : @[branch_forward.scala 177:61]
          node _T_348 = neq(io.MEM_WB_registerrd, UInt<1>("h00")) @[branch_forward.scala 172:49]
          node _T_350 = eq(io.MEM_WB_registerrd, UInt<1>("h01")) @[branch_forward.scala 172:88]
          node _T_351 = and(_T_348, _T_350) @[branch_forward.scala 172:64]
          node _T_353 = neq(io.ID_EX_registerrd, UInt<1>("h00")) @[branch_forward.scala 174:42]
          node _T_354 = eq(io.ID_EX_registerrd, io.rs1_select) @[branch_forward.scala 174:82]
          node _T_355 = and(_T_353, _T_354) @[branch_forward.scala 174:58]
          node _T_356 = not(_T_355) @[branch_forward.scala 174:19]
          node _T_357 = and(_T_351, _T_356) @[branch_forward.scala 172:96]
          node _T_359 = neq(io.EX_MEM_registerrd, UInt<1>("h00")) @[branch_forward.scala 176:43]
          node _T_360 = eq(io.EX_MEM_registerrd, io.rs1_select) @[branch_forward.scala 176:84]
          node _T_361 = and(_T_359, _T_360) @[branch_forward.scala 176:59]
          node _T_362 = not(_T_361) @[branch_forward.scala 176:19]
          node _T_363 = and(_T_357, _T_362) @[branch_forward.scala 174:102]
          node _T_364 = eq(io.MEM_WB_registerrd, io.rs1_select) @[branch_forward.scala 177:41]
          node _T_365 = and(_T_363, _T_364) @[branch_forward.scala 176:104]
          when _T_365 : @[branch_forward.scala 177:61]
            io.forward_rs1 <= UInt<4>("h0a") @[branch_forward.scala 178:34]
            skip @[branch_forward.scala 177:61]
        skip @[branch_forward.scala 143:44]
    
  module top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {reg_out : SInt<32>}
    
    inst control of control @[top.scala 10:25]
    control.clock <= clock
    control.reset <= reset
    inst register_file of register_file @[top.scala 11:31]
    register_file.clock <= clock
    register_file.reset <= reset
    inst alu of alu_module @[top.scala 12:21]
    alu.clock <= clock
    alu.reset <= reset
    inst alu_control of alu_control @[top.scala 13:29]
    alu_control.clock <= clock
    alu_control.reset <= reset
    inst immediate_generation of immediate_generation @[top.scala 14:38]
    immediate_generation.clock <= clock
    immediate_generation.reset <= reset
    inst jalr of jalr @[top.scala 15:22]
    jalr.clock <= clock
    jalr.reset <= reset
    inst pc of pc @[top.scala 16:20]
    pc.clock <= clock
    pc.reset <= reset
    inst instruction_memory of instruction_memory @[top.scala 17:36]
    instruction_memory.clock <= clock
    instruction_memory.reset <= reset
    inst data_memory of data_memory @[top.scala 18:29]
    data_memory.clock <= clock
    data_memory.reset <= reset
    inst IF_ID of IF_ID @[top.scala 19:23]
    IF_ID.clock <= clock
    IF_ID.reset <= reset
    inst ID_EX of ID_EX @[top.scala 20:23]
    ID_EX.clock <= clock
    ID_EX.reset <= reset
    inst EX_MEM of EX_MEM @[top.scala 21:24]
    EX_MEM.clock <= clock
    EX_MEM.reset <= reset
    inst MEM_WB of MEM_WB @[top.scala 22:24]
    MEM_WB.clock <= clock
    MEM_WB.reset <= reset
    inst forward_unit of forward_unit @[top.scala 23:30]
    forward_unit.clock <= clock
    forward_unit.reset <= reset
    inst hazard_detection of hazard_detection @[top.scala 24:34]
    hazard_detection.clock <= clock
    hazard_detection.reset <= reset
    inst branch_logic of branch_logic @[top.scala 25:30]
    branch_logic.clock <= clock
    branch_logic.reset <= reset
    inst branch_forward of branch_forward @[top.scala 26:32]
    branch_forward.clock <= clock
    branch_forward.reset <= reset
    node _T_7 = bits(pc.io.out, 11, 2) @[top.scala 31:53]
    instruction_memory.io.write_address <= _T_7 @[top.scala 31:41]
    IF_ID.io.pc_in <= pc.io.out @[top.scala 32:20]
    IF_ID.io.pc4_in <= pc.io.pc4 @[top.scala 33:21]
    hazard_detection.io.IF_ID_instruction <= IF_ID.io.instruction_out @[top.scala 35:44]
    hazard_detection.io.ID_EX_memoryread <= ID_EX.io.control_memoryread_out @[top.scala 36:43]
    hazard_detection.io.ID_EX_registerrd <= ID_EX.io.rd_select_out @[top.scala 37:43]
    hazard_detection.io.pc_in <= IF_ID.io.pc4_out @[top.scala 38:32]
    hazard_detection.io.current_pc <= IF_ID.io.pc_out @[top.scala 39:37]
    node _T_9 = eq(hazard_detection.io.instruction_forward, UInt<1>("h01")) @[top.scala 42:50]
    when _T_9 : @[top.scala 42:62]
      IF_ID.io.instruction_in <= hazard_detection.io.instruction_out @[top.scala 43:31]
      IF_ID.io.pc_in <= hazard_detection.io.current_pc_out @[top.scala 44:22]
      skip @[top.scala 42:62]
    else : @[top.scala 45:18]
      IF_ID.io.instruction_in <= instruction_memory.io.read_data @[top.scala 46:33]
      skip @[top.scala 45:18]
    node _T_11 = eq(hazard_detection.io.pc_forward, UInt<1>("h01")) @[top.scala 51:41]
    when _T_11 : @[top.scala 51:53]
      pc.io.in <= hazard_detection.io.pc_out @[top.scala 52:16]
      skip @[top.scala 51:53]
    else : @[top.scala 53:18]
      node _T_13 = eq(control.io.next_pc_select, UInt<1>("h01")) @[top.scala 55:40]
      when _T_13 : @[top.scala 55:53]
        node _T_15 = eq(branch_logic.io.output, UInt<1>("h01")) @[top.scala 56:39]
        node _T_17 = eq(control.io.branch, UInt<1>("h01")) @[top.scala 56:68]
        node _T_18 = and(_T_15, _T_17) @[top.scala 56:47]
        when _T_18 : @[top.scala 56:77]
          pc.io.in <= immediate_generation.io.sb_immediate @[top.scala 57:22]
          IF_ID.io.pc_in <= asSInt(UInt<1>("h00")) @[top.scala 58:28]
          IF_ID.io.pc4_in <= asSInt(UInt<1>("h00")) @[top.scala 59:29]
          IF_ID.io.instruction_in <= UInt<1>("h00") @[top.scala 60:37]
          skip @[top.scala 56:77]
        else : @[top.scala 61:24]
          pc.io.in <= pc.io.pc4 @[top.scala 62:22]
          skip @[top.scala 61:24]
        skip @[top.scala 55:53]
      else : @[top.scala 65:60]
        node _T_23 = eq(control.io.next_pc_select, UInt<2>("h02")) @[top.scala 65:47]
        when _T_23 : @[top.scala 65:60]
          pc.io.in <= immediate_generation.io.uj_immediate @[top.scala 66:20]
          IF_ID.io.pc_in <= asSInt(UInt<1>("h00")) @[top.scala 67:26]
          IF_ID.io.pc4_in <= asSInt(UInt<1>("h00")) @[top.scala 68:27]
          IF_ID.io.instruction_in <= UInt<1>("h00") @[top.scala 69:35]
          skip @[top.scala 65:60]
        else : @[top.scala 70:60]
          node _T_28 = eq(control.io.next_pc_select, UInt<2>("h03")) @[top.scala 70:47]
          when _T_28 : @[top.scala 70:60]
            pc.io.in <= jalr.io.output @[top.scala 71:20]
            IF_ID.io.pc_in <= asSInt(UInt<1>("h00")) @[top.scala 72:26]
            IF_ID.io.pc4_in <= asSInt(UInt<1>("h00")) @[top.scala 73:27]
            IF_ID.io.instruction_in <= UInt<1>("h00") @[top.scala 74:35]
            skip @[top.scala 70:60]
          else : @[top.scala 76:22]
            pc.io.in <= pc.io.pc4 @[top.scala 77:20]
            skip @[top.scala 76:22]
      skip @[top.scala 53:18]
    ID_EX.io.pc_in <= IF_ID.io.pc_out @[top.scala 84:21]
    ID_EX.io.pc4_in <= IF_ID.io.pc4_out @[top.scala 85:22]
    node _T_32 = bits(IF_ID.io.instruction_out, 14, 12) @[top.scala 86:51]
    ID_EX.io.func3_in <= _T_32 @[top.scala 86:24]
    node _T_33 = bits(IF_ID.io.instruction_out, 30, 30) @[top.scala 87:51]
    ID_EX.io.func7_in <= _T_33 @[top.scala 87:24]
    node _T_34 = bits(IF_ID.io.instruction_out, 11, 7) @[top.scala 88:55]
    ID_EX.io.rd_select_in <= _T_34 @[top.scala 88:28]
    node _T_35 = bits(IF_ID.io.instruction_out, 19, 15) @[top.scala 89:56]
    ID_EX.io.rs1_select_in <= _T_35 @[top.scala 89:29]
    node _T_36 = bits(IF_ID.io.instruction_out, 24, 20) @[top.scala 90:56]
    ID_EX.io.rs2_select_in <= _T_36 @[top.scala 90:29]
    ID_EX.io.rs2_in <= register_file.io.rs2 @[top.scala 91:22]
    ID_EX.io.rs1_in <= register_file.io.rs1 @[top.scala 92:22]
    immediate_generation.io.instruction <= IF_ID.io.instruction_out @[top.scala 94:45]
    immediate_generation.io.pc <= IF_ID.io.pc_out @[top.scala 95:36]
    node _T_38 = eq(control.io.extend_select, UInt<1>("h00")) @[top.scala 96:32]
    when _T_38 : @[top.scala 96:45]
      ID_EX.io.immediate_in <= immediate_generation.io.i_immediate @[top.scala 97:28]
      skip @[top.scala 96:45]
    else : @[top.scala 98:52]
      node _T_40 = eq(control.io.extend_select, UInt<1>("h01")) @[top.scala 98:39]
      when _T_40 : @[top.scala 98:52]
        ID_EX.io.immediate_in <= immediate_generation.io.s_immediate @[top.scala 99:28]
        skip @[top.scala 98:52]
      else : @[top.scala 100:52]
        node _T_42 = eq(control.io.extend_select, UInt<2>("h02")) @[top.scala 100:39]
        when _T_42 : @[top.scala 100:52]
          ID_EX.io.immediate_in <= immediate_generation.io.u_immediate @[top.scala 101:28]
          skip @[top.scala 100:52]
        else : @[top.scala 102:15]
          ID_EX.io.immediate_in <= asSInt(UInt<32>("h00")) @[top.scala 103:28]
          skip @[top.scala 102:15]
    node _T_44 = bits(IF_ID.io.instruction_out, 6, 0) @[top.scala 106:54]
    control.io.opcode <= _T_44 @[top.scala 106:27]
    node _T_45 = bits(IF_ID.io.instruction_out, 19, 15) @[top.scala 108:61]
    register_file.io.rs1_select <= _T_45 @[top.scala 108:34]
    node _T_46 = bits(IF_ID.io.instruction_out, 24, 20) @[top.scala 109:61]
    register_file.io.rs2_select <= _T_46 @[top.scala 109:34]
    register_file.io.register_write <= MEM_WB.io.registerwrite_out @[top.scala 110:38]
    register_file.io.rd_select <= MEM_WB.io.rd_select_out @[top.scala 111:33]
    branch_forward.io.ID_EX_registerrd <= ID_EX.io.rd_select_out @[top.scala 113:40]
    branch_forward.io.EX_MEM_registerrd <= EX_MEM.io.rd_select_out @[top.scala 114:41]
    branch_forward.io.MEM_WB_registerrd <= MEM_WB.io.rd_select_out @[top.scala 115:41]
    branch_forward.io.ID_EX_memoryread <= ID_EX.io.control_memoryread_out @[top.scala 116:40]
    branch_forward.io.EX_MEM_memoryread <= EX_MEM.io.memoryread_out @[top.scala 117:41]
    branch_forward.io.MEM_WB_memoryread <= MEM_WB.io.memoryread_out @[top.scala 118:41]
    node _T_47 = bits(IF_ID.io.instruction_out, 19, 15) @[top.scala 119:61]
    branch_forward.io.rs1_select <= _T_47 @[top.scala 119:34]
    node _T_48 = bits(IF_ID.io.instruction_out, 24, 20) @[top.scala 120:61]
    branch_forward.io.rs2_select <= _T_48 @[top.scala 120:34]
    branch_forward.io.control_branch <= control.io.branch @[top.scala 121:38]
    node _T_49 = bits(IF_ID.io.instruction_out, 14, 12) @[top.scala 124:54]
    branch_logic.io.func3 <= _T_49 @[top.scala 124:27]
    node _T_51 = eq(branch_forward.io.forward_rs1, UInt<1>("h00")) @[top.scala 127:40]
    when _T_51 : @[top.scala 127:55]
      branch_logic.io.rs1 <= register_file.io.rs1 @[top.scala 128:27]
      jalr.io.input_a <= register_file.io.rs1 @[top.scala 129:23]
      skip @[top.scala 127:55]
    else : @[top.scala 130:62]
      node _T_53 = eq(branch_forward.io.forward_rs1, UInt<1>("h01")) @[top.scala 130:47]
      when _T_53 : @[top.scala 130:62]
        branch_logic.io.rs1 <= alu.io.output @[top.scala 131:27]
        jalr.io.input_a <= register_file.io.rs1 @[top.scala 132:23]
        skip @[top.scala 130:62]
      else : @[top.scala 133:62]
        node _T_55 = eq(branch_forward.io.forward_rs1, UInt<2>("h02")) @[top.scala 133:47]
        when _T_55 : @[top.scala 133:62]
          branch_logic.io.rs1 <= EX_MEM.io.alu_out @[top.scala 134:27]
          jalr.io.input_a <= register_file.io.rs1 @[top.scala 135:23]
          skip @[top.scala 133:62]
        else : @[top.scala 136:62]
          node _T_57 = eq(branch_forward.io.forward_rs1, UInt<2>("h03")) @[top.scala 136:47]
          when _T_57 : @[top.scala 136:62]
            branch_logic.io.rs1 <= register_file.io.write_data @[top.scala 137:27]
            jalr.io.input_a <= register_file.io.rs1 @[top.scala 138:23]
            skip @[top.scala 136:62]
          else : @[top.scala 139:62]
            node _T_59 = eq(branch_forward.io.forward_rs1, UInt<3>("h04")) @[top.scala 139:47]
            when _T_59 : @[top.scala 139:62]
              branch_logic.io.rs1 <= data_memory.io.memory_out @[top.scala 140:27]
              jalr.io.input_a <= register_file.io.rs1 @[top.scala 141:23]
              skip @[top.scala 139:62]
            else : @[top.scala 142:62]
              node _T_61 = eq(branch_forward.io.forward_rs1, UInt<3>("h05")) @[top.scala 142:47]
              when _T_61 : @[top.scala 142:62]
                branch_logic.io.rs1 <= register_file.io.write_data @[top.scala 143:27]
                jalr.io.input_a <= register_file.io.rs1 @[top.scala 144:23]
                skip @[top.scala 142:62]
              else : @[top.scala 148:59]
                node _T_63 = eq(branch_forward.io.forward_rs1, UInt<3>("h06")) @[top.scala 148:44]
                when _T_63 : @[top.scala 148:59]
                  jalr.io.input_a <= alu.io.output @[top.scala 149:25]
                  branch_logic.io.rs1 <= register_file.io.rs1 @[top.scala 150:29]
                  skip @[top.scala 148:59]
                else : @[top.scala 151:62]
                  node _T_65 = eq(branch_forward.io.forward_rs1, UInt<3>("h07")) @[top.scala 151:47]
                  when _T_65 : @[top.scala 151:62]
                    jalr.io.input_a <= EX_MEM.io.alu_out_in @[top.scala 152:25]
                    branch_logic.io.rs1 <= register_file.io.rs1 @[top.scala 153:29]
                    skip @[top.scala 151:62]
                  else : @[top.scala 154:62]
                    node _T_67 = eq(branch_forward.io.forward_rs1, UInt<4>("h08")) @[top.scala 154:47]
                    when _T_67 : @[top.scala 154:62]
                      jalr.io.input_a <= register_file.io.write_data @[top.scala 155:25]
                      branch_logic.io.rs1 <= register_file.io.rs1 @[top.scala 156:29]
                      skip @[top.scala 154:62]
                    else : @[top.scala 157:62]
                      node _T_69 = eq(branch_forward.io.forward_rs1, UInt<4>("h09")) @[top.scala 157:47]
                      when _T_69 : @[top.scala 157:62]
                        jalr.io.input_a <= data_memory.io.memory_out @[top.scala 158:25]
                        branch_logic.io.rs1 <= register_file.io.rs1 @[top.scala 159:29]
                        skip @[top.scala 157:62]
                      else : @[top.scala 160:62]
                        node _T_71 = eq(branch_forward.io.forward_rs1, UInt<4>("h0a")) @[top.scala 160:47]
                        when _T_71 : @[top.scala 160:62]
                          jalr.io.input_a <= register_file.io.write_data @[top.scala 161:25]
                          branch_logic.io.rs1 <= register_file.io.rs1 @[top.scala 162:29]
                          skip @[top.scala 160:62]
                        else : @[top.scala 163:17]
                          branch_logic.io.rs1 <= register_file.io.rs1 @[top.scala 164:29]
                          jalr.io.input_a <= register_file.io.rs1 @[top.scala 165:25]
                          skip @[top.scala 163:17]
    node _T_73 = eq(branch_forward.io.forward_rs2, UInt<1>("h00")) @[top.scala 168:40]
    when _T_73 : @[top.scala 168:55]
      branch_logic.io.rs2 <= register_file.io.rs2 @[top.scala 169:27]
      skip @[top.scala 168:55]
    else : @[top.scala 170:62]
      node _T_75 = eq(branch_forward.io.forward_rs2, UInt<1>("h01")) @[top.scala 170:47]
      when _T_75 : @[top.scala 170:62]
        branch_logic.io.rs2 <= alu.io.output @[top.scala 171:27]
        skip @[top.scala 170:62]
      else : @[top.scala 172:62]
        node _T_77 = eq(branch_forward.io.forward_rs2, UInt<2>("h02")) @[top.scala 172:47]
        when _T_77 : @[top.scala 172:62]
          branch_logic.io.rs2 <= EX_MEM.io.alu_out @[top.scala 173:27]
          skip @[top.scala 172:62]
        else : @[top.scala 174:62]
          node _T_79 = eq(branch_forward.io.forward_rs2, UInt<2>("h03")) @[top.scala 174:47]
          when _T_79 : @[top.scala 174:62]
            branch_logic.io.rs2 <= register_file.io.write_data @[top.scala 175:27]
            skip @[top.scala 174:62]
          else : @[top.scala 176:62]
            node _T_81 = eq(branch_forward.io.forward_rs2, UInt<3>("h04")) @[top.scala 176:47]
            when _T_81 : @[top.scala 176:62]
              branch_logic.io.rs2 <= data_memory.io.memory_out @[top.scala 177:27]
              skip @[top.scala 176:62]
            else : @[top.scala 178:62]
              node _T_83 = eq(branch_forward.io.forward_rs2, UInt<3>("h05")) @[top.scala 178:47]
              when _T_83 : @[top.scala 178:62]
                branch_logic.io.rs2 <= register_file.io.write_data @[top.scala 179:27]
                skip @[top.scala 178:62]
              else : @[top.scala 180:17]
                branch_logic.io.rs2 <= register_file.io.rs2 @[top.scala 181:29]
                skip @[top.scala 180:17]
    jalr.io.input_b <= immediate_generation.io.i_immediate @[top.scala 184:21]
    node _T_85 = eq(hazard_detection.io.control_forward, UInt<1>("h01")) @[top.scala 187:46]
    when _T_85 : @[top.scala 187:58]
      ID_EX.io.control_memorywrite_in <= UInt<1>("h00") @[top.scala 188:41]
      ID_EX.io.control_memoryread_in <= UInt<1>("h00") @[top.scala 189:40]
      ID_EX.io.control_branch_in <= UInt<1>("h00") @[top.scala 190:36]
      ID_EX.io.control_registerwrite_in <= UInt<1>("h00") @[top.scala 191:43]
      ID_EX.io.control_memorytoregister_in <= UInt<1>("h00") @[top.scala 192:46]
      ID_EX.io.control_aluop_in <= UInt<1>("h00") @[top.scala 193:35]
      ID_EX.io.control_opa_select_in <= UInt<1>("h00") @[top.scala 194:40]
      ID_EX.io.control_opb_select_in <= UInt<1>("h00") @[top.scala 195:40]
      ID_EX.io.control_nextpc_select_in <= UInt<1>("h00") @[top.scala 196:43]
      skip @[top.scala 187:58]
    else : @[top.scala 197:18]
      ID_EX.io.control_memorywrite_in <= control.io.memory_write @[top.scala 198:41]
      ID_EX.io.control_memoryread_in <= control.io.memory_read @[top.scala 199:40]
      ID_EX.io.control_branch_in <= control.io.branch @[top.scala 200:36]
      ID_EX.io.control_registerwrite_in <= control.io.register_write @[top.scala 201:43]
      ID_EX.io.control_memorytoregister_in <= control.io.memory_to_register @[top.scala 202:46]
      ID_EX.io.control_aluop_in <= control.io.alu_op @[top.scala 203:35]
      ID_EX.io.control_opa_select_in <= control.io.operand_a_select @[top.scala 204:40]
      ID_EX.io.control_opb_select_in <= control.io.operand_b_select @[top.scala 205:40]
      ID_EX.io.control_nextpc_select_in <= control.io.next_pc_select @[top.scala 206:43]
      skip @[top.scala 197:18]
    forward_unit.io.EX_MEM_registerrd <= EX_MEM.io.rd_select_out @[top.scala 210:43]
    forward_unit.io.MEM_WB_registerrd <= MEM_WB.io.rd_select_out @[top.scala 211:43]
    forward_unit.io.ID_EX_registerrs1 <= ID_EX.io.rs1_select_out @[top.scala 212:43]
    forward_unit.io.ID_EX_registerrs2 <= ID_EX.io.rs2_select_out @[top.scala 213:43]
    forward_unit.io.EX_MEM_registerwrite <= EX_MEM.io.registerwrite_out @[top.scala 214:46]
    forward_unit.io.MEM_WB_registerwrite <= MEM_WB.io.registerwrite_out @[top.scala 215:46]
    node _T_96 = eq(ID_EX.io.control_opa_select_out, UInt<2>("h02")) @[top.scala 219:43]
    when _T_96 : @[top.scala 219:56]
      alu.io.operand_a <= ID_EX.io.pc4_out @[top.scala 220:24]
      skip @[top.scala 219:56]
    else : @[top.scala 221:18]
      node _T_98 = eq(forward_unit.io.forward_a, UInt<1>("h00")) @[top.scala 222:40]
      when _T_98 : @[top.scala 222:53]
        alu.io.operand_a <= ID_EX.io.rs1_out @[top.scala 223:28]
        skip @[top.scala 222:53]
      else : @[top.scala 224:60]
        node _T_100 = eq(forward_unit.io.forward_a, UInt<1>("h01")) @[top.scala 224:47]
        when _T_100 : @[top.scala 224:60]
          alu.io.operand_a <= EX_MEM.io.alu_out @[top.scala 225:28]
          skip @[top.scala 224:60]
        else : @[top.scala 226:60]
          node _T_102 = eq(forward_unit.io.forward_a, UInt<2>("h02")) @[top.scala 226:47]
          when _T_102 : @[top.scala 226:60]
            alu.io.operand_a <= register_file.io.write_data @[top.scala 227:28]
            skip @[top.scala 226:60]
          else : @[top.scala 228:22]
            alu.io.operand_a <= ID_EX.io.rs1_out @[top.scala 229:28]
            skip @[top.scala 228:22]
      skip @[top.scala 221:18]
    node _T_104 = eq(ID_EX.io.control_opb_select_out, UInt<1>("h01")) @[top.scala 233:42]
    when _T_104 : @[top.scala 233:54]
      alu.io.operand_b <= ID_EX.io.immediate_out @[top.scala 234:24]
      node _T_106 = eq(forward_unit.io.forward_b, UInt<1>("h00")) @[top.scala 235:38]
      when _T_106 : @[top.scala 235:51]
        EX_MEM.io.rs2_in <= ID_EX.io.rs2_out @[top.scala 236:26]
        skip @[top.scala 235:51]
      else : @[top.scala 237:58]
        node _T_108 = eq(forward_unit.io.forward_b, UInt<1>("h01")) @[top.scala 237:45]
        when _T_108 : @[top.scala 237:58]
          EX_MEM.io.rs2_in <= EX_MEM.io.alu_out @[top.scala 238:26]
          skip @[top.scala 237:58]
        else : @[top.scala 239:58]
          node _T_110 = eq(forward_unit.io.forward_b, UInt<2>("h02")) @[top.scala 239:45]
          when _T_110 : @[top.scala 239:58]
            EX_MEM.io.rs2_in <= register_file.io.write_data @[top.scala 240:26]
            skip @[top.scala 239:58]
          else : @[top.scala 241:20]
            EX_MEM.io.rs2_in <= ID_EX.io.rs2_out @[top.scala 242:26]
            skip @[top.scala 241:20]
      skip @[top.scala 233:54]
    else : @[top.scala 244:18]
      node _T_112 = eq(forward_unit.io.forward_b, UInt<1>("h00")) @[top.scala 245:38]
      when _T_112 : @[top.scala 245:51]
        alu.io.operand_b <= ID_EX.io.rs2_out @[top.scala 246:26]
        EX_MEM.io.rs2_in <= ID_EX.io.rs2_out @[top.scala 247:26]
        skip @[top.scala 245:51]
      else : @[top.scala 248:58]
        node _T_114 = eq(forward_unit.io.forward_b, UInt<1>("h01")) @[top.scala 248:45]
        when _T_114 : @[top.scala 248:58]
          alu.io.operand_b <= EX_MEM.io.alu_out @[top.scala 249:26]
          EX_MEM.io.rs2_in <= EX_MEM.io.alu_out @[top.scala 250:26]
          skip @[top.scala 248:58]
        else : @[top.scala 251:58]
          node _T_116 = eq(forward_unit.io.forward_b, UInt<2>("h02")) @[top.scala 251:45]
          when _T_116 : @[top.scala 251:58]
            alu.io.operand_b <= register_file.io.write_data @[top.scala 252:26]
            EX_MEM.io.rs2_in <= register_file.io.write_data @[top.scala 253:26]
            skip @[top.scala 251:58]
          else : @[top.scala 254:20]
            alu.io.operand_b <= ID_EX.io.rs2_out @[top.scala 255:26]
            EX_MEM.io.rs2_in <= ID_EX.io.rs2_out @[top.scala 256:26]
            skip @[top.scala 254:20]
      skip @[top.scala 244:18]
    alu_control.io.alu_op <= ID_EX.io.control_aluop_out @[top.scala 260:31]
    alu_control.io.func7 <= ID_EX.io.func7_out @[top.scala 261:30]
    alu_control.io.func3 <= ID_EX.io.func3_out @[top.scala 262:30]
    alu.io.alu_control <= alu_control.io.output @[top.scala 264:24]
    EX_MEM.io.alu_out_in <= alu.io.output @[top.scala 266:30]
    EX_MEM.io.rd_select <= ID_EX.io.rd_select_out @[top.scala 267:29]
    EX_MEM.io.rs2_select <= ID_EX.io.rs2_select_out @[top.scala 268:30]
    EX_MEM.io.memorywrite <= ID_EX.io.control_memorywrite_out @[top.scala 269:31]
    EX_MEM.io.memoryread <= ID_EX.io.control_memoryread_out @[top.scala 270:30]
    EX_MEM.io.registerwrite <= ID_EX.io.control_registerwrite_out @[top.scala 271:33]
    EX_MEM.io.memorytoregister <= ID_EX.io.control_memorytoregister_out @[top.scala 272:36]
    MEM_WB.io.alu_out_in <= EX_MEM.io.alu_out @[top.scala 279:28]
    MEM_WB.io.datamemory_data_in <= data_memory.io.memory_out @[top.scala 280:36]
    MEM_WB.io.rd_select <= EX_MEM.io.rd_select_out @[top.scala 281:27]
    MEM_WB.io.registerwrite <= EX_MEM.io.registerwrite_out @[top.scala 282:31]
    MEM_WB.io.memoryread <= EX_MEM.io.memoryread_out @[top.scala 283:28]
    MEM_WB.io.memorytoregister <= EX_MEM.io.memorytoregister_out @[top.scala 284:34]
    node _T_117 = bits(EX_MEM.io.alu_out, 11, 2) @[top.scala 286:57]
    data_memory.io.memory_address <= _T_117 @[top.scala 286:37]
    data_memory.io.memory_write <= EX_MEM.io.memorywrite_out @[top.scala 287:35]
    data_memory.io.memory_read <= EX_MEM.io.memoryread_out @[top.scala 288:34]
    data_memory.io.memory_data <= EX_MEM.io.rs2_out @[top.scala 289:34]
    node _T_119 = eq(MEM_WB.io.memorytoregister_out, UInt<1>("h01")) @[top.scala 295:41]
    when _T_119 : @[top.scala 295:53]
      register_file.io.write_data <= MEM_WB.io.datamemory_data_out @[top.scala 296:37]
      skip @[top.scala 295:53]
    else : @[top.scala 297:18]
      register_file.io.write_data <= MEM_WB.io.alu_out @[top.scala 298:37]
      skip @[top.scala 297:18]
    io.reg_out <= register_file.io.write_data @[top.scala 303:12]
    
